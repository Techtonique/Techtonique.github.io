name: Build R packages repository

on:
  push:
    branches:
      - master
      - main
    paths:
      - 'r-packages/**'
      - '.github/workflows/r-packages.yml'
  workflow_dispatch:

jobs:
  build-source:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qpdf texinfo texlive-latex-base texlive-latex-extra \
            libcurl4-openssl-dev libssl-dev libxml2-dev \
            libudunits2-dev libgdal-dev libgeos-dev libproj-dev \
            libfontconfig1-dev libharfbuzz-dev libfribidi-dev

      - name: Install pak and dependencies
        run: |
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/dev/")
          pak::pak(c(
            "remotes", 
            "Rcpp",
            "timeDate",
            "zoo",
            "xts",
            "tseries",
            "fracdiff",
            "forecast",
            "httr",
            "memoise",
            "foreach",
            "snow",
            "ggplot2",
            "cclust",
            "randtoolbox",
            "dfoptim",
            "doSNOW",
            "scoringRules",
            "gridExtra",
            "reshape2",
            "VineCopula",
            "jsonlite",
            "skimr",
            "ranger",
            "glmnet",
            "xgboost",
            "e1071",
            "caret",
            "R6"
          ))
        shell: Rscript {0}

      - name: Build source packages
        shell: Rscript {0}
        run: |
          # Setup directory
          repo_dir <- "r-packages"
          pkg_dir <- file.path(repo_dir, "src/contrib")
          dir.create(pkg_dir, recursive = TRUE, showWarnings = FALSE)
          
          # Initialize build status tracking
          build_status <- list(
            platform = "source",
            timestamp = format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
            packages = list()
          )
          
          # Read packages.json
          packages_info <- jsonlite::fromJSON("packages.json")
          message("Found packages: ", paste(packages_info$package, collapse = ", "))
          
          # Clone and build packages
          for (i in seq_len(nrow(packages_info))) {
            pkg <- packages_info$package[i]
            url <- packages_info$url[i]
            
            status_entry <- list(
              package = pkg,
              status = "FAILED",
              error_message = NULL,
              build_time = format(Sys.time(), "%Y-%m-%d %H:%M:%S")
            )
            
            message("\n====================================")
            message("Processing package: ", pkg)
            message("====================================\n")
            
            result <- tryCatch({
              # Clone repository
              message("\nCloning repository from ", url, "...")
              clone_cmd <- sprintf("git clone %s %s", url, pkg)
              system(clone_cmd)
              
              # Run R CMD check
              message("\nRunning R CMD check...")
              check_cmd <- paste("R CMD check", pkg, "--no-manual --no-build-vignettes")
              check_output <- system(check_cmd, intern = TRUE)
              message("R CMD check output:")
              print(check_output)
              
              # Build source package
              message("\nBuilding source package...")
              build_cmd <- paste("R CMD build", pkg)
              build_output <- system(build_cmd, intern = TRUE)
              message("Build command output:")
              print(build_output)
              
              # Move package to repository
              pkg_file <- list.files(pattern = paste0(pkg, ".*\\.tar\\.gz$"))
              if (length(pkg_file) > 0) {
                file.copy(pkg_file, pkg_dir, overwrite = TRUE)
                status_entry$status <- "SUCCESS"
                message("Package file copied to repository directory")
              } else {
                status_entry$error_message <- "No package file found after build"
                message("WARNING: No package file found after build!")
              }
              NULL
            }, error = function(e) {
              message("Error processing package: ", pkg)
              message("Error message: ", e$message)
              message("Call stack:")
              print(sys.calls())
              e
            })
            
            if (inherits(result, "error")) {
              status_entry$error_message <- conditionMessage(result)
            }
            
            # Add status to tracking list
            build_status$packages[[pkg]] <- status_entry
          }
          
          message("\nCreating PACKAGES files...")
          tools::write_PACKAGES(pkg_dir, type = "source")
          message("PACKAGES files created")
          
          message("\nFinal repository contents:")
          print(list.files(pkg_dir, recursive = TRUE))
          
          # Save build status
          status_file <- file.path(repo_dir, "build_status_source.json")
          jsonlite::write_json(build_status, status_file, pretty = TRUE, auto_unbox = TRUE)
          
          # Print summary
          message("\nBuild Summary:")
          successful <- sum(sapply(build_status$packages, function(x) x$status == "SUCCESS"))
          failed <- sum(sapply(build_status$packages, function(x) x$status == "FAILED"))
          message("Successful builds: ", successful)
          message("Failed builds: ", failed)
          message("\nDetailed status:")
          print(jsonlite::toJSON(build_status, pretty = TRUE, auto_unbox = TRUE))

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r-packages-source
          path: r-packages

  build-binaries:
    needs: build-source
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: win.binary
            path: bin/windows/contrib/4.3
          - os: macos-latest
            platform: mac.binary
            path: bin/macosx/contrib/4.3
            
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'

      - name: Install Rtools (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install rtools
          echo "C:/rtools44/x86_64-w64-mingw32.static.posix/bin" >> $GITHUB_PATH
          echo "C:/rtools44/usr/bin" >> $GITHUB_PATH
          # Add verification steps
          echo "Verifying Rtools installation:"
          ls "C:/rtools44"
          echo "PATH environment variable:"
          echo $PATH
          where gcc
          where make
        shell: bash

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install qpdf
          brew install --cask basictex

      - name: Install pak and dependencies
        run: |
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/dev/")
          pak::pak(c(
            "remotes", 
            "Rcpp",
            "timeDate",
            "zoo",
            "xts",
            "tseries",
            "fracdiff",
            "forecast",
            "httr",
            "memoise",
            "foreach",
            "snow",
            "ggplot2",
            "cclust",
            "randtoolbox",
            "dfoptim",
            "doSNOW",
            "scoringRules",
            "gridExtra",
            "reshape2",
            "VineCopula",
            "jsonlite",
            "skimr",
            "ranger",
            "glmnet",
            "xgboost",
            "e1071",
            "caret",
            "R6"
          ))
        shell: Rscript {0}

      - name: Download source packages
        uses: actions/download-artifact@v4
        with:
          name: r-packages-source
          path: r-packages-source

      - name: Build binary packages
        shell: Rscript {0}
        run: |
          # Setup directory
          repo_dir <- "r-packages"
          source_dir <- "r-packages-source/src/contrib"
          bin_dir <- file.path(repo_dir, "${{ matrix.path }}")
          dir.create(bin_dir, recursive = TRUE, showWarnings = FALSE)
          
          # Get list of source packages
          pkg_files <- list.files(source_dir, pattern = "\\.tar\\.gz$", full.names = TRUE)
          message("Found source packages: ", paste(basename(pkg_files), collapse = ", "))
          
          # Initialize build status tracking
          build_status <- list(
            platform = "${{ matrix.platform }}",
            timestamp = format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
            packages = list()
          )
          
          # Build binary packages
          for (pkg_file in pkg_files) {
            pkg_name <- sub("_.*$", "", basename(pkg_file))
            status_entry <- list(
              package = pkg_name,
              status = "FAILED",
              error_message = NULL,
              build_time = format(Sys.time(), "%Y-%m-%d %H:%M:%S")
            )
            
            message("\n====================================")
            message("Processing package: ", basename(pkg_file))
            message("====================================\n")
            
            result <- tryCatch({
              message("\nBuilding binary package...")
              build_cmd <- paste("R CMD INSTALL --build", pkg_file, "--no-multiarch")
              build_output <- system(build_cmd, intern = TRUE)
              message("Build command output:")
              print(build_output)
              
              # Move binary package to repository
              if (Sys.info()[["sysname"]] == "Windows") {
                bin_files <- list.files(pattern = "\\.zip$")
              } else {
                bin_files <- list.files(pattern = "\\.tgz$")
              }
              
              if (length(bin_files) > 0) {
                file.copy(bin_files, bin_dir, overwrite = TRUE)
                status_entry$status <- "SUCCESS"
                message("Binary package(s) copied to repository")
              } else {
                status_entry$error_message <- "No binary package found after build"
                message("WARNING: No binary package found after build!")
              }
              NULL
            }, error = function(e) {
              message("Error processing package: ", basename(pkg_file))
              message("Error message: ", e$message)
              message("Call stack:")
              print(sys.calls())
              e
            })
            
            if (inherits(result, "error")) {
              status_entry$error_message <- conditionMessage(result)
            }
            
            # Add status to tracking list
            build_status$packages[[pkg_name]] <- status_entry
          }
          
          message("\nCreating PACKAGES files...")
          tools::write_PACKAGES(bin_dir, type = "${{ matrix.platform }}")
          message("PACKAGES files created")
          
          message("\nFinal repository contents:")
          print(list.files(bin_dir, recursive = TRUE))
          
          # Save build status
          status_file <- file.path(repo_dir, sprintf("build_status_%s.json", "${{ matrix.platform }}"))
          jsonlite::write_json(build_status, status_file, pretty = TRUE, auto_unbox = TRUE)
          
          # Print summary
          message("\nBuild Summary:")
          successful <- sum(sapply(build_status$packages, function(x) x$status == "SUCCESS"))
          failed <- sum(sapply(build_status$packages, function(x) x$status == "FAILED"))
          message("Successful builds: ", successful)
          message("Failed builds: ", failed)
          message("\nDetailed status:")
          print(jsonlite::toJSON(build_status, pretty = TRUE, auto_unbox = TRUE))

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r-packages-${{ matrix.os }}
          path: r-packages

  finalize:
    needs: [build-source, build-binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Merge repositories
        run: |
          mkdir -p r-packages
          cp -r artifacts/*/* r-packages/
          
          # Clean up unnecessary directories
          cd r-packages
          for dir in */; do
            if [[ "$dir" != "src/" && "$dir" != "bin/" ]]; then
              rm -rf "$dir"
            fi
          done
          
          echo "Repository contents after cleanup:"
          ls -R
          
      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git add r-packages/
          git commit -m "Update R packages repository" || echo "No changes to commit"
          git push

      - name: Verify Windows build environment
        if: runner.os == 'Windows'
        shell: Rscript {0}
        run: |
          message("R version:")
          print(R.version)
          
          message("\nR home directory:")
          print(R.home())
          
          message("\nSystem PATH:")
          print(Sys.getenv("PATH"))
          
          message("\nChecking for Rtools:")
          print(pkgbuild::find_rtools())
