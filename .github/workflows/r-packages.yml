name: Build R packages repository

on:
  push:
    branches:
      - master
      - main
    paths:
      - 'r-packages/**'
      - '.github/workflows/r-packages.yml'
  workflow_dispatch:

jobs:
  build-source:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install qpdf
          brew install --cask basictex
          
      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install rtools
          
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y qpdf texinfo texlive-latex-base texlive-latex-extra \
            libcurl4-openssl-dev libssl-dev libxml2-dev \
            libudunits2-dev libgdal-dev libgeos-dev libproj-dev \
            libfontconfig1-dev libharfbuzz-dev libfribidi-dev

      - name: Install pak
        run: |
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/dev/")
        shell: Rscript {0}

      - name: Install R package dependencies
        run: |
          # First install dependencies that forecast needs
          pak::pak(c(
            "timeDate",
            "zoo",
            "xts",
            "tseries",
            "fracdiff"
          ))
          
          # Then try to install forecast
          pak::pak("forecast")
          
          # Finally install other needed packages
          pak::pak(c(
            "miniCRAN", 
            "remotes", 
            "Rcpp",
            "httr",
            "foreach",
            "snow",
            "ggplot2",
            "cclust",
            "randtoolbox",
            "dfoptim",
            "doSNOW",
            "scoringRules",
            "gridExtra",
            "reshape2",
            "VineCopula",
            "jsonlite",
            "skimr",
            "ranger",
            "glmnet",
            "xgboost",
            "e1071",
            "caret",
            "R6"
          ))
        shell: Rscript {0}

      - name: Build source packages
        run: |
          # Create R script for building packages
          cat << 'EOF' > build_packages.R
          library(miniCRAN)
          
          # Define directories
          repo_dir <- "r-packages"
          
          # Create the repository directories
          dir.create(file.path(repo_dir, "src/contrib"), recursive = TRUE, showWarnings = FALSE)
          
          # List of R packages to build
          packages <- c(
              "ahead",
              "bcn",
              "crossvalidation",
              "ESGtoolkit",
              "learningmachine",
              "misc"
          )
          
          # Build and store package source tarballs
          message("\nBuilding packages...")
          for (pkg_name in packages) {
              message(paste("\nBuilding", pkg_name, "..."))
              pkg_dir <- file.path(".", pkg_name)
              
              if (dir.exists(pkg_dir)) {
                  # Run R CMD build
                  system(paste("R CMD build", pkg_dir))
                  
                  # Find the created tarball
                  pkg_file <- list.files(".", pattern = paste0(basename(pkg_name), ".*\\.tar\\.gz$"), full.names = TRUE)
                  
                  if (length(pkg_file) > 0) {
                      # Move the package to the repository directory
                      file.copy(pkg_file[1], file.path(repo_dir, "src/contrib"), overwrite = TRUE)
                      file.remove(pkg_file[1])  # Clean up
                      message(paste("Successfully built and copied:", pkg_name))
                  }
              }
          }
          
          # Create PACKAGES files
          tools::write_PACKAGES(file.path(repo_dir, "src/contrib"), type="source")
          EOF
          
          # Run the R script
          Rscript build_packages.R

  build-binaries:
    needs: build-source
    strategy:
      matrix:
        os: [windows-latest, macos-latest]
        include:
          - os: windows-latest
            platform: win.binary
            path: bin/windows/contrib/4.3
          - os: macos-latest
            platform: mac.binary
            path: bin/macosx/contrib/4.3
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          
      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install qpdf
          brew install --cask basictex
          
      - name: Install system dependencies (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install rtools
          
      - name: Install system dependencies (Linux)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y qpdf texinfo texlive-latex-base texlive-latex-extra

      - name: Install pak
        run: |
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/dev/")
        shell: Rscript {0}

      - name: Install R package dependencies
        run: |
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/dev/")
          pak::pak(c("miniCRAN", "remotes", "Rcpp"))
        shell: Rscript {0}

      - name: Build binary packages
        run: |
          # Create R script for building binary packages
          @'
          library(miniCRAN)
          
          # Setup directories
          repo_dir <- "r-packages"
          source_dir <- "r-packages-source/src/contrib"
          
          # Create binary directory
          bin_dir <- file.path(repo_dir, "${{ matrix.path }}")
          dir.create(bin_dir, recursive = TRUE, showWarnings = FALSE)
          
          # Get list of source packages
          pkg_files <- list.files(source_dir, pattern = "\\.tar\\.gz$", full.names = TRUE)
          message("Found source packages: ", paste(basename(pkg_files), collapse = ", "))
          
          # Build binary packages
          for (pkg_file in pkg_files) {
              message("\nAttempting to build: ", basename(pkg_file))
              tryCatch({
                  cmd <- sprintf("R CMD INSTALL --build %s --no-multiarch", pkg_file)
                  message("Running command: ", cmd)
                  system_output <- system(cmd, intern = TRUE)
                  message(paste(system_output, collapse = "\n"))
                  message("Successfully built: ", basename(pkg_file))
              }, error = function(e) {
                  message("Error building package: ", basename(pkg_file))
                  message("Error message: ", e$message)
                  message("Stack trace: ", paste(sys.calls(), collapse = "\n"))
              })
          }
          
          # Move binary packages to repository
          if (.Platform$OS.type == "windows") {
              zip_files <- list.files(pattern = "\\.zip$", full.names = TRUE)
              message("\nFound binary packages: ", paste(basename(zip_files), collapse = ", "))
              if (length(zip_files) > 0) {
                  file.copy(zip_files, bin_dir, overwrite = TRUE)
                  message("Copied binary packages to: ", bin_dir)
              } else {
                  message("No binary packages found to copy!")
              }
          } else {
              tgz_files <- list.files(pattern = "\\.tgz$", full.names = TRUE)
              message("\nFound binary packages: ", paste(basename(tgz_files), collapse = ", "))
              if (length(tgz_files) > 0) {
                  file.copy(tgz_files, bin_dir, overwrite = TRUE)
                  message("Copied binary packages to: ", bin_dir)
              } else {
                  message("No binary packages found to copy!")
              }
          }
          
          # Create PACKAGES files
          message("\nCreating PACKAGES files in: ", bin_dir)
          tools::write_PACKAGES(bin_dir, type = "${{ matrix.platform }}")
          message("PACKAGES files created successfully")
          '@ | Out-File -Encoding utf8 build_binaries.R
          
          # Run the R script
          Rscript build_binaries.R
        shell: pwsh

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r-packages-${{ matrix.os }}
          path: r-packages
          
  finalize:
    needs: [build-source, build-binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Merge repositories
        run: |
          mkdir -p r-packages
          cp -r artifacts/*/* r-packages/
          # Add debug information
          echo "Contents of artifacts directory:"
          ls -R artifacts/
          echo "Contents of r-packages directory:"
          ls -R r-packages/
          
      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git add r-packages/
          git commit -m "Update R packages repository" || echo "No changes to commit"
          git push
