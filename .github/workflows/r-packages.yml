name: Build R packages repository

on:
  push:
    branches:
      - master
      - main
    paths:
      - 'r-packages/**'
      - '.github/workflows/r-packages.yml'
  workflow_dispatch:

jobs:
  build-binaries:
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: ubuntu-latest
            platform: source
            path: src/contrib
          - os: windows-latest
            platform: win.binary
            path: bin/windows/contrib/4.3
          - os: macos-latest
            platform: mac.binary
            path: bin/macosx/contrib/4.3
            
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'

      - name: Install system dependencies (Ubuntu)
        if: runner.os == 'Linux'
        run: |
          sudo apt-get update
          sudo apt-get install -y qpdf texinfo texlive-latex-base texlive-latex-extra \
            libcurl4-openssl-dev libssl-dev libxml2-dev \
            libudunits2-dev libgdal-dev libgeos-dev libproj-dev \
            libfontconfig1-dev libharfbuzz-dev libfribidi-dev

      - name: Install Rtools (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install rtools
          echo "C:/rtools43/x86_64-w64-mingw32.static.posix/bin" >> $GITHUB_PATH
          echo "C:/rtools43/usr/bin" >> $GITHUB_PATH
          echo "Verifying Rtools installation:"
          ls "C:/rtools43"
          echo "PATH environment variable:"
          echo $PATH
          where gcc
          where make
        shell: bash

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install qpdf
          brew install --cask basictex

      - name: Install pak and dependencies
        run: |
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/dev/")
          pak::pak(c(
            "miniCRAN", 
            "remotes", 
            "Rcpp",
            "timeDate",
            "zoo",
            "xts",
            "tseries",
            "fracdiff",
            "forecast",
            "httr",
            "memoise",
            "foreach",
            "snow",
            "ggplot2",
            "cclust",
            "randtoolbox",
            "dfoptim",
            "doSNOW",
            "scoringRules",
            "gridExtra",
            "reshape2",
            "VineCopula",
            "jsonlite",
            "skimr",
            "ranger",
            "glmnet",
            "xgboost",
            "e1071",
            "caret",
            "R6"
          ))
        shell: Rscript {0}

      - name: Build and check packages
        shell: Rscript {0}
        run: |
          # Setup directory
          repo_dir <- "r-packages"
          pkg_dir <- file.path(repo_dir, "${{ matrix.path }}")
          dir.create(pkg_dir, recursive = TRUE, showWarnings = FALSE)
          
          # List of packages to build
          packages <- c(
              "ahead",
              "bcn",
              "crossvalidation",
              "ESGtoolkit",
              "learningmachine",
              "misc"
          )
          
          # Build and check packages
          for (pkg in packages) {
            message("\n====================================")
            message("Processing package: ", pkg)
            message("====================================\n")
            
            try({
              if (Sys.info()[["sysname"]] == "Windows") {
                message("\nWindows-specific information:")
                message("Working directory: ", getwd())
                message("Package directory exists: ", dir.exists(pkg))
                message("Package directory contents:")
                print(list.files(pkg, recursive = TRUE))
              }
              
              # First run R CMD check
              message("\nRunning R CMD check...")
              check_cmd <- paste("R CMD check", pkg, "--no-manual --no-build-vignettes")
              check_output <- system(check_cmd, intern = TRUE)
              message("R CMD check output:")
              print(check_output)
              
              if ("${{ matrix.platform }}" == "source") {
                message("\nBuilding source package...")
                build_cmd <- paste("R CMD build", pkg)
                system(build_cmd, intern = TRUE)
                pkg_file <- list.files(pattern = paste0(pkg, ".*\\.tar\\.gz$"))
                message("Source package built: ", pkg_file)
              } else {
                message("\nBuilding binary package...")
                build_cmd <- paste("R CMD INSTALL --build", pkg, "--no-multiarch")
                build_output <- system(build_cmd, intern = TRUE)
                message("Build command output:")
                print(build_output)
                
                if (Sys.info()[["sysname"]] == "Windows") {
                  pkg_file <- list.files(pattern = paste0(pkg, ".*\\.zip$"))
                  message("\nLooking for Windows binary:")
                  message("Pattern: ", paste0(pkg, ".*\\.zip$"))
                  message("Files found: ", paste(pkg_file, collapse = ", "))
                  message("All files in directory:")
                  print(list.files())
                }
              }
              
              if (length(pkg_file) > 0) {
                file.copy(pkg_file, pkg_dir, overwrite = TRUE)
                message("Package file copied to repository directory")
              } else {
                message("WARNING: No package file found after build!")
              }
            }, error = function(e) {
              message("Error processing package: ", pkg)
              message("Error message: ", e$message)
              message("Call stack:")
              print(sys.calls())
            })
          }
          
          message("\nCreating PACKAGES files...")
          tools::write_PACKAGES(pkg_dir, type = "${{ matrix.platform }}")
          message("PACKAGES files created")
          
          message("\nFinal repository contents:")
          print(list.files(pkg_dir, recursive = TRUE))

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r-packages-${{ matrix.os }}
          path: r-packages

  finalize:
    needs: build-binaries
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Merge repositories
        run: |
          mkdir -p r-packages
          cp -r artifacts/*/* r-packages/
          echo "Repository contents after merge:"
          ls -R r-packages/
          
      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git add r-packages/
          git commit -m "Update R packages repository" || echo "No changes to commit"
          git push

      - name: Verify Windows build environment
        if: runner.os == 'Windows'
        shell: Rscript {0}
        run: |
          message("R version:")
          print(R.version)
          
          message("\nR home directory:")
          print(R.home())
          
          message("\nSystem PATH:")
          print(Sys.getenv("PATH"))
          
          message("\nChecking for Rtools:")
          print(pkgbuild::find_rtools())
