name: Build R packages repository

on:
  push:
    branches:
      - master
      - main
    paths:
      - 'r-packages/**'
      - '.github/workflows/r-packages.yml'
  workflow_dispatch:

jobs:
  build-source:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y qpdf texinfo texlive-latex-base texlive-latex-extra \
            libcurl4-openssl-dev libssl-dev libxml2-dev \
            libudunits2-dev libgdal-dev libgeos-dev libproj-dev \
            libfontconfig1-dev libharfbuzz-dev libfribidi-dev

      - name: Install pak and dependencies
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
        run: |
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/dev/")
          pak::pak(c(
            "remotes", 
            "Rcpp",
            "timeDate",
            "zoo",
            "xts",
            "tseries",
            "fracdiff",
            "forecast",
            "httr",
            "memoise",
            "foreach",
            "snow",
            "ggplot2",
            "cclust",
            "randtoolbox",
            "dfoptim",
            "doSNOW",
            "scoringRules",
            "gridExtra",
            "reshape2",
            "VineCopula",
            "jsonlite",
            "skimr",
            "ranger",
            "glmnet",
            "xgboost",
            "e1071",
            "caret",
            "R6",
            "devtools",
            "vars",
            "rmarkdown", 
            "randomForest", 
            "fpp",
            "reticulate",
            "ForecastComb"
          ))
          pak::pkg_install("thierrymoudiki/misc")
        shell: Rscript {0}

      - name: Build source packages
        shell: Rscript {0}
        run: |
          # Setup directory
          repo_dir <- "r-packages"
          pkg_dir <- file.path(repo_dir, "src/contrib")
          dir.create(pkg_dir, recursive = TRUE, showWarnings = FALSE)
          
          # Initialize build status tracking
          build_status <- list(
            platform = "source",
            timestamp = format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
            packages = list()
          )
          
          # Read packages.json
          packages_info <- tryCatch({
            jsonlite::fromJSON("packages.json")
          }, error = function(e) {
            stop("Failed to read packages.json: ", conditionMessage(e))
          })
          
          message("Found packages: ", paste(packages_info$package, collapse = ", "))
          
          # Clone and build packages
          for (i in seq_len(nrow(packages_info))) {
            pkg <- packages_info$package[i]
            url <- paste0(packages_info$url[i], ".git")
            
            status_entry <- list(
              package = pkg,
              status = "FAILED",
              error_message = NULL,
              build_output = NULL,
              build_time = format(Sys.time(), "%Y-%m-%d %H:%M:%S")
            )
            
            message("\n====================================")
            message("Processing package: ", pkg)
            message("====================================\n")
            
            result <- tryCatch({
              # Clean up any existing directory
              if (dir.exists(pkg)) {
                unlink(pkg, recursive = TRUE)
              }
              
              # Clone repository
              clone_result <- system2("git", c("clone", url, pkg), stdout = TRUE, stderr = TRUE)
              if (!dir.exists(pkg)) {
                stop("Git clone failed: ", paste(clone_result, collapse = "\n"))
              }
              
              # List directory contents after clone
              message("Directory contents after clone:")
              print(list.files(pkg, recursive = FALSE))
              
              # Build source package
              message("\nBuilding source package...")
              build_cmd <- paste("R CMD build", pkg, "--no-build-vignettes --no-manual")
              build_output <- system(build_cmd, intern = TRUE)
              message("Build command output:")
              print(build_output)
              
              # Find the built package file
              pkg_files <- list.files(pattern = paste0("^", pkg, ".*\\.tar\\.gz$"))
              if (length(pkg_files) == 0) {
                stop("No package file found after build")
              }
              
              # Move package file to repository directory
              file.copy(pkg_files[1], pkg_dir, overwrite = TRUE)
              if (!file.exists(file.path(pkg_dir, pkg_files[1]))) {
                stop("Failed to copy package file to repository directory")
              }
              file.remove(pkg_files[1])
              
              status_entry$status <- "SUCCESS"
              status_entry$build_output <- paste(build_output, collapse = "\n")
              NULL
            }, error = function(e) {
              status_entry$error_message <- conditionMessage(e)
              if (!is.null(build_output)) {
                status_entry$build_output <- paste(build_output, collapse = "\n")
              }
              message("Error building package: ", conditionMessage(e))
              e
            }, finally = {
              # Clean up cloned directory
              if (dir.exists(pkg)) {
                unlink(pkg, recursive = TRUE)
              }
            })
            
            build_status$packages[[pkg]] <- status_entry
          }
          
          # Create PACKAGES files
          tryCatch({
            tools::write_PACKAGES(pkg_dir, type = "source")
          }, error = function(e) {
            message("Error creating PACKAGES files: ", conditionMessage(e))
          })
          
          # Print build summary
          message("\nBuild Summary:")
          successful <- sum(sapply(build_status$packages, function(x) x$status == "SUCCESS"))
          failed <- length(build_status$packages) - successful
          message("Successful builds: ", successful)
          message("Failed builds: ", failed)
          message("\nDetailed status:")
          print(jsonlite::toJSON(build_status, auto_unbox = TRUE, pretty = TRUE))
          
          # List final repository contents
          message("\nFinal repository contents:")
          print(list.files(pkg_dir))

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r-packages-source
          path: r-packages

  build-binaries:
    needs: build-source
    strategy:
      fail-fast: false
      matrix:
        include:
          - os: windows-latest
            platform: win.binary
            path: bin/windows/contrib/4.3
          - os: macos-latest
            platform: mac.binary
            path: bin/macosx/contrib/4.3
            
    runs-on: ${{ matrix.os }}
    
    steps:
      - uses: actions/checkout@v4
      
      - name: Set up R
        uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
          
      - name: Verify R installation
        run: |
          Rscript -e "R.version"
          which Rscript
        shell: bash

      - name: Install Rtools (Windows)
        if: runner.os == 'Windows'
        run: |
          choco install rtools
          echo "C:/rtools44/x86_64-w64-mingw32.static.posix/bin" >> $GITHUB_PATH
          echo "C:/rtools44/usr/bin" >> $GITHUB_PATH
          # Add verification steps
          echo "Verifying Rtools installation:"
          ls "C:/rtools44"
          echo "PATH environment variable:"
          echo $PATH
          where gcc
          where make
        shell: bash

      - name: Install system dependencies (macOS)
        if: runner.os == 'macOS'
        run: |
          brew install qpdf
          brew install --cask basictex

      - name: Install pak and dependencies
        env:
          GITHUB_PAT: ${{ secrets.GITHUB_TOKEN }}
        run: |
          install.packages("pak", repos = "https://r-lib.github.io/p/pak/dev/")
          pak::pak(c(
            "remotes", 
            "Rcpp",
            "timeDate",
            "zoo",
            "xts",
            "tseries",
            "fracdiff",
            "forecast",
            "httr",
            "memoise",
            "foreach",
            "snow",
            "ggplot2",
            "cclust",
            "randtoolbox",
            "dfoptim",
            "doSNOW",
            "scoringRules",
            "gridExtra",
            "reshape2",
            "VineCopula",
            "jsonlite",
            "skimr",
            "ranger",
            "glmnet",
            "xgboost",
            "e1071",
            "caret",
            "R6",
            "devtools",
            "vars",
            "rmarkdown",
            "randomForest",
            "fpp",
            "reticulate",
            "ForecastComb"
          ))
          pak::pkg_install("thierrymoudiki/misc")
        shell: Rscript {0}

      - name: Download source packages
        uses: actions/download-artifact@v4
        with:
          name: r-packages-source
          path: r-packages-source

      - name: Build binary packages
        shell: Rscript {0}
        env:
          _R_CHECK_FORCE_SUGGESTS_: false
        run: |
          # Setup directory
          repo_dir <- "r-packages"
          pkg_dir <- file.path(repo_dir, "${{ matrix.path }}")
          dir.create(pkg_dir, recursive = TRUE, showWarnings = FALSE)
          
          message("Building binaries for platform: ${{ matrix.platform }}")
          message("Output directory: ", pkg_dir)
          
          # Initialize build status tracking
          build_status <- list(
            platform = "${{ matrix.platform }}",
            timestamp = format(Sys.time(), "%Y-%m-%d %H:%M:%S"),
            packages = list()
          )
          
          # Download source packages
          src_dir <- "r-packages-source/src/contrib"
          pkg_files <- list.files(src_dir, pattern = "\\.tar\\.gz$", full.names = TRUE)
          message("Found source packages: ", paste(basename(pkg_files), collapse = ", "))
          
          # Build each package
          for (pkg_file in pkg_files) {
            pkg_name <- sub("_.*$", "", basename(pkg_file))
            message("\nProcessing package: ", pkg_name)
            
            status_entry <- list(
              package = pkg_name,
              status = "FAILED",
              error_message = NULL,
              build_output = NULL,
              build_time = format(Sys.time(), "%Y-%m-%d %H:%M:%S")
            )
            
            result <- tryCatch({
              # Install binary package
              message("Building binary package...")
              install_output <- system2("R", 
                c("CMD", "INSTALL", "--build", pkg_file, "--no-multiarch"),
                stdout = TRUE, stderr = TRUE)
              message("Build output:")
              print(install_output)
              
              # Find and move the built binary package
              if (Sys.info()["sysname"] == "Windows") {
                bin_pattern <- paste0("^", pkg_name, ".*\\.zip$")
              } else {
                bin_pattern <- paste0("^", pkg_name, ".*\\.tgz$")
              }
              
              bin_files <- list.files(pattern = bin_pattern)
              message("Found binary files: ", paste(bin_files, collapse = ", "))
              
              if (length(bin_files) > 0) {
                message("Moving ", bin_files[1], " to ", pkg_dir)
                file.copy(bin_files[1], pkg_dir, overwrite = TRUE)
                file.remove(bin_files[1])
                status_entry$status <- "SUCCESS"
                message("Binary package copied to repository")
              } else {
                status_entry$error_message <- "No binary package found after build"
                message("WARNING: No binary package found after build!")
              }
              
              status_entry$build_output <- paste(install_output, collapse = "\n")
              NULL
            }, error = function(e) {
              message("Error processing package: ", basename(pkg_file))
              message("Error message: ", e$message)
              status_entry$error_message <- conditionMessage(e)
              if (exists("install_output")) {
                status_entry$build_output <- paste(install_output, collapse = "\n")
              }
              e
            })
            
            build_status$packages[[pkg_name]] <- status_entry
          }
          
          message("\nCreating PACKAGES files...")
          tools::write_PACKAGES(pkg_dir, type = "${{ matrix.platform }}")
          message("PACKAGES files created")
          
          message("\nFinal repository contents:")
          print(list.files(pkg_dir, recursive = TRUE))
          
          # Save build status
          status_file <- file.path(repo_dir, sprintf("build_status_%s.json", "${{ matrix.platform }}"))
          jsonlite::write_json(build_status, status_file, pretty = TRUE, auto_unbox = TRUE)
          
          # Print summary
          message("\nBuild Summary:")
          successful <- sum(sapply(build_status$packages, function(x) x$status == "SUCCESS"))
          failed <- sum(sapply(build_status$packages, function(x) x$status == "FAILED"))
          message("Successful builds: ", successful)
          message("Failed builds: ", failed)
          message("\nDetailed status:")
          print(jsonlite::toJSON(build_status, pretty = TRUE, auto_unbox = TRUE))

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: r-packages-${{ matrix.os }}
          path: r-packages

  finalize:
    needs: [build-source, build-binaries]
    runs-on: ubuntu-latest
    permissions:
      contents: write
    steps:
      - uses: actions/checkout@v4
      
      - uses: r-lib/actions/setup-r@v2
        with:
          r-version: 'release'
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          
      - name: Merge artifacts
        run: |
          mkdir -p r-packages
          
          # First copy source packages
          if [ -d "artifacts/r-packages-source" ]; then
            cp -rf artifacts/r-packages-source/* r-packages/
          fi
          
          # Then copy binary packages, which should only contain their respective directories
          for artifact in artifacts/r-packages-*; do
            if [ "$artifact" != "artifacts/r-packages-source" ]; then
              cp -rf $artifact/* r-packages/
            fi
          done
          
          # Clean up unnecessary directories
          cd r-packages
          for dir in */; do
            if [[ "$dir" != "src/" && "$dir" != "bin/" ]]; then
              rm -rf "$dir"
            fi
          done
          
          echo "Repository contents after cleanup:"
          ls -R
        shell: /usr/bin/bash -e {0}

      - name: Modify PACKAGES for tracking
        run: |
          Rscript -e '
          tryCatch({
            # Helper function to find existing R version directories
            find_r_version_dirs <- function(base_dir, platform) {
              if (!dir.exists(base_dir)) return(character(0))
              dirs <- list.dirs(base_dir, recursive = FALSE)
              # Return version directories that contain PACKAGES files
              dirs[file.exists(file.path(dirs, "PACKAGES"))]
            }

            modify_packages <- function(pkg_dir, platform="source", r_version=getRversion()) {
              result <- list(
                platform = platform,
                path = pkg_dir,
                status = "SKIPPED",
                message = NULL,
                modified = 0
              )
              
              # Check directory exists
              if (!dir.exists(dirname(pkg_dir))) {
                result$message <- paste("Parent directory not found:", dirname(pkg_dir))
                return(result)
              }
              
              packages_file <- file.path(pkg_dir, "PACKAGES")
              if (!file.exists(packages_file)) {
                result$message <- paste("PACKAGES file not found in:", pkg_dir)
                return(result)
              }
              
              tryCatch({
                content <- readLines(packages_file)
                if (length(content) == 0) {
                  result$message <- "PACKAGES file is empty"
                  return(result)
                }
                
                pkg_info <- read.dcf(textConnection(paste(content, collapse="\n")))
                if (is.null(pkg_info) || nrow(pkg_info) == 0) {
                  result$message <- "No package entries found in PACKAGES file"
                  return(result)
                }
                
                # Check for required columns
                required_cols <- c("Package", "Version", "File")
                missing_cols <- required_cols[!required_cols %in% colnames(pkg_info)]
                if (length(missing_cols) > 0) {
                  result$message <- paste("Missing required columns:", paste(missing_cols, collapse=", "))
                  return(result)
                }
                
                message("Processing ", nrow(pkg_info), " packages in ", pkg_dir)
                modified_count <- 0
                
                for (i in seq_len(nrow(pkg_info))) {
                  if (!is.na(pkg_info[i, "Package"]) && !is.na(pkg_info[i, "Version"]) && !is.na(pkg_info[i, "File"])) {
                    package <- pkg_info[i, "Package"]
                    version <- pkg_info[i, "Version"]
                    tracking_url <- sprintf(
                      "https://techtonique-r-packages-079db1913d27.herokuapp.com/download/%s?version=%s&platform=%s",
                      package, version, platform
                    )
                    
                    # Add build options based on platform
                    build_opts <- "--no-build-vignettes --no-manual"
                    if (platform == "windows") {
                      build_opts <- paste(build_opts, "--no-multiarch")
                    }
                    
                    # Update the build command in the File field
                    content <- gsub(
                      paste0("^(File: )", pkg_info[i, "File"]),
                      paste0("\\1", tracking_url, " ", build_opts),
                      content
                    )
                    
                    modified_count <- modified_count + 1
                    message("Updated URL for ", package, " ", version)
                  } else {
                    message("Skipping incomplete entry at row ", i)
                  }
                }
                
                if (modified_count > 0) {
                  writeLines(content, packages_file)
                  result$status <- "SUCCESS"
                  result$modified <- modified_count
                  result$message <- paste("Modified", modified_count, "package entries")
                } else {
                  result$message <- "No valid package entries to modify"
                }
                
              }, error = function(e) {
                result$status <- "ERROR"
                result$message <- conditionMessage(e)
              })
              
              return(result)
            }
            
            # Find actual R version directories
            message("\nScanning repository structure:")
            src_dir <- "r-packages/src/contrib"
            win_base <- "r-packages/bin/windows/contrib"
            mac_base <- "r-packages/bin/macosx/contrib"
            
            message("Repository contents:")
            if (dir.exists("r-packages")) {
              system("ls -R r-packages")
            } else {
              message("r-packages directory not found")
            }
            
            # Process source packages
            source_result <- modify_packages(src_dir, "source")
            
            # Find and process binary packages
            win_dirs <- find_r_version_dirs(win_base, "windows")
            mac_dirs <- find_r_version_dirs(mac_base, "macos")
            
            results <- list(source = source_result)
            
            # Process Windows versions
            if (length(win_dirs) > 0) {
              for (dir in win_dirs) {
                ver <- basename(dir)
                results[[paste0("windows_", ver)]] <- modify_packages(dir, "windows", ver)
              }
            }
            
            # Process macOS versions
            if (length(mac_dirs) > 0) {
              for (dir in mac_dirs) {
                ver <- basename(dir)
                results[[paste0("macos_", ver)]] <- modify_packages(dir, "macos", ver)
              }
            }
            
            message("\nModification results:")
            for (platform in names(results)) {
              r <- results[[platform]]
              message(sprintf(
                "%s (%s): %s - %s",
                platform,
                r$path,
                r$status,
                if (!is.null(r$message)) r$message else "No message"
              ))
            }
            
            # Consider it a success if source packages exist and were processed
            if (!dir.exists(src_dir)) {
              stop("Source package directory not found")
            }
            if (source_result$status == "SKIPPED" && grepl("not found", source_result$message)) {
              stop("No PACKAGES file found in source directory")
            }
            if (source_result$status == "ERROR") {
              stop(paste("Error processing source packages:", source_result$message))
            }
            
          }, error = function(e) {
            message("Error occurred: ", conditionMessage(e))
            quit(status = 1)
          })'
        shell: bash

      - name: Commit and push changes
        run: |
          git config --global user.name 'GitHub Actions Bot'
          git config --global user.email 'actions@github.com'
          git add r-packages/
          git commit -m "Update R packages repository" || echo "No changes to commit"
          git push

      - name: Verify Windows build environment
        if: runner.os == 'Windows'
        shell: Rscript {0}
        run: |
          message("R version:")
          print(R.version)
          
          message("\nR home directory:")
          print(R.home())
          
          message("\nSystem PATH:")
          print(Sys.getenv("PATH"))
          
          message("\nChecking for Rtools:")
          print(pkgbuild::find_rtools())
