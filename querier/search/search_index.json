{"config":{"lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"querier | Star Welcome to querier 's website. Presentation Data Frames are widely used and useful structures for data wrangling. The querier exposes a query language for Python pandas Data Frames, inspired from SQL's relational databases querying logic. There are currently 9 main types of operations available in the querier , with no plan to extend that list much further (to maintain a relatively simple mental model). These verbs will look familiar to dplyr users, but the implementation ( numpy , pandas and SQLite3 is used) and functions' signatures are different: concat : concatenates 2 Data Frames , either horizontally or vertically delete : deletes rows from a Data Frame based on given criteria drop : drops columns from a Data Frame filtr : filters rows of the Data Frame based on given criteria join : joins 2 Data Frames based on given criteria (available for completeness of the interface, this operation is already straightforward in pandas) select : selects columns from the Data Frame summarize : obtains summaries of data based on grouping columns update : updates a column , using an operation given by the user request : for operations more complex than the previous 8 ones, makes it possible to use a SQL query on the Data Frame The querier \u2019s source code is available on GitHub . You can read posts about the querier in this blog Installing From Pypi: pip install querier From Github, for the development version: pip install git+https://github.com/Techtonique/querier.git","title":"querier | <a class=\"github-button\" href=\"https://github.com/Techtonique/querier/stargazers\" data-color-scheme=\"no-preference: light; light: light; dark: dark;\" data-size=\"large\" aria-label=\"Star the querier/the querier on GitHub\">Star</a>"},{"location":"#querier-star","text":"Welcome to querier 's website.","title":"querier | Star"},{"location":"#presentation","text":"Data Frames are widely used and useful structures for data wrangling. The querier exposes a query language for Python pandas Data Frames, inspired from SQL's relational databases querying logic. There are currently 9 main types of operations available in the querier , with no plan to extend that list much further (to maintain a relatively simple mental model). These verbs will look familiar to dplyr users, but the implementation ( numpy , pandas and SQLite3 is used) and functions' signatures are different: concat : concatenates 2 Data Frames , either horizontally or vertically delete : deletes rows from a Data Frame based on given criteria drop : drops columns from a Data Frame filtr : filters rows of the Data Frame based on given criteria join : joins 2 Data Frames based on given criteria (available for completeness of the interface, this operation is already straightforward in pandas) select : selects columns from the Data Frame summarize : obtains summaries of data based on grouping columns update : updates a column , using an operation given by the user request : for operations more complex than the previous 8 ones, makes it possible to use a SQL query on the Data Frame The querier \u2019s source code is available on GitHub . You can read posts about the querier in this blog","title":"Presentation"},{"location":"#installing","text":"From Pypi: pip install querier From Github, for the development version: pip install git+https://github.com/Techtonique/querier.git","title":"Installing"},{"location":"CONTRIBUTING/","text":"querier Code of Conduct 1. Purpose A primary goal of this project is to be inclusive to the largest number of contributors, and most importantly with the most varied and diverse backgrounds possible . As such, we are committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, ability, ethnicity, socioeconomic status, and religion, or lack of religion thereof. This code of conduct outlines our expectations for all those who participate to the project, as well as the consequences for unacceptable behavior. We invite all those who participate in, to help us create safe and positive experiences for everyone. 2. Open [Source/Culture/Tech] Citizenship A supplemental goal of this Code of Conduct is to encourage participants to recognize and strengthen the relationships between our actions and their effects on other participants. Communities mirror the societies in which they exist, and positive action is essential to counteract the many forms of inequality and abuses of power that exist in society. 3. Expected Behavior The following behaviors are expected and requested of all contributors: Attempt collaboration before conflict . Participate in an authentic and active way. In doing so, you contribute to the health and longevity of this project. Exercise consideration and respect in your speech and actions. Refrain from demeaning, discriminatory, or harassing behavior and speech. Be mindful of your surroundings and of your fellow participants. 4. Unacceptable Behavior The following behaviors are considered harassment and are unacceptable: Violence, threats of violence or violent language directed against another person. Sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory jokes and language. Posting or displaying sexually explicit or violent material. Posting or threatening to post other people's personally identifying information (\"doxing\"). Personal insults, particularly those related to gender, sexual orientation, race, religion, or disability. Inappropriate photography or recording. Unwelcome sexual attention. This includes, sexualized comments or jokes. Deliberate intimidation, stalking or following (online or in person). Advocating for, or encouraging, any of the above behavior. 5. Consequences of Unacceptable Behavior Unacceptable behavior from any contributor will not be tolerated. Anyone asked to stop unacceptable behavior is expected to comply immediately. If a contributor engages in unacceptable behavior, appropriate action will be taken, up to and including a temporary ban or permanent expulsion without warning. 6. Scope We expect all contributors to abide by this Code of Conduct in all venues, online and in-person. 7. Contact info thierry.moudiki AT gmail.com 8. License and attribution Portions of text derived from the Citizen Code of Conduct .","title":"Contributing"},{"location":"CONTRIBUTING/#querier-code-of-conduct","text":"","title":"querier Code of Conduct"},{"location":"CONTRIBUTING/#1-purpose","text":"A primary goal of this project is to be inclusive to the largest number of contributors, and most importantly with the most varied and diverse backgrounds possible . As such, we are committed to providing a friendly, safe and welcoming environment for all, regardless of gender, sexual orientation, ability, ethnicity, socioeconomic status, and religion, or lack of religion thereof. This code of conduct outlines our expectations for all those who participate to the project, as well as the consequences for unacceptable behavior. We invite all those who participate in, to help us create safe and positive experiences for everyone.","title":"1. Purpose"},{"location":"CONTRIBUTING/#2-open-sourceculturetech-citizenship","text":"A supplemental goal of this Code of Conduct is to encourage participants to recognize and strengthen the relationships between our actions and their effects on other participants. Communities mirror the societies in which they exist, and positive action is essential to counteract the many forms of inequality and abuses of power that exist in society.","title":"2. Open [Source/Culture/Tech] Citizenship"},{"location":"CONTRIBUTING/#3-expected-behavior","text":"The following behaviors are expected and requested of all contributors: Attempt collaboration before conflict . Participate in an authentic and active way. In doing so, you contribute to the health and longevity of this project. Exercise consideration and respect in your speech and actions. Refrain from demeaning, discriminatory, or harassing behavior and speech. Be mindful of your surroundings and of your fellow participants.","title":"3. Expected Behavior"},{"location":"CONTRIBUTING/#4-unacceptable-behavior","text":"The following behaviors are considered harassment and are unacceptable: Violence, threats of violence or violent language directed against another person. Sexist, racist, homophobic, transphobic, ableist or otherwise discriminatory jokes and language. Posting or displaying sexually explicit or violent material. Posting or threatening to post other people's personally identifying information (\"doxing\"). Personal insults, particularly those related to gender, sexual orientation, race, religion, or disability. Inappropriate photography or recording. Unwelcome sexual attention. This includes, sexualized comments or jokes. Deliberate intimidation, stalking or following (online or in person). Advocating for, or encouraging, any of the above behavior.","title":"4. Unacceptable Behavior"},{"location":"CONTRIBUTING/#5-consequences-of-unacceptable-behavior","text":"Unacceptable behavior from any contributor will not be tolerated. Anyone asked to stop unacceptable behavior is expected to comply immediately. If a contributor engages in unacceptable behavior, appropriate action will be taken, up to and including a temporary ban or permanent expulsion without warning.","title":"5. Consequences of Unacceptable Behavior"},{"location":"CONTRIBUTING/#6-scope","text":"We expect all contributors to abide by this Code of Conduct in all venues, online and in-person.","title":"6. Scope"},{"location":"CONTRIBUTING/#7-contact-info","text":"thierry.moudiki AT gmail.com","title":"7. Contact info"},{"location":"CONTRIBUTING/#8-license-and-attribution","text":"Portions of text derived from the Citizen Code of Conduct .","title":"8. License and attribution"},{"location":"LICENSE/","text":"The Clear BSD License Copyright (c) [2019] [Thierry Moudiki] All rights reserved. Redistribution and use in source and binary forms, with or without modification, are permitted (subject to the limitations in the disclaimer below) provided that the following conditions are met: * Redistributions of source code must retain the above copyright notice, this list of conditions and the following disclaimer. * Redistributions in binary form must reproduce the above copyright notice, this list of conditions and the following disclaimer in the documentation and/or other materials provided with the distribution. * Neither the name of the copyright holder nor the names of its contributors may be used to endorse or promote products derived from this software without specific prior written permission. NO EXPRESS OR IMPLIED LICENSES TO ANY PARTY'S PATENT RIGHTS ARE GRANTED BY THIS LICENSE. THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.","title":"License"},{"location":"documentation/querier/","text":"Querier [source] Querier querier.Querier(df=None, source=None, db=None, table=None, **kwargs) A wrapper for chaining the querier's atomic operations, which are currently: concat , delete , drop , filtr , join , select , summarize , update , request Parameters df: a data frame a data frame (optional) source: str a csv file path, sql database path, or mongo db uri db: str database name, if source is a mongo db uri table: str name of the table/collection, if source is provided and is a database Examples https://github.com/thierrymoudiki/querier/tree/master/querier/demo","title":"Wrapper"},{"location":"documentation/querier/#querier","text":"[source]","title":"Querier"},{"location":"documentation/querier/#querier_1","text":"querier.Querier(df=None, source=None, db=None, table=None, **kwargs) A wrapper for chaining the querier's atomic operations, which are currently: concat , delete , drop , filtr , join , select , summarize , update , request","title":"Querier"},{"location":"documentation/querier/#parameters","text":"df: a data frame a data frame (optional) source: str a csv file path, sql database path, or mongo db uri db: str database name, if source is a mongo db uri table: str name of the table/collection, if source is provided and is a database","title":"Parameters"},{"location":"documentation/querier/#examples","text":"https://github.com/thierrymoudiki/querier/tree/master/querier/demo","title":"Examples"},{"location":"documentation/queries/","text":"Verbs In alphabetical order [source] concat querier.concat(df1, df2, axis=\"h\", **kwargs) Concatenate data frames. Parameters df1: a data frame a data frame df2: a data frame a data frame axis: str specify the type of concatenation: \"h\"=horizontal, \"v\"=vertical Examples https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source] delete querier.delete(df, req=None) Delete rows from a data frame. Parameters df: a data frame a data frame req: str criteria for filtering the rows to be deleted Examples https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source] drop querier.drop(df, req=None) Drop columns. Parameters req: str comma-separated list of columns to be dropped Examples https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source] filtr querier.filtr(df, req=None, limit=None, random=False, seed=123) Filter rows, based on given criteria. Parameters req: str criteria for filtering the rows limit: int number of records to be retrieved random: bool True if we want a random set of records seed: int reproducibility seed for situations where random == True Examples https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source] join querier.join(df1, df2, on=None, type_join=\"inner\", **kwargs) Join data frames. Parameters df1: a data frame a data frame df2: a data frame a data frame on: str joining column/criterion type_join: str type of join. Options are: \"left\", \"right\", \"outer\", \"inner\". Default is \"inner\" join. Examples https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source] request querier.request(df, req=None, **kwargs) SQL request on a data frame. Parameters df: a data frame a data frame req: str specifying the SQL request Examples https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source] select querier.select(df, req=\"*\", order_by=None, asc=True, limit=None, random=False, seed=123) Select columns. Parameters df: a data frame a data frame req: str comma-separated columns names order_by: str sort the results by using these columns (optional) asc: bool if order_by is provided, True means: ascending ordering limit: int number of records to be retrieved random: bool True if we want a random set of records seed: int reproducibility seed for situations where random == True Examples https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source] setwhere querier.setwhere(df, col, val, replace, copy=False) Set value. Parameters df: a data frame a data frame col: str column to be filtered on val: object value to be replaced in column col replace: object replacement value copy: bool If True, a new data frame is created else input data frame is modified (default False) Examples https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source] summarize querier.summarize(df, req=None, group_by=None, having=None, **kwargs) Data summaries on rows. Parameters df: a data frame a data frame req: str specifying the aggregating operations on columns group_by: str comma-separated list of columns to be aggregated having: str filtering criterion on groups Examples https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source] update querier.update(df, req=None) Update the data frame. Parameters df: a data frame a data frame req: str specifying the transformation, e.g new_size = 3*size Examples https://github.com/thierrymoudiki/querier/tree/master/querier/demo","title":"Queries"},{"location":"documentation/queries/#verbs","text":"In alphabetical order [source]","title":"Verbs"},{"location":"documentation/queries/#concat","text":"querier.concat(df1, df2, axis=\"h\", **kwargs) Concatenate data frames.","title":"concat"},{"location":"documentation/queries/#parameters","text":"df1: a data frame a data frame df2: a data frame a data frame axis: str specify the type of concatenation: \"h\"=horizontal, \"v\"=vertical","title":"Parameters"},{"location":"documentation/queries/#examples","text":"https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source]","title":"Examples"},{"location":"documentation/queries/#delete","text":"querier.delete(df, req=None) Delete rows from a data frame.","title":"delete"},{"location":"documentation/queries/#parameters_1","text":"df: a data frame a data frame req: str criteria for filtering the rows to be deleted","title":"Parameters"},{"location":"documentation/queries/#examples_1","text":"https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source]","title":"Examples"},{"location":"documentation/queries/#drop","text":"querier.drop(df, req=None) Drop columns.","title":"drop"},{"location":"documentation/queries/#parameters_2","text":"req: str comma-separated list of columns to be dropped","title":"Parameters"},{"location":"documentation/queries/#examples_2","text":"https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source]","title":"Examples"},{"location":"documentation/queries/#filtr","text":"querier.filtr(df, req=None, limit=None, random=False, seed=123) Filter rows, based on given criteria.","title":"filtr"},{"location":"documentation/queries/#parameters_3","text":"req: str criteria for filtering the rows limit: int number of records to be retrieved random: bool True if we want a random set of records seed: int reproducibility seed for situations where random == True","title":"Parameters"},{"location":"documentation/queries/#examples_3","text":"https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source]","title":"Examples"},{"location":"documentation/queries/#join","text":"querier.join(df1, df2, on=None, type_join=\"inner\", **kwargs) Join data frames.","title":"join"},{"location":"documentation/queries/#parameters_4","text":"df1: a data frame a data frame df2: a data frame a data frame on: str joining column/criterion type_join: str type of join. Options are: \"left\", \"right\", \"outer\", \"inner\". Default is \"inner\" join.","title":"Parameters"},{"location":"documentation/queries/#examples_4","text":"https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source]","title":"Examples"},{"location":"documentation/queries/#request","text":"querier.request(df, req=None, **kwargs) SQL request on a data frame.","title":"request"},{"location":"documentation/queries/#parameters_5","text":"df: a data frame a data frame req: str specifying the SQL request","title":"Parameters"},{"location":"documentation/queries/#examples_5","text":"https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source]","title":"Examples"},{"location":"documentation/queries/#select","text":"querier.select(df, req=\"*\", order_by=None, asc=True, limit=None, random=False, seed=123) Select columns.","title":"select"},{"location":"documentation/queries/#parameters_6","text":"df: a data frame a data frame req: str comma-separated columns names order_by: str sort the results by using these columns (optional) asc: bool if order_by is provided, True means: ascending ordering limit: int number of records to be retrieved random: bool True if we want a random set of records seed: int reproducibility seed for situations where random == True","title":"Parameters"},{"location":"documentation/queries/#examples_6","text":"https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source]","title":"Examples"},{"location":"documentation/queries/#setwhere","text":"querier.setwhere(df, col, val, replace, copy=False) Set value.","title":"setwhere"},{"location":"documentation/queries/#parameters_7","text":"df: a data frame a data frame col: str column to be filtered on val: object value to be replaced in column col replace: object replacement value copy: bool If True, a new data frame is created else input data frame is modified (default False)","title":"Parameters"},{"location":"documentation/queries/#examples_7","text":"https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source]","title":"Examples"},{"location":"documentation/queries/#summarize","text":"querier.summarize(df, req=None, group_by=None, having=None, **kwargs) Data summaries on rows.","title":"summarize"},{"location":"documentation/queries/#parameters_8","text":"df: a data frame a data frame req: str specifying the aggregating operations on columns group_by: str comma-separated list of columns to be aggregated having: str filtering criterion on groups","title":"Parameters"},{"location":"documentation/queries/#examples_8","text":"https://github.com/thierrymoudiki/querier/tree/master/querier/demo [source]","title":"Examples"},{"location":"documentation/queries/#update","text":"querier.update(df, req=None) Update the data frame.","title":"update"},{"location":"documentation/queries/#parameters_9","text":"df: a data frame a data frame req: str specifying the transformation, e.g new_size = 3*size","title":"Parameters"},{"location":"documentation/queries/#examples_9","text":"https://github.com/thierrymoudiki/querier/tree/master/querier/demo","title":"Examples"},{"location":"examples/examples/","text":"Example Here is an example for chaining operations in the querier . Multiple other examples can be found in these notebooks . import pandas as pd import querier as qr # Import data ----- url = ('https://raw.github.com/pandas-dev' '/pandas/master/pandas/tests/data/tips.csv') df = pd.read_csv(url) # Example 1 ----- qrobj = qr.Querier(df=df) df1 = qrobj\\ .select(req=\"tip, sex, smoker, time\")\\ .filtr(req=\"smoker == 'No'\")\\ .summarize(req=\"sum(tip), sex, time\", group_by=\"sex, time\")\\ .df print(df1) # Example 2 ----- df2 = qr.Querier(df)\\ .select(req='tip, sex, day,size')\\ .filtr(req=\"(day == 'Sun') | (day == 'Sat')\")\\ .summarize(req=\"avg(tip), sex, day\", group_by=\"sex, day\")\\ .df print(df2)","title":"Quickstart examples"},{"location":"examples/examples/#example","text":"Here is an example for chaining operations in the querier . Multiple other examples can be found in these notebooks . import pandas as pd import querier as qr # Import data ----- url = ('https://raw.github.com/pandas-dev' '/pandas/master/pandas/tests/data/tips.csv') df = pd.read_csv(url) # Example 1 ----- qrobj = qr.Querier(df=df) df1 = qrobj\\ .select(req=\"tip, sex, smoker, time\")\\ .filtr(req=\"smoker == 'No'\")\\ .summarize(req=\"sum(tip), sex, time\", group_by=\"sex, time\")\\ .df print(df1) # Example 2 ----- df2 = qr.Querier(df)\\ .select(req='tip, sex, day,size')\\ .filtr(req=\"(day == 'Sun') | (day == 'Sat')\")\\ .summarize(req=\"avg(tip), sex, day\", group_by=\"sex, day\")\\ .df print(df2)","title":"Example"}]}