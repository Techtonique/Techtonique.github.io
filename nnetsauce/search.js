window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = {"version": "0.9.5", "fields": ["qualname", "fullname", "annotation", "default_value", "signature", "bases", "doc"], "ref": "fullname", "documentStore": {"docs": {"nnetsauce": {"fullname": "nnetsauce", "modulename": "nnetsauce", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.AdaBoostClassifier": {"fullname": "nnetsauce.AdaBoostClassifier", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier", "kind": "class", "doc": "<p>AdaBoost Classification (SAMME) model class derived from class Boosting</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_estimators: int\n    number of boosting iterations\n\nlearning_rate: float\n    learning rate of the boosting procedure\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nreg_lambda: float\n    regularization parameter for weights\n\nreg_alpha: float\n    controls compromize between l1 and l2 norm of weights\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nverbose: int\n    0 for no output, 1 for a progress bar (default is 1)\n\nmethod: str\n    type of Adaboost method, 'SAMME' (discrete) or 'SAMME.R' (real)\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>alpha_: list\n    AdaBoost coefficients alpha_m\n\nbase_learners_: dict\n    a dictionary containing the base learners\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/adaboost_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/adaboost_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LogisticRegression</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># SAMME.R</span>\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">LogisticRegression</span><span class=\"p\">(</span><span class=\"n\">solver</span><span class=\"o\">=</span><span class=\"s1\">&#39;liblinear&#39;</span><span class=\"p\">,</span> <span class=\"n\">multi_class</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ovr&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">AdaBoostClassifier</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span>\n                                <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">11.22338867</span><span class=\"p\">),</span>\n                                <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                <span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.01126343</span><span class=\"p\">,</span>\n                                <span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mf\">0.72684326</span><span class=\"p\">,</span> <span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mf\">0.86429443</span><span class=\"p\">,</span>\n                                <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">0.63078613</span><span class=\"p\">,</span> <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                                <span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s2\">&quot;gmm&quot;</span><span class=\"p\">,</span>\n                                <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n                                <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s2\">&quot;SAMME.R&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.boosting.bst.Boosting, sklearn.base.ClassifierMixin"}, "nnetsauce.AdaBoostClassifier.__init__": {"fullname": "nnetsauce.AdaBoostClassifier.__init__", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">reg_lambda</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">reg_alpha</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;SAMME&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.AdaBoostClassifier.type_fit": {"fullname": "nnetsauce.AdaBoostClassifier.type_fit", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.AdaBoostClassifier.verbose": {"fullname": "nnetsauce.AdaBoostClassifier.verbose", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.AdaBoostClassifier.method": {"fullname": "nnetsauce.AdaBoostClassifier.method", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.method", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.AdaBoostClassifier.reg_lambda": {"fullname": "nnetsauce.AdaBoostClassifier.reg_lambda", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.reg_lambda", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.AdaBoostClassifier.reg_alpha": {"fullname": "nnetsauce.AdaBoostClassifier.reg_alpha", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.reg_alpha", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.AdaBoostClassifier.alpha_": {"fullname": "nnetsauce.AdaBoostClassifier.alpha_", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.alpha_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.AdaBoostClassifier.base_learners_": {"fullname": "nnetsauce.AdaBoostClassifier.base_learners_", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.base_learners_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.AdaBoostClassifier.fit": {"fullname": "nnetsauce.AdaBoostClassifier.fit", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.fit", "kind": "function", "doc": "<p>Fit Boosting model to training data (X, y).</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code> self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.AdaBoostClassifier.predict": {"fullname": "nnetsauce.AdaBoostClassifier.predict", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n      self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.AdaBoostClassifier.predict_proba": {"fullname": "nnetsauce.AdaBoostClassifier.predict_proba", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n      self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"fullname": "nnetsauce.AdaBoostClassifier.set_fit_request", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.AdaBoostClassifier.set_score_request": {"fullname": "nnetsauce.AdaBoostClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Base": {"fullname": "nnetsauce.Base", "modulename": "nnetsauce", "qualname": "Base", "kind": "class", "doc": "<p>Base model from which all the other classes inherit.</p>\n\n<p>This class contains the most important data preprocessing/feature engineering methods.</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for hidden layer nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or\n    not (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original features are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for type_clust='kmeans' or type_clust='gmm'\n    clustering (could be 0: no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot);\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax') or robust scaling ('robust')\n\ncol_sample: float\n    percentage of features randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform', clustering and dropout\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n", "bases": "sklearn.base.BaseEstimator"}, "nnetsauce.Base.__init__": {"fullname": "nnetsauce.Base.__init__", "modulename": "nnetsauce", "qualname": "Base.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.Base.n_hidden_features": {"fullname": "nnetsauce.Base.n_hidden_features", "modulename": "nnetsauce", "qualname": "Base.n_hidden_features", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.activation_name": {"fullname": "nnetsauce.Base.activation_name", "modulename": "nnetsauce", "qualname": "Base.activation_name", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.a": {"fullname": "nnetsauce.Base.a", "modulename": "nnetsauce", "qualname": "Base.a", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.nodes_sim": {"fullname": "nnetsauce.Base.nodes_sim", "modulename": "nnetsauce", "qualname": "Base.nodes_sim", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.bias": {"fullname": "nnetsauce.Base.bias", "modulename": "nnetsauce", "qualname": "Base.bias", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.seed": {"fullname": "nnetsauce.Base.seed", "modulename": "nnetsauce", "qualname": "Base.seed", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.backend": {"fullname": "nnetsauce.Base.backend", "modulename": "nnetsauce", "qualname": "Base.backend", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.dropout": {"fullname": "nnetsauce.Base.dropout", "modulename": "nnetsauce", "qualname": "Base.dropout", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.direct_link": {"fullname": "nnetsauce.Base.direct_link", "modulename": "nnetsauce", "qualname": "Base.direct_link", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.cluster_encode": {"fullname": "nnetsauce.Base.cluster_encode", "modulename": "nnetsauce", "qualname": "Base.cluster_encode", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.type_clust": {"fullname": "nnetsauce.Base.type_clust", "modulename": "nnetsauce", "qualname": "Base.type_clust", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.type_scaling": {"fullname": "nnetsauce.Base.type_scaling", "modulename": "nnetsauce", "qualname": "Base.type_scaling", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.col_sample": {"fullname": "nnetsauce.Base.col_sample", "modulename": "nnetsauce", "qualname": "Base.col_sample", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.row_sample": {"fullname": "nnetsauce.Base.row_sample", "modulename": "nnetsauce", "qualname": "Base.row_sample", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.n_clusters": {"fullname": "nnetsauce.Base.n_clusters", "modulename": "nnetsauce", "qualname": "Base.n_clusters", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.subsampler_": {"fullname": "nnetsauce.Base.subsampler_", "modulename": "nnetsauce", "qualname": "Base.subsampler_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.index_col_": {"fullname": "nnetsauce.Base.index_col_", "modulename": "nnetsauce", "qualname": "Base.index_col_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.index_row_": {"fullname": "nnetsauce.Base.index_row_", "modulename": "nnetsauce", "qualname": "Base.index_row_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.clustering_obj_": {"fullname": "nnetsauce.Base.clustering_obj_", "modulename": "nnetsauce", "qualname": "Base.clustering_obj_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.clustering_scaler_": {"fullname": "nnetsauce.Base.clustering_scaler_", "modulename": "nnetsauce", "qualname": "Base.clustering_scaler_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.nn_scaler_": {"fullname": "nnetsauce.Base.nn_scaler_", "modulename": "nnetsauce", "qualname": "Base.nn_scaler_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.scaler_": {"fullname": "nnetsauce.Base.scaler_", "modulename": "nnetsauce", "qualname": "Base.scaler_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.encoder_": {"fullname": "nnetsauce.Base.encoder_", "modulename": "nnetsauce", "qualname": "Base.encoder_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.W_": {"fullname": "nnetsauce.Base.W_", "modulename": "nnetsauce", "qualname": "Base.W_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.X_": {"fullname": "nnetsauce.Base.X_", "modulename": "nnetsauce", "qualname": "Base.X_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.y_": {"fullname": "nnetsauce.Base.y_", "modulename": "nnetsauce", "qualname": "Base.y_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.y_mean_": {"fullname": "nnetsauce.Base.y_mean_", "modulename": "nnetsauce", "qualname": "Base.y_mean_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.beta_": {"fullname": "nnetsauce.Base.beta_", "modulename": "nnetsauce", "qualname": "Base.beta_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.activation_func": {"fullname": "nnetsauce.Base.activation_func", "modulename": "nnetsauce", "qualname": "Base.activation_func", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Base.encode_clusters": {"fullname": "nnetsauce.Base.encode_clusters", "modulename": "nnetsauce", "qualname": "Base.encode_clusters", "kind": "function", "doc": "<p>Create new covariates with kmeans or GMM clustering</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\npredict: boolean\n    is False on training set and True on test set\n\n**kwargs:\n    additional parameters to be passed to the\n    clustering method\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>Clusters' matrix, one-hot encoded: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">predict</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Base.create_layer": {"fullname": "nnetsauce.Base.create_layer", "modulename": "nnetsauce", "qualname": "Base.create_layer", "kind": "function", "doc": "<p>Create hidden layer.</p>\n\n<p>Parameters:</p>\n\n<pre><code>scaled_X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\nW: {array-like}, shape = [n_features, hidden_features]\n    if provided, constructs the hidden layer with W; otherwise computed internally\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>Hidden layer matrix: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scaled_X</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Base.cook_training_set": {"fullname": "nnetsauce.Base.cook_training_set", "modulename": "nnetsauce", "qualname": "Base.cook_training_set", "kind": "function", "doc": "<p>Create new hidden features for training set, with hidden layer, center the response.</p>\n\n<p>Parameters:</p>\n\n<pre><code>y: array-like, shape = [n_samples]\n    Target values\n\nX: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\nW: {array-like}, shape = [n_features, hidden_features]\n    if provided, constructs the hidden layer via W\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>(centered response, direct link + hidden layer matrix): {tuple}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Base.cook_test_set": {"fullname": "nnetsauce.Base.cook_test_set", "modulename": "nnetsauce", "qualname": "Base.cook_test_set", "kind": "function", "doc": "<p>Transform data from test set, with hidden layer.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\n**kwargs: additional parameters to be passed to self.encode_cluster\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>Transformed test set : {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Base.score": {"fullname": "nnetsauce.Base.score", "modulename": "nnetsauce", "qualname": "Base.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',\n                'neg_mean_squared_error', 'neg_mean_squared_log_error',\n                'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns:</p>\n\n<p>model scores: {array-like}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Base.set_score_request": {"fullname": "nnetsauce.Base.set_score_request", "modulename": "nnetsauce", "qualname": "Base.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.BaseRegressor": {"fullname": "nnetsauce.BaseRegressor", "modulename": "nnetsauce", "qualname": "BaseRegressor", "kind": "class", "doc": "<p>Random Vector Functional Link Network regression without shrinkage</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for hidden layer nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or\n    not (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original features are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for type_clust='kmeans' or type_clust='gmm'\n    clustering (could be 0: no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot);\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of features randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform', clustering and dropout\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: vector\n    regression coefficients\n\nGCV_: float\n    Generalized Cross-Validation error\n</code></pre>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.RegressorMixin"}, "nnetsauce.BaseRegressor.__init__": {"fullname": "nnetsauce.BaseRegressor.__init__", "modulename": "nnetsauce", "qualname": "BaseRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.BaseRegressor.fit": {"fullname": "nnetsauce.BaseRegressor.fit", "modulename": "nnetsauce", "qualname": "BaseRegressor.fit", "kind": "function", "doc": "<p>Fit BaseRegressor to training data (X, y)</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\n**kwargs: additional parameters to be passed to self.cook_training_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.BaseRegressor.predict": {"fullname": "nnetsauce.BaseRegressor.predict", "modulename": "nnetsauce", "qualname": "BaseRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\n**kwargs: additional parameters to be passed to self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.BaseRegressor.set_score_request": {"fullname": "nnetsauce.BaseRegressor.set_score_request", "modulename": "nnetsauce", "qualname": "BaseRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.BayesianRVFLRegressor": {"fullname": "nnetsauce.BayesianRVFLRegressor", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor", "kind": "class", "doc": "<p>Bayesian Random Vector Functional Link Network regression with one prior</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton', 'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original features are included (True) in model''s fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0: no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\ns: float\n    std. dev. of regression parameters in Bayesian Ridge Regression\n\nsigma: float\n    std. dev. of residuals in Bayesian Ridge Regression\n\nreturn_std: boolean\n    if True, uncertainty around predictions is evaluated\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: array-like\n    regression''s coefficients\n\nSigma_: array-like\n    covariance of the distribution of fitted parameters\n\nGCV_: float\n    Generalized cross-validation error\n\ny_mean_: float\n    average response\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">TBD</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.RegressorMixin"}, "nnetsauce.BayesianRVFLRegressor.__init__": {"fullname": "nnetsauce.BayesianRVFLRegressor.__init__", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.BayesianRVFLRegressor.s": {"fullname": "nnetsauce.BayesianRVFLRegressor.s", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.s", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.BayesianRVFLRegressor.sigma": {"fullname": "nnetsauce.BayesianRVFLRegressor.sigma", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.sigma", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.BayesianRVFLRegressor.beta_": {"fullname": "nnetsauce.BayesianRVFLRegressor.beta_", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.beta_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.BayesianRVFLRegressor.Sigma_": {"fullname": "nnetsauce.BayesianRVFLRegressor.Sigma_", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.Sigma_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.BayesianRVFLRegressor.GCV_": {"fullname": "nnetsauce.BayesianRVFLRegressor.GCV_", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.GCV_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.BayesianRVFLRegressor.return_std": {"fullname": "nnetsauce.BayesianRVFLRegressor.return_std", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.return_std", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.BayesianRVFLRegressor.fit": {"fullname": "nnetsauce.BayesianRVFLRegressor.fit", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.fit", "kind": "function", "doc": "<p>Fit BayesianRVFLRegressor to training data (X, y).</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.BayesianRVFLRegressor.predict": {"fullname": "nnetsauce.BayesianRVFLRegressor.predict", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nreturn_std: {boolean}, standard dev. is returned or not\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"fullname": "nnetsauce.BayesianRVFLRegressor.set_predict_request", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"fullname": "nnetsauce.BayesianRVFLRegressor.set_score_request", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.BayesianRVFL2Regressor": {"fullname": "nnetsauce.BayesianRVFL2Regressor", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor", "kind": "class", "doc": "<p>Bayesian Random Vector Functional Link Network regression with two priors</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton', 'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original features are included (True) in model''s fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0: no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\ns1: float\n    std. dev. of init. regression parameters in Bayesian Ridge Regression\n\ns2: float\n    std. dev. of augmented regression parameters in Bayesian Ridge Regression\n\nsigma: float\n    std. dev. of residuals in Bayesian Ridge Regression\n\nreturn_std: boolean\n    if True, uncertainty around predictions is evaluated\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: array-like\n    regression''s coefficients\n\nSigma_: array-like\n    covariance of the distribution of fitted parameters\n\nGCV_: float\n    Generalized cross-validation error\n\ny_mean_: float\n    average response\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">TBD</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.RegressorMixin"}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"fullname": "nnetsauce.BayesianRVFL2Regressor.__init__", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">s1</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">s2</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.BayesianRVFL2Regressor.s1": {"fullname": "nnetsauce.BayesianRVFL2Regressor.s1", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.s1", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.BayesianRVFL2Regressor.s2": {"fullname": "nnetsauce.BayesianRVFL2Regressor.s2", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.s2", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.BayesianRVFL2Regressor.sigma": {"fullname": "nnetsauce.BayesianRVFL2Regressor.sigma", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.sigma", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.BayesianRVFL2Regressor.beta_": {"fullname": "nnetsauce.BayesianRVFL2Regressor.beta_", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.beta_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.BayesianRVFL2Regressor.Sigma_": {"fullname": "nnetsauce.BayesianRVFL2Regressor.Sigma_", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.Sigma_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.BayesianRVFL2Regressor.GCV_": {"fullname": "nnetsauce.BayesianRVFL2Regressor.GCV_", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.GCV_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.BayesianRVFL2Regressor.return_std": {"fullname": "nnetsauce.BayesianRVFL2Regressor.return_std", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.return_std", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.BayesianRVFL2Regressor.fit": {"fullname": "nnetsauce.BayesianRVFL2Regressor.fit", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.fit", "kind": "function", "doc": "<p>Fit BayesianRVFL2Regressor to training data (X, y)</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.BayesianRVFL2Regressor.predict": {"fullname": "nnetsauce.BayesianRVFL2Regressor.predict", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nreturn_std: {boolean}, standard dev. is returned or not\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"fullname": "nnetsauce.BayesianRVFL2Regressor.set_predict_request", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"fullname": "nnetsauce.BayesianRVFL2Regressor.set_score_request", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.CustomClassifier": {"fullname": "nnetsauce.CustomClassifier", "modulename": "nnetsauce", "qualname": "CustomClassifier", "kind": "class", "doc": "<p>Custom Classification model</p>\n\n<p>Attributes:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model''s\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Examples:</p>\n\n<p>Note: it's better to use the <code>DeepClassifier</code> or <code>LazyDeepClassifier</code> classes directly</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.ensemble</span> <span class=\"kn\">import</span> <span class=\"n\">RandomForestClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_digits</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">digits</span> <span class=\"o\">=</span> <span class=\"n\">load_digits</span><span class=\"p\">()</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># layer 1 (base layer) ----</span>\n<span class=\"n\">layer1_regr</span> <span class=\"o\">=</span> <span class=\"n\">RandomForestClassifier</span><span class=\"p\">(</span><span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n\n<span class=\"n\">layer1_regr</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Accuracy in layer 1</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">layer1_regr</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># layer 2 using layer 1 ----</span>\n<span class=\"n\">layer2_regr</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">CustomClassifier</span><span class=\"p\">(</span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">layer1_regr</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                        <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                        <span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;uniform&#39;</span><span class=\"p\">,</span> <span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">layer2_regr</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Accuracy in layer 2</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">layer2_regr</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># layer 3 using layer 2 ----</span>\n<span class=\"n\">layer3_regr</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">CustomClassifier</span><span class=\"p\">(</span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">layer2_regr</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n                        <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">,</span>\n                        <span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;uniform&#39;</span><span class=\"p\">,</span> <span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">layer3_regr</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Accuracy in layer 3</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">layer3_regr</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.ClassifierMixin"}, "nnetsauce.CustomClassifier.__init__": {"fullname": "nnetsauce.CustomClassifier.__init__", "modulename": "nnetsauce", "qualname": "CustomClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.CustomClassifier.type_fit": {"fullname": "nnetsauce.CustomClassifier.type_fit", "modulename": "nnetsauce", "qualname": "CustomClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.CustomClassifier.fit": {"fullname": "nnetsauce.CustomClassifier.fit", "modulename": "nnetsauce", "qualname": "CustomClassifier.fit", "kind": "function", "doc": "<p>Fit custom model to training data (X, y).</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n            self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.CustomClassifier.predict": {"fullname": "nnetsauce.CustomClassifier.predict", "modulename": "nnetsauce", "qualname": "CustomClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.CustomClassifier.predict_proba": {"fullname": "nnetsauce.CustomClassifier.predict_proba", "modulename": "nnetsauce", "qualname": "CustomClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.CustomClassifier.set_fit_request": {"fullname": "nnetsauce.CustomClassifier.set_fit_request", "modulename": "nnetsauce", "qualname": "CustomClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.CustomClassifier.set_score_request": {"fullname": "nnetsauce.CustomClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "CustomClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.CustomRegressor": {"fullname": "nnetsauce.CustomRegressor", "modulename": "nnetsauce", "qualname": "CustomRegressor", "kind": "class", "doc": "<p>Custom Regression model</p>\n\n<p>This class is used to 'augment' any regression model with transformed features.</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ntype_pi: str.\n    type of prediction interval; currently \"kde\" (default) or \"bootstrap\".\n    Used only in `self.predict`, for `self.replications` &gt; 0 and `self.kernel`\n    in ('gaussian', 'tophat'). Default is `None`.\n\nreplications: int.\n    number of replications (if needed) for predictive simulation.\n    Used only in `self.predict`, for `self.kernel` in ('gaussian',\n    'tophat') and `self.type_pi = 'kde'`. Default is `None`.\n\nkernel: str.\n    the kernel to use for kernel density estimation (used for predictive\n    simulation in `self.predict`, with `method='splitconformal'` and\n    `type_pi = 'kde'`). Currently, either 'gaussian' or 'tophat'.\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\ntype_fit: str\n    'regression'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See <a href=\"https://thierrymoudiki.github.io/blog/2024/03/18/python/conformal-and-bayesian-regression\">https://thierrymoudiki.github.io/blog/2024/03/18/python/conformal-and-bayesian-regression</a></p>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.RegressorMixin"}, "nnetsauce.CustomRegressor.__init__": {"fullname": "nnetsauce.CustomRegressor.__init__", "modulename": "nnetsauce", "qualname": "CustomRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">type_pi</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.CustomRegressor.type_fit": {"fullname": "nnetsauce.CustomRegressor.type_fit", "modulename": "nnetsauce", "qualname": "CustomRegressor.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.CustomRegressor.type_pi": {"fullname": "nnetsauce.CustomRegressor.type_pi", "modulename": "nnetsauce", "qualname": "CustomRegressor.type_pi", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.CustomRegressor.replications": {"fullname": "nnetsauce.CustomRegressor.replications", "modulename": "nnetsauce", "qualname": "CustomRegressor.replications", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.CustomRegressor.kernel": {"fullname": "nnetsauce.CustomRegressor.kernel", "modulename": "nnetsauce", "qualname": "CustomRegressor.kernel", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.CustomRegressor.fit": {"fullname": "nnetsauce.CustomRegressor.fit", "modulename": "nnetsauce", "qualname": "CustomRegressor.fit", "kind": "function", "doc": "<p>Fit custom model to training data (X, y).</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n    self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.CustomRegressor.predict": {"fullname": "nnetsauce.CustomRegressor.predict", "modulename": "nnetsauce", "qualname": "CustomRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nlevel: int\n    Level of confidence (default = 95)\n\nmethod: str\n    `None`, or 'splitconformal', 'localconformal'\n    prediction (if you specify `return_pi = True`)\n\n**kwargs: additional parameters\n        `return_pi = True` for conformal prediction,\n        with `method` in ('splitconformal', 'localconformal')\n        or `return_std = True` for `self.obj` in\n        (`sklearn.linear_model.BayesianRidge`,\n        `sklearn.linear_model.ARDRegressor`,\n        `sklearn.gaussian_process.GaussianProcessRegressor`)`\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions:\n    an array if uncertainty quantification is not requested,\n      or a tuple if with prediction intervals and simulations\n      if `return_std = True` (mean, standard deviation,\n      lower and upper prediction interval) or `return_pi = True`\n      ()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.CustomRegressor.set_fit_request": {"fullname": "nnetsauce.CustomRegressor.set_fit_request", "modulename": "nnetsauce", "qualname": "CustomRegressor.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.CustomRegressor.set_predict_request": {"fullname": "nnetsauce.CustomRegressor.set_predict_request", "modulename": "nnetsauce", "qualname": "CustomRegressor.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.CustomRegressor.set_score_request": {"fullname": "nnetsauce.CustomRegressor.set_score_request", "modulename": "nnetsauce", "qualname": "CustomRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.DeepClassifier": {"fullname": "nnetsauce.DeepClassifier", "modulename": "nnetsauce", "qualname": "DeepClassifier", "kind": "class", "doc": "<p>Deep Classifier</p>\n\n<p>Parameters:</p>\n\n<pre><code>verbose : int, optional (default=0)\n    Monitor progress when fitting.\n</code></pre>\n\n<p>Examples:\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LogisticRegressionCV</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n    <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n    <span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n    <span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">LogisticRegressionCV</span><span class=\"p\">()</span>\n    <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">DeepClassifier</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n    <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">),</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n    </code></pre>\n    </div></p>\n", "bases": "nnetsauce.custom.customClassifier.CustomClassifier, sklearn.base.ClassifierMixin"}, "nnetsauce.DeepClassifier.__init__": {"fullname": "nnetsauce.DeepClassifier.__init__", "modulename": "nnetsauce", "qualname": "DeepClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.DeepClassifier.stacked_obj": {"fullname": "nnetsauce.DeepClassifier.stacked_obj", "modulename": "nnetsauce", "qualname": "DeepClassifier.stacked_obj", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.DeepClassifier.verbose": {"fullname": "nnetsauce.DeepClassifier.verbose", "modulename": "nnetsauce", "qualname": "DeepClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.DeepClassifier.n_layers": {"fullname": "nnetsauce.DeepClassifier.n_layers", "modulename": "nnetsauce", "qualname": "DeepClassifier.n_layers", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.DeepClassifier.fit": {"fullname": "nnetsauce.DeepClassifier.fit", "modulename": "nnetsauce", "qualname": "DeepClassifier.fit", "kind": "function", "doc": "<p>Fit Classification algorithms to X and y.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A fitted object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.DeepClassifier.predict": {"fullname": "nnetsauce.DeepClassifier.predict", "modulename": "nnetsauce", "qualname": "DeepClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.DeepClassifier.predict_proba": {"fullname": "nnetsauce.DeepClassifier.predict_proba", "modulename": "nnetsauce", "qualname": "DeepClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.DeepClassifier.score": {"fullname": "nnetsauce.DeepClassifier.score", "modulename": "nnetsauce", "qualname": "DeepClassifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',\n                'neg_mean_squared_error', 'neg_mean_squared_log_error',\n                'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns:</p>\n\n<p>model scores: {array-like}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.DeepClassifier.set_score_request": {"fullname": "nnetsauce.DeepClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "DeepClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.DeepRegressor": {"fullname": "nnetsauce.DeepRegressor", "modulename": "nnetsauce", "qualname": "DeepRegressor", "kind": "class", "doc": "<p>Deep Regressor</p>\n\n<p>Parameters:</p>\n\n<pre><code>verbose : int, optional (default=0)\n    Monitor progress when fitting.\n</code></pre>\n\n<p>Examples:\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_diabetes</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">RidgeCV</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_diabetes</span><span class=\"p\">()</span>\n    <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n    <span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n    <span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">RidgeCV</span><span class=\"p\">()</span>\n    <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">DeepRegressor</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n    <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">),</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n    </code></pre>\n    </div></p>\n", "bases": "nnetsauce.custom.customRegressor.CustomRegressor, sklearn.base.RegressorMixin"}, "nnetsauce.DeepRegressor.__init__": {"fullname": "nnetsauce.DeepRegressor.__init__", "modulename": "nnetsauce", "qualname": "DeepRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.DeepRegressor.stacked_obj": {"fullname": "nnetsauce.DeepRegressor.stacked_obj", "modulename": "nnetsauce", "qualname": "DeepRegressor.stacked_obj", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.DeepRegressor.verbose": {"fullname": "nnetsauce.DeepRegressor.verbose", "modulename": "nnetsauce", "qualname": "DeepRegressor.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.DeepRegressor.n_layers": {"fullname": "nnetsauce.DeepRegressor.n_layers", "modulename": "nnetsauce", "qualname": "DeepRegressor.n_layers", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.DeepRegressor.fit": {"fullname": "nnetsauce.DeepRegressor.fit", "modulename": "nnetsauce", "qualname": "DeepRegressor.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X and y.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A fitted object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.DeepRegressor.predict": {"fullname": "nnetsauce.DeepRegressor.predict", "modulename": "nnetsauce", "qualname": "DeepRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nlevel: int\n    Level of confidence (default = 95)\n\nmethod: str\n    `None`, or 'splitconformal', 'localconformal'\n    prediction (if you specify `return_pi = True`)\n\n**kwargs: additional parameters\n        `return_pi = True` for conformal prediction,\n        with `method` in ('splitconformal', 'localconformal')\n        or `return_std = True` for `self.obj` in\n        (`sklearn.linear_model.BayesianRidge`,\n        `sklearn.linear_model.ARDRegressor`,\n        `sklearn.gaussian_process.GaussianProcessRegressor`)`\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions:\n    an array if uncertainty quantification is not requested,\n      or a tuple if with prediction intervals and simulations\n      if `return_std = True` (mean, standard deviation,\n      lower and upper prediction interval) or `return_pi = True`\n      ()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.DeepRegressor.score": {"fullname": "nnetsauce.DeepRegressor.score", "modulename": "nnetsauce", "qualname": "DeepRegressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',\n                'neg_mean_squared_error', 'neg_mean_squared_log_error',\n                'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns:</p>\n\n<p>model scores: {array-like}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.DeepRegressor.set_score_request": {"fullname": "nnetsauce.DeepRegressor.set_score_request", "modulename": "nnetsauce", "qualname": "DeepRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.DeepMTS": {"fullname": "nnetsauce.DeepMTS", "modulename": "nnetsauce", "qualname": "DeepMTS", "kind": "class", "doc": "<p>Univariate and multivariate time series (DeepMTS) forecasting with Quasi-Randomized networks (Work in progress /!)</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object.\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict()).\n\nn_layers: int.\n    number of layers in the neural network.\n\nn_hidden_features: int.\n    number of nodes in the hidden layer.\n\nactivation_name: str.\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'.\n\na: float.\n    hyperparameter for 'prelu' or 'elu' activation function.\n\nnodes_sim: str.\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'.\n\nbias: boolean.\n    indicates if the hidden layer contains a bias term (True) or not\n    (False).\n\ndropout: float.\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training.\n\ndirect_link: boolean.\n    indicates if the original predictors are included (True) in model's fitting or not (False).\n\nn_clusters: int.\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0: no clustering).\n\ncluster_encode: bool.\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding.\n\ntype_clust: str.\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm').\n\ntype_scaling: a tuple of 3 strings.\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax').\n\nlags: int.\n    number of lags used for each time series.\n\nreplications: int.\n    number of replications (if needed, for predictive simulation). Default is 'None'.\n\nkernel: str.\n    the kernel to use for residuals density estimation (used for predictive simulation). Currently, either 'gaussian' or 'tophat'.\n\nagg: str.\n    either \"mean\" or \"median\" for simulation of bootstrap aggregating\n\nseed: int.\n    reproducibility seed for nodes_sim=='uniform' or predictive simulation.\n\nbackend: str.\n    \"cpu\" or \"gpu\" or \"tpu\".\n\nverbose: int.\n    0: not printing; 1: printing\n\nshow_progress: bool.\n    True: progress bar when fitting each series; False: no progress bar when fitting each series\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>fit_objs_: dict\n    objects adjusted to each individual time series\n\ny_: {array-like}\n    DeepMTS responses (most recent observations first)\n\nX_: {array-like}\n    DeepMTS lags\n\nxreg_: {array-like}\n    external regressors\n\ny_means_: dict\n    a dictionary of each series mean values\n\npreds_: {array-like}\n    successive model predictions\n\npreds_std_: {array-like}\n    standard deviation around the predictions\n\nreturn_std_: boolean\n    return uncertainty or not (set in predict)\n\ndf_: data frame\n    the input data frame, in case a data.frame is provided to `fit`\n</code></pre>\n\n<p>Examples:</p>\n\n<p>Example 1:\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n <br />\n    <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\"><em></span><span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">25</span><span class=\"o\"></em></span><span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n <br />\n    <span class=\"c1\"># Adjust Bayesian Ridge</span>\n    <span class=\"n\">regr4</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">BayesianRidge</span><span class=\"p\">()</span>\n    <span class=\"n\">obj_DeepMTS</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">DeepMTS</span><span class=\"p\">(</span><span class=\"n\">regr4</span><span class=\"p\">,</span> <span class=\"n\">lags</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">())</span>\n <br />\n    <span class=\"c1\"># with credible intervals</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n <br />\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n    </code></pre>\n    </div></p>\n\n<p>Example 2:\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n <br />\n    <span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;date&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;2001-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2002-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2003-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2004-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2005-01-01&#39;</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;series1&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mf\">35.6</span><span class=\"p\">,</span> <span class=\"mf\">33.3</span><span class=\"p\">,</span> <span class=\"mf\">38.1</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;series2&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">5.5</span><span class=\"p\">,</span> <span class=\"mf\">5.6</span><span class=\"p\">,</span> <span class=\"mf\">6.3</span><span class=\"p\">,</span> <span class=\"mf\">5.1</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;series3&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mf\">100.5</span><span class=\"p\">,</span> <span class=\"mf\">100.6</span><span class=\"p\">,</span> <span class=\"mf\">100.2</span><span class=\"p\">,</span> <span class=\"mf\">100.1</span><span class=\"p\">]}</span>\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;date&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n <br />\n    <span class=\"c1\"># Adjust Bayesian Ridge</span>\n    <span class=\"n\">regr5</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">BayesianRidge</span><span class=\"p\">()</span>\n    <span class=\"n\">obj_DeepMTS</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">DeepMTS</span><span class=\"p\">(</span><span class=\"n\">regr5</span><span class=\"p\">,</span> <span class=\"n\">lags</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">())</span>\n <br />\n    <span class=\"c1\"># with credible intervals</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n <br />\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n    </code></pre>\n    </div></p>\n", "bases": "nnetsauce.mts.mts.MTS"}, "nnetsauce.DeepMTS.__init__": {"fullname": "nnetsauce.DeepMTS.__init__", "modulename": "nnetsauce", "qualname": "DeepMTS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">type_pi</span><span class=\"o\">=</span><span class=\"s1\">&#39;kde&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, "nnetsauce.DeepMTS.n_layers": {"fullname": "nnetsauce.DeepMTS.n_layers", "modulename": "nnetsauce", "qualname": "DeepMTS.n_layers", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.DeepMTS.obj": {"fullname": "nnetsauce.DeepMTS.obj", "modulename": "nnetsauce", "qualname": "DeepMTS.obj", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.DeepMTS.set_fit_request": {"fullname": "nnetsauce.DeepMTS.set_fit_request", "modulename": "nnetsauce", "qualname": "DeepMTS.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.DeepMTS.set_predict_request": {"fullname": "nnetsauce.DeepMTS.set_predict_request", "modulename": "nnetsauce", "qualname": "DeepMTS.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.DeepMTS.set_score_request": {"fullname": "nnetsauce.DeepMTS.set_score_request", "modulename": "nnetsauce", "qualname": "DeepMTS.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Downloader": {"fullname": "nnetsauce.Downloader", "modulename": "nnetsauce", "qualname": "Downloader", "kind": "class", "doc": "<p>Download datasets from data sources (R-universe for now)</p>\n"}, "nnetsauce.Downloader.pkgname": {"fullname": "nnetsauce.Downloader.pkgname", "modulename": "nnetsauce", "qualname": "Downloader.pkgname", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Downloader.dataset": {"fullname": "nnetsauce.Downloader.dataset", "modulename": "nnetsauce", "qualname": "Downloader.dataset", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Downloader.source": {"fullname": "nnetsauce.Downloader.source", "modulename": "nnetsauce", "qualname": "Downloader.source", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Downloader.url": {"fullname": "nnetsauce.Downloader.url", "modulename": "nnetsauce", "qualname": "Downloader.url", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Downloader.request": {"fullname": "nnetsauce.Downloader.request", "modulename": "nnetsauce", "qualname": "Downloader.request", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Downloader.download": {"fullname": "nnetsauce.Downloader.download", "modulename": "nnetsauce", "qualname": "Downloader.download", "kind": "function", "doc": "<p>Download datasets from data sources (R-universe for now)</p>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n\n<span class=\"n\">downloader</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">Downloader</span><span class=\"p\">()</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">downloader</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">(</span><span class=\"n\">pkgname</span><span class=\"o\">=</span><span class=\"s2\">&quot;MASS&quot;</span><span class=\"p\">,</span> <span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"s2\">&quot;Boston&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pkgname</span><span class=\"o\">=</span><span class=\"s1\">&#39;MASS&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"s1\">&#39;Boston&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">&#39;https://cran.r-universe.dev/&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.GLMClassifier": {"fullname": "nnetsauce.GLMClassifier", "modulename": "nnetsauce", "qualname": "GLMClassifier", "kind": "class", "doc": "<p>Generalized 'linear' models using quasi-randomized networks (classification)</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nlambda1: float\n    regularization parameter for GLM coefficients on original features\n\nalpha1: float\n    controls compromize between l1 and l2 norm of GLM coefficients on original features\n\nlambda2: float\n    regularization parameter for GLM coefficients on nonlinear features\n\nalpha2: float\n    controls compromize between l1 and l2 norm of GLM coefficients on nonlinear features\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\noptimizer: object\n    optimizer, from class nnetsauce.Optimizer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: vector\n    regression coefficients\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/glm_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/glm_classification.py</a></p>\n", "bases": "nnetsauce.glm.glm.GLM, sklearn.base.ClassifierMixin"}, "nnetsauce.GLMClassifier.__init__": {"fullname": "nnetsauce.GLMClassifier.__init__", "modulename": "nnetsauce", "qualname": "GLMClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">alpha1</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">alpha2</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">family</span><span class=\"o\">=</span><span class=\"s1\">&#39;expit&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span><span class=\"o\">=&lt;</span><span class=\"n\">nnetsauce</span><span class=\"o\">.</span><span class=\"n\">optimizers</span><span class=\"o\">.</span><span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">Optimizer</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span></span>)</span>"}, "nnetsauce.GLMClassifier.family": {"fullname": "nnetsauce.GLMClassifier.family", "modulename": "nnetsauce", "qualname": "GLMClassifier.family", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.GLMClassifier.logit_loss": {"fullname": "nnetsauce.GLMClassifier.logit_loss", "modulename": "nnetsauce", "qualname": "GLMClassifier.logit_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.GLMClassifier.expit_erf_loss": {"fullname": "nnetsauce.GLMClassifier.expit_erf_loss", "modulename": "nnetsauce", "qualname": "GLMClassifier.expit_erf_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.GLMClassifier.loss_func": {"fullname": "nnetsauce.GLMClassifier.loss_func", "modulename": "nnetsauce", "qualname": "GLMClassifier.loss_func", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span>,</span><span class=\"param\">\t<span class=\"n\">group_index</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">row_index</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">type_loss</span><span class=\"o\">=</span><span class=\"s1\">&#39;logit&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.GLMClassifier.fit": {"fullname": "nnetsauce.GLMClassifier.fit", "modulename": "nnetsauce", "qualname": "GLMClassifier.fit", "kind": "function", "doc": "<p>Fit GLM model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.GLMClassifier.predict": {"fullname": "nnetsauce.GLMClassifier.predict", "modulename": "nnetsauce", "qualname": "GLMClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.GLMClassifier.predict_proba": {"fullname": "nnetsauce.GLMClassifier.predict_proba", "modulename": "nnetsauce", "qualname": "GLMClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.GLMClassifier.set_score_request": {"fullname": "nnetsauce.GLMClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "GLMClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.GLMRegressor": {"fullname": "nnetsauce.GLMRegressor", "modulename": "nnetsauce", "qualname": "GLMRegressor", "kind": "class", "doc": "<p>Generalized 'linear' models using quasi-randomized networks (regression)</p>\n\n<p>Attributes:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nlambda1: float\n    regularization parameter for GLM coefficients on original features\n\nalpha1: float\n    controls compromize between l1 and l2 norm of GLM coefficients on original features\n\nlambda2: float\n    regularization parameter for GLM coefficients on nonlinear features\n\nalpha2: float\n    controls compromize between l1 and l2 norm of GLM coefficients on nonlinear features\n\nfamily: str\n    \"gaussian\", \"laplace\" or \"poisson\" (for now)\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\noptimizer: object\n    optimizer, from class nnetsauce.utils.Optimizer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: vector\n    regression coefficients\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/glm_regression.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/glm_regression.py</a></p>\n", "bases": "nnetsauce.glm.glm.GLM, sklearn.base.RegressorMixin"}, "nnetsauce.GLMRegressor.__init__": {"fullname": "nnetsauce.GLMRegressor.__init__", "modulename": "nnetsauce", "qualname": "GLMRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">alpha1</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">alpha2</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">family</span><span class=\"o\">=</span><span class=\"s1\">&#39;gaussian&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span><span class=\"o\">=&lt;</span><span class=\"n\">nnetsauce</span><span class=\"o\">.</span><span class=\"n\">optimizers</span><span class=\"o\">.</span><span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">Optimizer</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span></span>)</span>"}, "nnetsauce.GLMRegressor.family": {"fullname": "nnetsauce.GLMRegressor.family", "modulename": "nnetsauce", "qualname": "GLMRegressor.family", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.GLMRegressor.gaussian_loss": {"fullname": "nnetsauce.GLMRegressor.gaussian_loss", "modulename": "nnetsauce", "qualname": "GLMRegressor.gaussian_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.GLMRegressor.laplace_loss": {"fullname": "nnetsauce.GLMRegressor.laplace_loss", "modulename": "nnetsauce", "qualname": "GLMRegressor.laplace_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.GLMRegressor.poisson_loss": {"fullname": "nnetsauce.GLMRegressor.poisson_loss", "modulename": "nnetsauce", "qualname": "GLMRegressor.poisson_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.GLMRegressor.loss_func": {"fullname": "nnetsauce.GLMRegressor.loss_func", "modulename": "nnetsauce", "qualname": "GLMRegressor.loss_func", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span>,</span><span class=\"param\">\t<span class=\"n\">group_index</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">row_index</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">type_loss</span><span class=\"o\">=</span><span class=\"s1\">&#39;gaussian&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.GLMRegressor.fit": {"fullname": "nnetsauce.GLMRegressor.fit", "modulename": "nnetsauce", "qualname": "GLMRegressor.fit", "kind": "function", "doc": "<p>Fit GLM model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.GLMRegressor.predict": {"fullname": "nnetsauce.GLMRegressor.predict", "modulename": "nnetsauce", "qualname": "GLMRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.GLMRegressor.set_score_request": {"fullname": "nnetsauce.GLMRegressor.set_score_request", "modulename": "nnetsauce", "qualname": "GLMRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyClassifier": {"fullname": "nnetsauce.LazyClassifier", "modulename": "nnetsauce", "qualname": "LazyClassifier", "kind": "class", "doc": "<p>Fitting -- almost -- all the classification algorithms with nnetsauce's\n    CustomClassifier and returning their scores.</p>\n\n<p>Parameters:</p>\n\n<pre><code>verbose: int, optional (default=0)\n    Any positive number for verbosity.\n\nignore_warnings: bool, optional (default=True)\n    When set to True, warnings related to algorithms that were not\n    run are ignored.\n\ncustom_metric: function, optional (default=None)\n    When function is provided, models are evaluated based on the\n    custom evaluation metric provided.\n\npredictions: bool, optional (default=False)\n    When set to True, the predictions of all the models models are\n    returned as data frame.\n\nsort_by: string, optional (default='Accuracy')\n    Sort models by a metric. Available options are 'Accuracy',\n    'Balanced Accuracy', 'ROC AUC', 'F1 Score' or a custom metric\n    identified by its name and provided by custom_metric.\n\nrandom_state: int, optional (default=42)\n    Reproducibiility seed.\n\nestimators: list, optional (default='all')\n    list of Estimators names or just 'all' for &gt; 90\n    classifiers (default='all')\n\npreprocess: bool, preprocessing is done when set to True\n\nn_jobs: int, when possible, run in parallel\n    For now, only used by individual models that support it.\n\nAll the other parameters are the same as CustomClassifier's.\n</code></pre>\n\n<p>Examples:\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n    <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n    <span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n    <span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span>\n    <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n    <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">LazyClassifier</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n    <span class=\"n\">model_dictionary</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">provide_models</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span><span class=\"n\">X_test</span><span class=\"p\">,</span><span class=\"n\">y_train</span><span class=\"p\">,</span><span class=\"n\">y_test</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">)</span>\n    </code></pre>\n    </div></p>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.ClassifierMixin"}, "nnetsauce.LazyClassifier.__init__": {"fullname": "nnetsauce.LazyClassifier.__init__", "modulename": "nnetsauce", "qualname": "LazyClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sort_by</span><span class=\"o\">=</span><span class=\"s1\">&#39;Accuracy&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">estimators</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.LazyClassifier.verbose": {"fullname": "nnetsauce.LazyClassifier.verbose", "modulename": "nnetsauce", "qualname": "LazyClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyClassifier.ignore_warnings": {"fullname": "nnetsauce.LazyClassifier.ignore_warnings", "modulename": "nnetsauce", "qualname": "LazyClassifier.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyClassifier.custom_metric": {"fullname": "nnetsauce.LazyClassifier.custom_metric", "modulename": "nnetsauce", "qualname": "LazyClassifier.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyClassifier.predictions": {"fullname": "nnetsauce.LazyClassifier.predictions", "modulename": "nnetsauce", "qualname": "LazyClassifier.predictions", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyClassifier.sort_by": {"fullname": "nnetsauce.LazyClassifier.sort_by", "modulename": "nnetsauce", "qualname": "LazyClassifier.sort_by", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyClassifier.models": {"fullname": "nnetsauce.LazyClassifier.models", "modulename": "nnetsauce", "qualname": "LazyClassifier.models", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyClassifier.random_state": {"fullname": "nnetsauce.LazyClassifier.random_state", "modulename": "nnetsauce", "qualname": "LazyClassifier.random_state", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyClassifier.estimators": {"fullname": "nnetsauce.LazyClassifier.estimators", "modulename": "nnetsauce", "qualname": "LazyClassifier.estimators", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyClassifier.preprocess": {"fullname": "nnetsauce.LazyClassifier.preprocess", "modulename": "nnetsauce", "qualname": "LazyClassifier.preprocess", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyClassifier.n_jobs": {"fullname": "nnetsauce.LazyClassifier.n_jobs", "modulename": "nnetsauce", "qualname": "LazyClassifier.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyClassifier.fit": {"fullname": "nnetsauce.LazyClassifier.fit", "modulename": "nnetsauce", "qualname": "LazyClassifier.fit", "kind": "function", "doc": "<p>Fit classifiers to X_train and y_train, predict and score on X_test,\ny_test.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>scores: Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\n\npredictions: Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyClassifier.provide_models": {"fullname": "nnetsauce.LazyClassifier.provide_models", "modulename": "nnetsauce", "qualname": "LazyClassifier.provide_models", "kind": "function", "doc": "<p>Returns all the model objects trained. If fit hasn't been called yet,\nthen it's called to return the models.</p>\n\n<p>Parameters:</p>\n\n<p>X_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<p>X_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<p>y_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<p>y_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<p>Returns:</p>\n\n<pre><code>models: dict-object,\n    Returns a dictionary with each model's pipeline as value\n    and key = name of the model.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyClassifier.set_fit_request": {"fullname": "nnetsauce.LazyClassifier.set_fit_request", "modulename": "nnetsauce", "qualname": "LazyClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyClassifier.set_score_request": {"fullname": "nnetsauce.LazyClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "LazyClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyRegressor": {"fullname": "nnetsauce.LazyRegressor", "modulename": "nnetsauce", "qualname": "LazyRegressor", "kind": "class", "doc": "<p>Fitting a collection of regression models using nnetsauce's CustomRegressor</p>\n\n<p>Parameters:</p>\n\n<pre><code>verbose: int, optional (default=0)\n    Any positive number for verbosity.\n\nignore_warnings: bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not able to run are ignored.\n\ncustom_metric: function, optional (default=None)\n    When function is provided, models are evaluated based on the custom evaluation metric provided.\n\npredictions: bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\n\nsort_by: string, optional (default='Accuracy')\n    Sort models by a metric. Available options are 'Accuracy', 'Balanced Accuracy', 'ROC AUC', 'F1 Score'\n    or a custom metric identified by its name and provided by custom_metric.\n\nrandom_state: int, optional (default=42)\n    Reproducibiility seed.\n\nestimators: list, optional (default='all')\n    a list of Estimators names or just 'all' (default='all')\n\npreprocess: bool\n    preprocessing is done when set to True\n\nn_jobs : int, when possible, run in parallel\n    For now, only used by individual models that support it.\n\nn_layers: int, optional (default=3)\n    Number of layers of CustomRegressors to be used.\n\nAll the other parameters are the same as CustomRegressor's.\n</code></pre>\n\n<p>Examples:\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_diabetes</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_diabetes</span><span class=\"p\">()</span>\n    <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n    <span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n    <span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n    <span class=\"n\">regr</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">LazyRegressor</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n    <span class=\"n\">model_dictionary</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">provide_models</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span><span class=\"n\">X_test</span><span class=\"p\">,</span><span class=\"n\">y_train</span><span class=\"p\">,</span><span class=\"n\">y_test</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">)</span>\n    </code></pre>\n    </div></p>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.RegressorMixin"}, "nnetsauce.LazyRegressor.__init__": {"fullname": "nnetsauce.LazyRegressor.__init__", "modulename": "nnetsauce", "qualname": "LazyRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">estimators</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.LazyRegressor.verbose": {"fullname": "nnetsauce.LazyRegressor.verbose", "modulename": "nnetsauce", "qualname": "LazyRegressor.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyRegressor.ignore_warnings": {"fullname": "nnetsauce.LazyRegressor.ignore_warnings", "modulename": "nnetsauce", "qualname": "LazyRegressor.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyRegressor.custom_metric": {"fullname": "nnetsauce.LazyRegressor.custom_metric", "modulename": "nnetsauce", "qualname": "LazyRegressor.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyRegressor.predictions": {"fullname": "nnetsauce.LazyRegressor.predictions", "modulename": "nnetsauce", "qualname": "LazyRegressor.predictions", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyRegressor.models": {"fullname": "nnetsauce.LazyRegressor.models", "modulename": "nnetsauce", "qualname": "LazyRegressor.models", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyRegressor.random_state": {"fullname": "nnetsauce.LazyRegressor.random_state", "modulename": "nnetsauce", "qualname": "LazyRegressor.random_state", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyRegressor.estimators": {"fullname": "nnetsauce.LazyRegressor.estimators", "modulename": "nnetsauce", "qualname": "LazyRegressor.estimators", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyRegressor.preprocess": {"fullname": "nnetsauce.LazyRegressor.preprocess", "modulename": "nnetsauce", "qualname": "LazyRegressor.preprocess", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyRegressor.n_jobs": {"fullname": "nnetsauce.LazyRegressor.n_jobs", "modulename": "nnetsauce", "qualname": "LazyRegressor.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyRegressor.fit": {"fullname": "nnetsauce.LazyRegressor.fit", "modulename": "nnetsauce", "qualname": "LazyRegressor.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X_train and y_train, predict and score on X_test, y_test.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n</code></pre>\n\n<p>Returns:</p>\n\n<p>scores : Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.</p>\n\n<p>predictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyRegressor.provide_models": {"fullname": "nnetsauce.LazyRegressor.provide_models", "modulename": "nnetsauce", "qualname": "LazyRegressor.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyRegressor.set_fit_request": {"fullname": "nnetsauce.LazyRegressor.set_fit_request", "modulename": "nnetsauce", "qualname": "LazyRegressor.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyRegressor.set_score_request": {"fullname": "nnetsauce.LazyRegressor.set_score_request", "modulename": "nnetsauce", "qualname": "LazyRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyMTS": {"fullname": "nnetsauce.LazyMTS", "modulename": "nnetsauce", "qualname": "LazyMTS", "kind": "class", "doc": "<p>Fitting -- almost -- all the regression algorithms with layers of\nnnetsauce's CustomRegressor to multivariate time series\nand returning their scores.</p>\n\n<p>Parameters:</p>\n\n<pre><code>verbose: int, optional (default=0)\n    Any positive number for verbosity.\n\nignore_warnings: bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not\n    able to run are ignored.\n\ncustom_metric: function, optional (default=None)\n    When function is provided, models are evaluated based on the custom\n      evaluation metric provided.\n\npredictions: bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\n\nsort_by: string, optional (default='RMSE')\n    Sort models by a metric. Available options are 'RMSE', 'MAE', 'MPL', 'MPE', 'MAPE',\n    'R-Squared', 'Adjusted R-Squared' or a custom metric identified by its name and\n    provided by custom_metric.\n\nrandom_state: int, optional (default=42)\n    Reproducibiility seed.\n\nestimators: list, optional (default='all')\n    list of Estimators (regression algorithms) names or just 'all' (default='all')\n\npreprocess: bool, preprocessing is done when set to True\n\nn_jobs : int, when possible, run in parallel\n    For now, only used by individual models that support it.\n\nn_layers: int, optional (default=3)\n    Number of layers of CustomRegressors to be used.\n\nAll the other parameters are the same as MTS's.\n</code></pre>\n\n<p>Examples:</p>\n\n<pre><code>See https://thierrymoudiki.github.io/blog/2023/10/29/python/quasirandomizednn/MTS-LazyPredict\n</code></pre>\n", "bases": "nnetsauce.mts.mts.MTS"}, "nnetsauce.LazyMTS.__init__": {"fullname": "nnetsauce.LazyMTS.__init__", "modulename": "nnetsauce", "qualname": "LazyMTS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">estimators</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">type_pi</span><span class=\"o\">=</span><span class=\"s1\">&#39;kde&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, "nnetsauce.LazyMTS.verbose": {"fullname": "nnetsauce.LazyMTS.verbose", "modulename": "nnetsauce", "qualname": "LazyMTS.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyMTS.ignore_warnings": {"fullname": "nnetsauce.LazyMTS.ignore_warnings", "modulename": "nnetsauce", "qualname": "LazyMTS.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyMTS.custom_metric": {"fullname": "nnetsauce.LazyMTS.custom_metric", "modulename": "nnetsauce", "qualname": "LazyMTS.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyMTS.predictions": {"fullname": "nnetsauce.LazyMTS.predictions", "modulename": "nnetsauce", "qualname": "LazyMTS.predictions", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyMTS.models": {"fullname": "nnetsauce.LazyMTS.models", "modulename": "nnetsauce", "qualname": "LazyMTS.models", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyMTS.random_state": {"fullname": "nnetsauce.LazyMTS.random_state", "modulename": "nnetsauce", "qualname": "LazyMTS.random_state", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyMTS.estimators": {"fullname": "nnetsauce.LazyMTS.estimators", "modulename": "nnetsauce", "qualname": "LazyMTS.estimators", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyMTS.preprocess": {"fullname": "nnetsauce.LazyMTS.preprocess", "modulename": "nnetsauce", "qualname": "LazyMTS.preprocess", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyMTS.fit": {"fullname": "nnetsauce.LazyMTS.fit", "modulename": "nnetsauce", "qualname": "LazyMTS.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X_train, predict and score on X_test.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n\nxreg: array-like, optional (default=None)\n    Additional (external) regressors to be passed to self.obj\n    xreg must be in 'increasing' order (most recent observations last)\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>scores: Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\n\npredictions: Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyMTS.provide_models": {"fullname": "nnetsauce.LazyMTS.provide_models", "modulename": "nnetsauce", "qualname": "LazyMTS.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyMTS.set_fit_request": {"fullname": "nnetsauce.LazyMTS.set_fit_request", "modulename": "nnetsauce", "qualname": "LazyMTS.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyMTS.set_predict_request": {"fullname": "nnetsauce.LazyMTS.set_predict_request", "modulename": "nnetsauce", "qualname": "LazyMTS.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyMTS.set_score_request": {"fullname": "nnetsauce.LazyMTS.set_score_request", "modulename": "nnetsauce", "qualname": "LazyMTS.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyDeepClassifier": {"fullname": "nnetsauce.LazyDeepClassifier", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier", "kind": "class", "doc": "<p>Fitting -- almost -- all the classification algorithms with layers of\nnnetsauce's CustomClassifier and returning their scores.</p>\n\n<p>Parameters:</p>\n\n<pre><code>verbose: int, optional (default=0)\n    Any positive number for verbosity.\n\nignore_warnings: bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not\n    able to run are ignored.\n\ncustom_metric: function, optional (default=None)\n    When function is provided, models are evaluated based on the custom\n      evaluation metric provided.\n\npredictions: bool, optional (default=False)\n    When set to True, the predictions of all the models models are\n    returned as data frame.\n\nsort_by: string, optional (default='Accuracy')\n    Sort models by a metric. Available options are 'Accuracy',\n    'Balanced Accuracy', 'ROC AUC', 'F1 Score' or a custom metric\n    identified by its name and provided by custom_metric.\n\nrandom_state: int, optional (default=42)\n    Reproducibiility seed.\n\nestimators: list, optional (default='all')\n    list of Estimators names or just 'all' for &gt; 90 classifiers\n    (default='all')\n\npreprocess: bool, preprocessing is done when set to True\n\nn_jobs: int, when possible, run in parallel\n    For now, only used by individual models that support it.\n\nn_layers: int, optional (default=3)\n    Number of layers of CustomClassifiers to be used.\n\nAll the other parameters are the same as CustomClassifier's.\n</code></pre>\n\n<p>Examples\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n    <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n    <span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n    <span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span>\n        <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n    <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">LazyDeepClassifier</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n    <span class=\"n\">model_dictionary</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">provide_models</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span><span class=\"n\">X_test</span><span class=\"p\">,</span><span class=\"n\">y_train</span><span class=\"p\">,</span><span class=\"n\">y_test</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">)</span>\n    </code></pre>\n    </div></p>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.ClassifierMixin"}, "nnetsauce.LazyDeepClassifier.__init__": {"fullname": "nnetsauce.LazyDeepClassifier.__init__", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sort_by</span><span class=\"o\">=</span><span class=\"s1\">&#39;Accuracy&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">estimators</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.LazyDeepClassifier.verbose": {"fullname": "nnetsauce.LazyDeepClassifier.verbose", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepClassifier.ignore_warnings": {"fullname": "nnetsauce.LazyDeepClassifier.ignore_warnings", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepClassifier.custom_metric": {"fullname": "nnetsauce.LazyDeepClassifier.custom_metric", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepClassifier.predictions": {"fullname": "nnetsauce.LazyDeepClassifier.predictions", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.predictions", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepClassifier.sort_by": {"fullname": "nnetsauce.LazyDeepClassifier.sort_by", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.sort_by", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepClassifier.models": {"fullname": "nnetsauce.LazyDeepClassifier.models", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.models", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepClassifier.random_state": {"fullname": "nnetsauce.LazyDeepClassifier.random_state", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.random_state", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepClassifier.estimators": {"fullname": "nnetsauce.LazyDeepClassifier.estimators", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.estimators", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepClassifier.preprocess": {"fullname": "nnetsauce.LazyDeepClassifier.preprocess", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.preprocess", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepClassifier.n_layers": {"fullname": "nnetsauce.LazyDeepClassifier.n_layers", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.n_layers", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepClassifier.n_jobs": {"fullname": "nnetsauce.LazyDeepClassifier.n_jobs", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepClassifier.fit": {"fullname": "nnetsauce.LazyDeepClassifier.fit", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.fit", "kind": "function", "doc": "<p>Fit classifiers to X_train and y_train, predict and score on X_test,\ny_test.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>scores: Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\n\npredictions: Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyDeepClassifier.provide_models": {"fullname": "nnetsauce.LazyDeepClassifier.provide_models", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.provide_models", "kind": "function", "doc": "<p>Returns all the model objects trained. If fit hasn't been called yet,\nthen it's called to return the models.</p>\n\n<p>Parameters:</p>\n\n<p>X_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<p>X_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<p>y_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<p>y_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<p>Returns:</p>\n\n<pre><code>models: dict-object,\n    Returns a dictionary with each model's pipeline as value\n    and key = name of the model.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"fullname": "nnetsauce.LazyDeepClassifier.set_fit_request", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyDeepClassifier.set_score_request": {"fullname": "nnetsauce.LazyDeepClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyDeepRegressor": {"fullname": "nnetsauce.LazyDeepRegressor", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor", "kind": "class", "doc": "<p>Fitting -- almost -- all the regression algorithms with layers of\n    nnetsauce's CustomRegressor and returning their scores.</p>\n\n<p>Parameters:</p>\n\n<pre><code>verbose: int, optional (default=0)\n    Any positive number for verbosity.\n\nignore_warnings: bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not able to run are ignored.\n\ncustom_metric: function, optional (default=None)\n    When function is provided, models are evaluated based on the custom evaluation metric provided.\n\npredictions: bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\n\nsort_by: string, optional (default='Accuracy')\n    Sort models by a metric. Available options are 'Accuracy', 'Balanced Accuracy', 'ROC AUC', 'F1 Score'\n    or a custom metric identified by its name and provided by custom_metric.\n\nrandom_state: int, optional (default=42)\n    Reproducibiility seed.\n\nestimators: list, optional (default='all')\n    list of Estimators names or just 'all' (default='all')\n\npreprocess: bool\n    preprocessing is done when set to True\n\nn_jobs : int, when possible, run in parallel\n    For now, only used by individual models that support it.\n\nn_layers: int, optional (default=3)\n    Number of layers of CustomRegressors to be used.\n\nAll the other parameters are the same as CustomRegressor's.\n</code></pre>\n\n<p>Examples:</p>\n\n<pre><code>import nnetsauce as ns\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn.utils import shuffle\n\ndiabetes = datasets.load_diabetes()\nX, y = shuffle(diabetes.data, diabetes.target, random_state=13)\nX = X.astype(np.float32)\n\noffset = int(X.shape[0] * 0.9)\nX_train, y_train = X[:offset], y[:offset]\nX_test, y_test = X[offset:], y[offset:]\n\nreg = ns.LazyDeepRegressor(verbose=0, ignore_warnings=False, custom_metric=None)\nmodels, predictions = reg.fit(X_train, X_test, y_train, y_test)\nprint(models)\n</code></pre>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.RegressorMixin"}, "nnetsauce.LazyDeepRegressor.__init__": {"fullname": "nnetsauce.LazyDeepRegressor.__init__", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">estimators</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.LazyDeepRegressor.verbose": {"fullname": "nnetsauce.LazyDeepRegressor.verbose", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepRegressor.ignore_warnings": {"fullname": "nnetsauce.LazyDeepRegressor.ignore_warnings", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepRegressor.custom_metric": {"fullname": "nnetsauce.LazyDeepRegressor.custom_metric", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepRegressor.predictions": {"fullname": "nnetsauce.LazyDeepRegressor.predictions", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.predictions", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepRegressor.models": {"fullname": "nnetsauce.LazyDeepRegressor.models", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.models", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepRegressor.random_state": {"fullname": "nnetsauce.LazyDeepRegressor.random_state", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.random_state", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepRegressor.estimators": {"fullname": "nnetsauce.LazyDeepRegressor.estimators", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.estimators", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepRegressor.preprocess": {"fullname": "nnetsauce.LazyDeepRegressor.preprocess", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.preprocess", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepRegressor.n_layers": {"fullname": "nnetsauce.LazyDeepRegressor.n_layers", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.n_layers", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepRegressor.n_jobs": {"fullname": "nnetsauce.LazyDeepRegressor.n_jobs", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepRegressor.fit": {"fullname": "nnetsauce.LazyDeepRegressor.fit", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X_train and y_train, predict and score on X_test, y_test.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>scores:  Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.</p>\n\n<p>predictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyDeepRegressor.provide_models": {"fullname": "nnetsauce.LazyDeepRegressor.provide_models", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"fullname": "nnetsauce.LazyDeepRegressor.set_fit_request", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyDeepRegressor.set_score_request": {"fullname": "nnetsauce.LazyDeepRegressor.set_score_request", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyDeepMTS": {"fullname": "nnetsauce.LazyDeepMTS", "modulename": "nnetsauce", "qualname": "LazyDeepMTS", "kind": "class", "doc": "<p>Fitting -- almost -- all the regression algorithms with layers of\n    nnetsauce's CustomRegressor to multivariate time series\n    and returning their scores.</p>\n\n<p>Parameters:</p>\n\n<pre><code>verbose: int, optional (default=0)\n    Any positive number for verbosity.\n\nignore_warnings: bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not\n    able to run are ignored.\n\ncustom_metric: function, optional (default=None)\n    When function is provided, models are evaluated based on the\n    custom evaluation metric provided.\n\npredictions: bool, optional (default=False)\n    When set to True, the predictions of all the models models are\n    returned as dataframe.\n\nsort_by: string, optional (default='RMSE')\n    Sort models by a metric. Available options are 'RMSE', 'MAE',\n    'MPL', 'MPE', 'MAPE', 'R-Squared', 'Adjusted R-Squared' or\n    a custom metric identified by its name and\n    provided by custom_metric.\n\nrandom_state: int, optional (default=42)\n    Reproducibiility seed.\n\nestimators: list, optional (default='all')\n    list of Estimators (regression algorithms) names or just\n    'all' (default='all')\n\npreprocess: bool, preprocessing is done when set to True\n\nn_jobs : int, when possible, run in parallel\n    For now, only used by individual models that support it.\n\nn_layers: int, optional (default=3)\n    Number of layers of CustomRegressors to be used.\n\nAll the other parameters are the same as MTS's.\n</code></pre>\n\n<p>Examples</p>\n\n<pre><code>See https://github.com/Techtonique/nnetsauce/blob/master/nnetsauce/demo/thierrymoudiki_20240106_LazyDeepMTS.ipynb\n</code></pre>\n", "bases": "nnetsauce.mts.mts.MTS"}, "nnetsauce.LazyDeepMTS.__init__": {"fullname": "nnetsauce.LazyDeepMTS.__init__", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">estimators</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">type_pi</span><span class=\"o\">=</span><span class=\"s1\">&#39;kde&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, "nnetsauce.LazyDeepMTS.verbose": {"fullname": "nnetsauce.LazyDeepMTS.verbose", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepMTS.ignore_warnings": {"fullname": "nnetsauce.LazyDeepMTS.ignore_warnings", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepMTS.custom_metric": {"fullname": "nnetsauce.LazyDeepMTS.custom_metric", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepMTS.predictions": {"fullname": "nnetsauce.LazyDeepMTS.predictions", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.predictions", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepMTS.models": {"fullname": "nnetsauce.LazyDeepMTS.models", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.models", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepMTS.random_state": {"fullname": "nnetsauce.LazyDeepMTS.random_state", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.random_state", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepMTS.estimators": {"fullname": "nnetsauce.LazyDeepMTS.estimators", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.estimators", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepMTS.preprocess": {"fullname": "nnetsauce.LazyDeepMTS.preprocess", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.preprocess", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepMTS.n_layers": {"fullname": "nnetsauce.LazyDeepMTS.n_layers", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.n_layers", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.LazyDeepMTS.fit": {"fullname": "nnetsauce.LazyDeepMTS.fit", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X_train, predict and score on X_test.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n\nxreg: {array-like}, shape = [n_samples, n_features_xreg]\n    Additional (external) regressors to be passed to self.obj\n    xreg must be in 'increasing' order (most recent observations last)\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>scores : Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\n\npredictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyDeepMTS.provide_models": {"fullname": "nnetsauce.LazyDeepMTS.provide_models", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyDeepMTS.set_fit_request": {"fullname": "nnetsauce.LazyDeepMTS.set_fit_request", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyDeepMTS.set_predict_request": {"fullname": "nnetsauce.LazyDeepMTS.set_predict_request", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.LazyDeepMTS.set_score_request": {"fullname": "nnetsauce.LazyDeepMTS.set_score_request", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.MTS": {"fullname": "nnetsauce.MTS", "modulename": "nnetsauce", "qualname": "MTS", "kind": "class", "doc": "<p>Univariate and multivariate time series (MTS) forecasting with Quasi-Randomized networks (Work in progress /!)</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object.\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict()).\n\nn_hidden_features: int.\n    number of nodes in the hidden layer.\n\nactivation_name: str.\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'.\n\na: float.\n    hyperparameter for 'prelu' or 'elu' activation function.\n\nnodes_sim: str.\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'.\n\nbias: boolean.\n    indicates if the hidden layer contains a bias term (True) or not\n    (False).\n\ndropout: float.\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training.\n\ndirect_link: boolean.\n    indicates if the original predictors are included (True) in model's fitting or not (False).\n\nn_clusters: int.\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0: no clustering).\n\ncluster_encode: bool.\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding.\n\ntype_clust: str.\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm').\n\ntype_scaling: a tuple of 3 strings.\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax').\n\nlags: int.\n    number of lags used for each time series.\n\ntype_pi: str.\n    type of prediction interval; currently:\n    - \"kde\": based on Kernel Density Estimation of in-sample residuals\n    - \"bootstrap\": based on independent bootstrap of in-sample residuals\n    - \"block-bootstrap\": based on basic block bootstrap of in-sample residuals\n    - \"scp-kde\": Split conformal prediction with Kernel Density Estimation of calibrated residuals\n    - \"scp-bootstrap\": Split conformal prediction with independent bootstrap of calibrated residuals\n    - \"scp-block-bootstrap\": Split conformal prediction with basic block bootstrap of calibrated residuals\n    - \"scp2-kde\": Split conformal prediction with Kernel Density Estimation of standardized calibrated residuals\n    - \"scp2-bootstrap\": Split conformal prediction with independent bootstrap of standardized calibrated residuals\n    - \"scp2-block-bootstrap\": Split conformal prediction with basic block bootstrap of standardized calibrated residuals\n\nreplications: int.\n    number of replications (if needed, for predictive simulation). Default is 'None'.\n\nkernel: str.\n    the kernel to use for residuals density estimation (used for predictive simulation). Currently, either 'gaussian' or 'tophat'.\n\nagg: str.\n    either \"mean\" or \"median\" for simulation of bootstrap aggregating\n\nseed: int.\n    reproducibility seed for nodes_sim=='uniform' or predictive simulation.\n\nbackend: str.\n    \"cpu\" or \"gpu\" or \"tpu\".\n\nverbose: int.\n    0: not printing; 1: printing\n\nshow_progress: bool.\n    True: progress bar when fitting each series; False: no progress bar when fitting each series\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>fit_objs_: dict\n    objects adjusted to each individual time series\n\ny_: {array-like}\n    MTS responses (most recent observations first)\n\nX_: {array-like}\n    MTS lags\n\nxreg_: {array-like}\n    external regressors\n\ny_means_: dict\n    a dictionary of each series mean values\n\npreds_: {array-like}\n    successive model predictions\n\npreds_std_: {array-like}\n    standard deviation around the predictions\n\nreturn_std_: boolean\n    return uncertainty or not (set in predict)\n\ndf_: data frame\n    the input data frame, in case a data.frame is provided to `fit`\n</code></pre>\n\n<p>Examples:</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n<span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">25</span><span class=\"o\">*</span><span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adjust Bayesian Ridge</span>\n<span class=\"n\">regr4</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">BayesianRidge</span><span class=\"p\">()</span>\n<span class=\"n\">obj_MTS</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">MTS</span><span class=\"p\">(</span><span class=\"n\">regr4</span><span class=\"p\">,</span> <span class=\"n\">lags</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># with credible intervals</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"s1\">&#39;date&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;2001-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2002-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2003-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2004-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2005-01-01&#39;</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series1&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mf\">35.6</span><span class=\"p\">,</span> <span class=\"mf\">33.3</span><span class=\"p\">,</span> <span class=\"mf\">38.1</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series2&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">5.5</span><span class=\"p\">,</span> <span class=\"mf\">5.6</span><span class=\"p\">,</span> <span class=\"mf\">6.3</span><span class=\"p\">,</span> <span class=\"mf\">5.1</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series3&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mf\">100.5</span><span class=\"p\">,</span> <span class=\"mf\">100.6</span><span class=\"p\">,</span> <span class=\"mf\">100.2</span><span class=\"p\">,</span> <span class=\"mf\">100.1</span><span class=\"p\">]}</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;date&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adjust Bayesian Ridge</span>\n<span class=\"n\">regr5</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">BayesianRidge</span><span class=\"p\">()</span>\n<span class=\"n\">obj_MTS</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">MTS</span><span class=\"p\">(</span><span class=\"n\">regr5</span><span class=\"p\">,</span> <span class=\"n\">lags</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># with credible intervals</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base"}, "nnetsauce.MTS.__init__": {"fullname": "nnetsauce.MTS.__init__", "modulename": "nnetsauce", "qualname": "MTS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">type_pi</span><span class=\"o\">=</span><span class=\"s1\">&#39;kde&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, "nnetsauce.MTS.obj": {"fullname": "nnetsauce.MTS.obj", "modulename": "nnetsauce", "qualname": "MTS.obj", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.n_series": {"fullname": "nnetsauce.MTS.n_series", "modulename": "nnetsauce", "qualname": "MTS.n_series", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.lags": {"fullname": "nnetsauce.MTS.lags", "modulename": "nnetsauce", "qualname": "MTS.lags", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.type_pi": {"fullname": "nnetsauce.MTS.type_pi", "modulename": "nnetsauce", "qualname": "MTS.type_pi", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.replications": {"fullname": "nnetsauce.MTS.replications", "modulename": "nnetsauce", "qualname": "MTS.replications", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.kernel": {"fullname": "nnetsauce.MTS.kernel", "modulename": "nnetsauce", "qualname": "MTS.kernel", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.agg": {"fullname": "nnetsauce.MTS.agg", "modulename": "nnetsauce", "qualname": "MTS.agg", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.verbose": {"fullname": "nnetsauce.MTS.verbose", "modulename": "nnetsauce", "qualname": "MTS.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.show_progress": {"fullname": "nnetsauce.MTS.show_progress", "modulename": "nnetsauce", "qualname": "MTS.show_progress", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.series_names": {"fullname": "nnetsauce.MTS.series_names", "modulename": "nnetsauce", "qualname": "MTS.series_names", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.input_dates": {"fullname": "nnetsauce.MTS.input_dates", "modulename": "nnetsauce", "qualname": "MTS.input_dates", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.fit_objs_": {"fullname": "nnetsauce.MTS.fit_objs_", "modulename": "nnetsauce", "qualname": "MTS.fit_objs_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.y_": {"fullname": "nnetsauce.MTS.y_", "modulename": "nnetsauce", "qualname": "MTS.y_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.X_": {"fullname": "nnetsauce.MTS.X_", "modulename": "nnetsauce", "qualname": "MTS.X_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.xreg_": {"fullname": "nnetsauce.MTS.xreg_", "modulename": "nnetsauce", "qualname": "MTS.xreg_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.y_means_": {"fullname": "nnetsauce.MTS.y_means_", "modulename": "nnetsauce", "qualname": "MTS.y_means_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.mean_": {"fullname": "nnetsauce.MTS.mean_", "modulename": "nnetsauce", "qualname": "MTS.mean_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.upper_": {"fullname": "nnetsauce.MTS.upper_", "modulename": "nnetsauce", "qualname": "MTS.upper_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.lower_": {"fullname": "nnetsauce.MTS.lower_", "modulename": "nnetsauce", "qualname": "MTS.lower_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.output_dates_": {"fullname": "nnetsauce.MTS.output_dates_", "modulename": "nnetsauce", "qualname": "MTS.output_dates_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.preds_std_": {"fullname": "nnetsauce.MTS.preds_std_", "modulename": "nnetsauce", "qualname": "MTS.preds_std_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.alpha_": {"fullname": "nnetsauce.MTS.alpha_", "modulename": "nnetsauce", "qualname": "MTS.alpha_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.return_std_": {"fullname": "nnetsauce.MTS.return_std_", "modulename": "nnetsauce", "qualname": "MTS.return_std_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.df_": {"fullname": "nnetsauce.MTS.df_", "modulename": "nnetsauce", "qualname": "MTS.df_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.residuals_": {"fullname": "nnetsauce.MTS.residuals_", "modulename": "nnetsauce", "qualname": "MTS.residuals_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.residuals_sims_": {"fullname": "nnetsauce.MTS.residuals_sims_", "modulename": "nnetsauce", "qualname": "MTS.residuals_sims_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.kde_": {"fullname": "nnetsauce.MTS.kde_", "modulename": "nnetsauce", "qualname": "MTS.kde_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.sims_": {"fullname": "nnetsauce.MTS.sims_", "modulename": "nnetsauce", "qualname": "MTS.sims_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.residuals_std_dev_": {"fullname": "nnetsauce.MTS.residuals_std_dev_", "modulename": "nnetsauce", "qualname": "MTS.residuals_std_dev_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.n_obs": {"fullname": "nnetsauce.MTS.n_obs", "modulename": "nnetsauce", "qualname": "MTS.n_obs", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.level": {"fullname": "nnetsauce.MTS.level", "modulename": "nnetsauce", "qualname": "MTS.level", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MTS.fit": {"fullname": "nnetsauce.MTS.fit", "modulename": "nnetsauce", "qualname": "MTS.fit", "kind": "function", "doc": "<p>Fit MTS model to training data X, with optional regressors xreg</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training time series, where n_samples is the number\n    of samples and n_features is the number of features;\n    X must be in increasing order (most recent observations last)\n\nxreg: {array-like}, shape = [n_samples, n_features_xreg]\n    Additional (external) regressors to be passed to self.obj\n    xreg must be in 'increasing' order (most recent observations last)\n\n**kwargs: for now, additional parameters to be passed to for kernel density estimation, when needed (see sklearn.neighbors.KernelDensity)\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.MTS.predict": {"fullname": "nnetsauce.MTS.predict", "modulename": "nnetsauce", "qualname": "MTS.predict", "kind": "function", "doc": "<p>Forecast all the time series, h steps ahead</p>\n\n<p>Parameters:</p>\n\n<pre><code>h: {integer}\n    Forecasting horizon\n\nlevel: {integer}\n    Level of confidence (if obj has option 'return_std' and the\n    posterior is gaussian)\n\nnew_xreg: {array-like}, shape = [n_samples = h, n_new_xreg]\n    New values of additional (deterministic) regressors on horizon = h\n    new_xreg must be in increasing order (most recent observations last)\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions for horizon = h: {array-like}, data frame or tuple.\nStandard deviation and prediction intervals are returned when\n`obj.predict` can return standard deviation\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">h</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.MTS.score": {"fullname": "nnetsauce.MTS.score", "modulename": "nnetsauce", "qualname": "MTS.score", "kind": "function", "doc": "<p>Train on training_index, score on testing_index.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">training_index</span>, </span><span class=\"param\"><span class=\"n\">testing_index</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.MTS.plot": {"fullname": "nnetsauce.MTS.plot", "modulename": "nnetsauce", "qualname": "MTS.plot", "kind": "function", "doc": "<p>Plot time series forecast</p>\n\n<p>Parameters:</p>\n\n<pre><code>series: {integer} or {string}\n    series index or name\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">series</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">type_axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;dates&#39;</span>, </span><span class=\"param\"><span class=\"n\">type_plot</span><span class=\"o\">=</span><span class=\"s1\">&#39;pi&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.MTS.set_fit_request": {"fullname": "nnetsauce.MTS.set_fit_request", "modulename": "nnetsauce", "qualname": "MTS.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.MTS.set_predict_request": {"fullname": "nnetsauce.MTS.set_predict_request", "modulename": "nnetsauce", "qualname": "MTS.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.MTS.set_score_request": {"fullname": "nnetsauce.MTS.set_score_request", "modulename": "nnetsauce", "qualname": "MTS.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.MultitaskClassifier": {"fullname": "nnetsauce.MultitaskClassifier", "modulename": "nnetsauce", "qualname": "MultitaskClassifier", "kind": "class", "doc": "<p>Multitask Classification model based on regression models, with shared covariates</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object (must be a regression model) containing a method fit (obj.fit())\n    and a method predict (obj.predict())\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>fit_objs_: dict\n    objects adjusted to each individual time series\n\nn_classes_: int\n    number of classes for the classifier\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/mtask_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/mtask_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LinearRegression</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Linear Regression is used</span>\n<span class=\"n\">regr</span> <span class=\"o\">=</span> <span class=\"n\">LinearRegression</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">MultitaskClassifier</span><span class=\"p\">(</span><span class=\"n\">regr</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                            <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s2\">&quot;gmm&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.ClassifierMixin"}, "nnetsauce.MultitaskClassifier.__init__": {"fullname": "nnetsauce.MultitaskClassifier.__init__", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.MultitaskClassifier.type_fit": {"fullname": "nnetsauce.MultitaskClassifier.type_fit", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MultitaskClassifier.obj": {"fullname": "nnetsauce.MultitaskClassifier.obj", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.obj", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MultitaskClassifier.fit_objs_": {"fullname": "nnetsauce.MultitaskClassifier.fit_objs_", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.fit_objs_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.MultitaskClassifier.fit": {"fullname": "nnetsauce.MultitaskClassifier.fit", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.fit", "kind": "function", "doc": "<p>Fit MultitaskClassifier to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.MultitaskClassifier.predict": {"fullname": "nnetsauce.MultitaskClassifier.predict", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.MultitaskClassifier.predict_proba": {"fullname": "nnetsauce.MultitaskClassifier.predict_proba", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.MultitaskClassifier.set_fit_request": {"fullname": "nnetsauce.MultitaskClassifier.set_fit_request", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.MultitaskClassifier.set_score_request": {"fullname": "nnetsauce.MultitaskClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.PredictionInterval": {"fullname": "nnetsauce.PredictionInterval", "modulename": "nnetsauce", "qualname": "PredictionInterval", "kind": "class", "doc": "<p>Class PredictionInterval: Obtain prediction intervals.</p>\n\n<p>Attributes:</p>\n\n<pre><code>obj: an object;\n    fitted object containing methods `fit` and `predict`\n\nmethod: a string;\n    method for constructing the prediction intervals.\n    Currently \"splitconformal\" (default) and \"localconformal\"\n\nlevel: a float;\n    Confidence level for prediction intervals. Default is 95,\n    equivalent to a miscoverage error of 5 (%)\n\nreplications: an integer;\n    Number of replications for simulated conformal (default is `None`)\n\ntype_pi: a string;\n    type of prediction interval: currently \"kde\" (default) or \"bootstrap\"\n\nseed: an integer;\n    Reproducibility of fit (there's a random split between fitting and calibration data)\n</code></pre>\n", "bases": "sklearn.base.BaseEstimator, sklearn.base.RegressorMixin"}, "nnetsauce.PredictionInterval.__init__": {"fullname": "nnetsauce.PredictionInterval.__init__", "modulename": "nnetsauce", "qualname": "PredictionInterval.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;splitconformal&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span>,</span><span class=\"param\">\t<span class=\"n\">type_pi</span><span class=\"o\">=</span><span class=\"s1\">&#39;bootstrap&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span></span>)</span>"}, "nnetsauce.PredictionInterval.obj": {"fullname": "nnetsauce.PredictionInterval.obj", "modulename": "nnetsauce", "qualname": "PredictionInterval.obj", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.PredictionInterval.method": {"fullname": "nnetsauce.PredictionInterval.method", "modulename": "nnetsauce", "qualname": "PredictionInterval.method", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.PredictionInterval.level": {"fullname": "nnetsauce.PredictionInterval.level", "modulename": "nnetsauce", "qualname": "PredictionInterval.level", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.PredictionInterval.type_pi": {"fullname": "nnetsauce.PredictionInterval.type_pi", "modulename": "nnetsauce", "qualname": "PredictionInterval.type_pi", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.PredictionInterval.replications": {"fullname": "nnetsauce.PredictionInterval.replications", "modulename": "nnetsauce", "qualname": "PredictionInterval.replications", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.PredictionInterval.kernel": {"fullname": "nnetsauce.PredictionInterval.kernel", "modulename": "nnetsauce", "qualname": "PredictionInterval.kernel", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.PredictionInterval.agg": {"fullname": "nnetsauce.PredictionInterval.agg", "modulename": "nnetsauce", "qualname": "PredictionInterval.agg", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.PredictionInterval.seed": {"fullname": "nnetsauce.PredictionInterval.seed", "modulename": "nnetsauce", "qualname": "PredictionInterval.seed", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.PredictionInterval.alpha_": {"fullname": "nnetsauce.PredictionInterval.alpha_", "modulename": "nnetsauce", "qualname": "PredictionInterval.alpha_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.PredictionInterval.quantile_": {"fullname": "nnetsauce.PredictionInterval.quantile_", "modulename": "nnetsauce", "qualname": "PredictionInterval.quantile_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.PredictionInterval.icp_": {"fullname": "nnetsauce.PredictionInterval.icp_", "modulename": "nnetsauce", "qualname": "PredictionInterval.icp_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.PredictionInterval.calibrated_residuals_": {"fullname": "nnetsauce.PredictionInterval.calibrated_residuals_", "modulename": "nnetsauce", "qualname": "PredictionInterval.calibrated_residuals_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.PredictionInterval.scaled_calibrated_residuals_": {"fullname": "nnetsauce.PredictionInterval.scaled_calibrated_residuals_", "modulename": "nnetsauce", "qualname": "PredictionInterval.scaled_calibrated_residuals_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.PredictionInterval.calibrated_residuals_scaler_": {"fullname": "nnetsauce.PredictionInterval.calibrated_residuals_scaler_", "modulename": "nnetsauce", "qualname": "PredictionInterval.calibrated_residuals_scaler_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.PredictionInterval.kde_": {"fullname": "nnetsauce.PredictionInterval.kde_", "modulename": "nnetsauce", "qualname": "PredictionInterval.kde_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.PredictionInterval.fit": {"fullname": "nnetsauce.PredictionInterval.fit", "modulename": "nnetsauce", "qualname": "PredictionInterval.fit", "kind": "function", "doc": "<p>Fit the <code>method</code> to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: array-like, shape = [n_samples, n_features];\n    Training set vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples, ]; Target values.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.PredictionInterval.predict": {"fullname": "nnetsauce.PredictionInterval.predict", "modulename": "nnetsauce", "qualname": "PredictionInterval.predict", "kind": "function", "doc": "<p>Obtain predictions and prediction intervals</p>\n\n<p>Args:</p>\n\n<pre><code>X: array-like, shape = [n_samples, n_features];\n    Testing set vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nreturn_pi: boolean\n    Whether the prediction interval is returned or not.\n    Default is False, for compatibility with other _estimators_.\n    If True, a tuple containing the predictions + lower and upper\n    bounds is returned.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">return_pi</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.PredictionInterval.set_predict_request": {"fullname": "nnetsauce.PredictionInterval.set_predict_request", "modulename": "nnetsauce", "qualname": "PredictionInterval.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.PredictionInterval.set_score_request": {"fullname": "nnetsauce.PredictionInterval.set_score_request", "modulename": "nnetsauce", "qualname": "PredictionInterval.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.SimpleMultitaskClassifier": {"fullname": "nnetsauce.SimpleMultitaskClassifier", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier", "kind": "class", "doc": "<p>Multitask Classification model based on regression models, with shared covariates</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object (must be a regression model) containing a method fit (obj.fit())\n    and a method predict (obj.predict())\n\nseed: int\n    reproducibility seed\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>fit_objs_: dict\n    objects adjusted to each individual time series\n\nn_classes_: int\n    number of classes for the classifier\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LinearRegression</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Linear Regression is used</span>\n<span class=\"n\">regr</span> <span class=\"o\">=</span> <span class=\"n\">LinearRegression</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">SimpleMultitaskClassifier</span><span class=\"p\">(</span><span class=\"n\">regr</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.ClassifierMixin"}, "nnetsauce.SimpleMultitaskClassifier.__init__": {"fullname": "nnetsauce.SimpleMultitaskClassifier.__init__", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span>)</span>"}, "nnetsauce.SimpleMultitaskClassifier.type_fit": {"fullname": "nnetsauce.SimpleMultitaskClassifier.type_fit", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.SimpleMultitaskClassifier.obj": {"fullname": "nnetsauce.SimpleMultitaskClassifier.obj", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.obj", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.SimpleMultitaskClassifier.fit_objs_": {"fullname": "nnetsauce.SimpleMultitaskClassifier.fit_objs_", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.fit_objs_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.SimpleMultitaskClassifier.X_scaler_": {"fullname": "nnetsauce.SimpleMultitaskClassifier.X_scaler_", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.X_scaler_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.SimpleMultitaskClassifier.scaled_X_": {"fullname": "nnetsauce.SimpleMultitaskClassifier.scaled_X_", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.scaled_X_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.SimpleMultitaskClassifier.fit": {"fullname": "nnetsauce.SimpleMultitaskClassifier.fit", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.fit", "kind": "function", "doc": "<p>Fit SimpleMultitaskClassifier to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.SimpleMultitaskClassifier.predict": {"fullname": "nnetsauce.SimpleMultitaskClassifier.predict", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"fullname": "nnetsauce.SimpleMultitaskClassifier.predict_proba", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"fullname": "nnetsauce.SimpleMultitaskClassifier.set_fit_request", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"fullname": "nnetsauce.SimpleMultitaskClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Optimizer": {"fullname": "nnetsauce.Optimizer", "modulename": "nnetsauce", "qualname": "Optimizer", "kind": "class", "doc": "<p>Optimizer class</p>\n\n<p>Attributes:</p>\n\n<pre><code>type_optim: str\n    type of optimizer, (currently) either 'sgd' (stochastic minibatch gradient descent)\n    or 'scd' (stochastic minibatch coordinate descent)\n\nnum_iters: int\n    number of iterations of the optimizer\n\nlearning_rate: float\n    step size\n\nbatch_prop: float\n    proportion of the initial data used at each optimization step\n\nlearning_method: str\n    \"poly\" - learning rate decreasing as a polynomial function\n    of # of iterations (default)\n    \"exp\" - learning rate decreasing as an exponential function\n    of # of iterations\n    \"momentum\" - gradient descent using momentum\n\nrandomization: str\n    type of randomization applied at each step\n    \"strat\" - stratified subsampling (default)\n    \"shuffle\" - random subsampling\n\nmass: float\n    mass on velocity, for `method` == \"momentum\"\n\ndecay: float\n    coefficient of decrease of the learning rate for\n    `method` == \"poly\" and `method` == \"exp\"\n\ntolerance: float\n    early stopping parameter (convergence of loss function)\n\nverbose: int\n    controls verbosity of gradient descent\n    0 - nothing is printed\n    1 - a progress bar is printed\n    2 - successive loss function values are printed\n</code></pre>\n"}, "nnetsauce.Optimizer.__init__": {"fullname": "nnetsauce.Optimizer.__init__", "modulename": "nnetsauce", "qualname": "Optimizer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">type_optim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sgd&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">num_iters</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">batch_prop</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">learning_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;momentum&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">randomization</span><span class=\"o\">=</span><span class=\"s1\">&#39;strat&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mass</span><span class=\"o\">=</span><span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">decay</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, "nnetsauce.Optimizer.type_optim": {"fullname": "nnetsauce.Optimizer.type_optim", "modulename": "nnetsauce", "qualname": "Optimizer.type_optim", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Optimizer.num_iters": {"fullname": "nnetsauce.Optimizer.num_iters", "modulename": "nnetsauce", "qualname": "Optimizer.num_iters", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Optimizer.learning_rate": {"fullname": "nnetsauce.Optimizer.learning_rate", "modulename": "nnetsauce", "qualname": "Optimizer.learning_rate", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Optimizer.batch_prop": {"fullname": "nnetsauce.Optimizer.batch_prop", "modulename": "nnetsauce", "qualname": "Optimizer.batch_prop", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Optimizer.learning_method": {"fullname": "nnetsauce.Optimizer.learning_method", "modulename": "nnetsauce", "qualname": "Optimizer.learning_method", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Optimizer.randomization": {"fullname": "nnetsauce.Optimizer.randomization", "modulename": "nnetsauce", "qualname": "Optimizer.randomization", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Optimizer.mass": {"fullname": "nnetsauce.Optimizer.mass", "modulename": "nnetsauce", "qualname": "Optimizer.mass", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Optimizer.decay": {"fullname": "nnetsauce.Optimizer.decay", "modulename": "nnetsauce", "qualname": "Optimizer.decay", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Optimizer.tolerance": {"fullname": "nnetsauce.Optimizer.tolerance", "modulename": "nnetsauce", "qualname": "Optimizer.tolerance", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Optimizer.verbose": {"fullname": "nnetsauce.Optimizer.verbose", "modulename": "nnetsauce", "qualname": "Optimizer.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Optimizer.opt": {"fullname": "nnetsauce.Optimizer.opt", "modulename": "nnetsauce", "qualname": "Optimizer.opt", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Optimizer.fit": {"fullname": "nnetsauce.Optimizer.fit", "modulename": "nnetsauce", "qualname": "Optimizer.fit", "kind": "function", "doc": "<p>Fit GLM model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>loss_func: loss function\n\nresponse: array-like, shape = [n_samples]\ntarget variable (used for subsampling)\n\nx0: array-like, shape = [n_features]\n    initial value provided to the optimizer\n\n**kwargs: additional parameters to be passed to\n        loss function\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">loss_func</span>, </span><span class=\"param\"><span class=\"n\">response</span>, </span><span class=\"param\"><span class=\"n\">x0</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Optimizer.one_hot_encode": {"fullname": "nnetsauce.Optimizer.one_hot_encode", "modulename": "nnetsauce", "qualname": "Optimizer.one_hot_encode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">n_classes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.RandomBagRegressor": {"fullname": "nnetsauce.RandomBagRegressor", "modulename": "nnetsauce", "qualname": "RandomBagRegressor", "kind": "class", "doc": "<p>Randomized 'Bagging' Regression model</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_estimators: int\n    number of boosting iterations\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model''s\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>voter_: dict\n    dictionary containing all the fitted base-learners\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">fetch_california_housing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.tree</span> <span class=\"kn\">import</span> <span class=\"n\">DecisionTreeRegressor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n\n<span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">fetch_california_housing</span><span class=\"p\">(</span><span class=\"n\">return_X_y</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">as_frame</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># split data into training test and test set</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Requires further tuning</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">DecisionTreeRegressor</span><span class=\"p\">(</span><span class=\"n\">max_depth</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">obj2</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">RandomBagRegressor</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                            <span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span>\n                            <span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span>\n                            <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">obj2</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">obj2</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)))</span> <span class=\"c1\"># RMSE</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.randombag.bag.RandomBag, sklearn.base.RegressorMixin"}, "nnetsauce.RandomBagRegressor.__init__": {"fullname": "nnetsauce.RandomBagRegressor.__init__", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.RandomBagRegressor.type_fit": {"fullname": "nnetsauce.RandomBagRegressor.type_fit", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.RandomBagRegressor.verbose": {"fullname": "nnetsauce.RandomBagRegressor.verbose", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.RandomBagRegressor.n_jobs": {"fullname": "nnetsauce.RandomBagRegressor.n_jobs", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.RandomBagRegressor.voter_": {"fullname": "nnetsauce.RandomBagRegressor.voter_", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.voter_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.RandomBagRegressor.fit": {"fullname": "nnetsauce.RandomBagRegressor.fit", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.fit", "kind": "function", "doc": "<p>Fit Random 'Bagging' model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.RandomBagRegressor.predict": {"fullname": "nnetsauce.RandomBagRegressor.predict", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.predict", "kind": "function", "doc": "<p>Predict for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.RandomBagRegressor.set_predict_request": {"fullname": "nnetsauce.RandomBagRegressor.set_predict_request", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.RandomBagRegressor.set_score_request": {"fullname": "nnetsauce.RandomBagRegressor.set_score_request", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.RandomBagClassifier": {"fullname": "nnetsauce.RandomBagClassifier", "modulename": "nnetsauce", "qualname": "RandomBagClassifier", "kind": "class", "doc": "<p>Randomized 'Bagging' Classification model</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_estimators: int\n    number of boosting iterations\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>voter_: dict\n    dictionary containing all the fitted base-learners\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/randombag_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/randombag_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.tree</span> <span class=\"kn\">import</span> <span class=\"n\">DecisionTreeClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># decision tree</span>\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">DecisionTreeClassifier</span><span class=\"p\">(</span><span class=\"n\">max_depth</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">RandomBagClassifier</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                                <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                <span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n                                <span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span>\n                                <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.randombag.bag.RandomBag, sklearn.base.ClassifierMixin"}, "nnetsauce.RandomBagClassifier.__init__": {"fullname": "nnetsauce.RandomBagClassifier.__init__", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.RandomBagClassifier.type_fit": {"fullname": "nnetsauce.RandomBagClassifier.type_fit", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.RandomBagClassifier.verbose": {"fullname": "nnetsauce.RandomBagClassifier.verbose", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.RandomBagClassifier.n_jobs": {"fullname": "nnetsauce.RandomBagClassifier.n_jobs", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.RandomBagClassifier.voter_": {"fullname": "nnetsauce.RandomBagClassifier.voter_", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.voter_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.RandomBagClassifier.fit": {"fullname": "nnetsauce.RandomBagClassifier.fit", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.fit", "kind": "function", "doc": "<p>Fit Random 'Bagging' model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.RandomBagClassifier.predict": {"fullname": "nnetsauce.RandomBagClassifier.predict", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.RandomBagClassifier.predict_proba": {"fullname": "nnetsauce.RandomBagClassifier.predict_proba", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.RandomBagClassifier.set_predict_request": {"fullname": "nnetsauce.RandomBagClassifier.set_predict_request", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"fullname": "nnetsauce.RandomBagClassifier.set_predict_proba_request", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.set_predict_proba_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.RandomBagClassifier.set_score_request": {"fullname": "nnetsauce.RandomBagClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Ridge2Regressor": {"fullname": "nnetsauce.Ridge2Regressor", "modulename": "nnetsauce", "qualname": "Ridge2Regressor", "kind": "class", "doc": "<p>Ridge regression with 2 regularization parameters derived from class Ridge</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nlambda1: float\n    regularization parameter on direct link\n\nlambda2: float\n    regularization parameter on hidden layer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    'cpu' or 'gpu' or 'tpu'\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: {array-like}\n    regression coefficients\n\ny_mean_: float\n    average response\n</code></pre>\n", "bases": "nnetsauce.ridge2.ridge2.Ridge2, sklearn.base.RegressorMixin"}, "nnetsauce.Ridge2Regressor.__init__": {"fullname": "nnetsauce.Ridge2Regressor.__init__", "modulename": "nnetsauce", "qualname": "Ridge2Regressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.Ridge2Regressor.type_fit": {"fullname": "nnetsauce.Ridge2Regressor.type_fit", "modulename": "nnetsauce", "qualname": "Ridge2Regressor.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Ridge2Regressor.fit": {"fullname": "nnetsauce.Ridge2Regressor.fit", "modulename": "nnetsauce", "qualname": "Ridge2Regressor.fit", "kind": "function", "doc": "<p>Fit Ridge model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Ridge2Regressor.predict": {"fullname": "nnetsauce.Ridge2Regressor.predict", "modulename": "nnetsauce", "qualname": "Ridge2Regressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Ridge2Regressor.set_score_request": {"fullname": "nnetsauce.Ridge2Regressor.set_score_request", "modulename": "nnetsauce", "qualname": "Ridge2Regressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Ridge2Classifier": {"fullname": "nnetsauce.Ridge2Classifier", "modulename": "nnetsauce", "qualname": "Ridge2Classifier", "kind": "class", "doc": "<p>Multinomial logit classification with 2 regularization parameters</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nlambda1: float\n    regularization parameter on direct link\n\nlambda2: float\n    regularization parameter on hidden layer\n\nsolver: str\n    optimization function \"L-BFGS-B\",  \"Newton-CG\",\n    \"trust-ncg\", \"L-BFGS-B-lstsq\", \"Newton-CG-lstsq\",\n    \"trust-ncg-lstsq\" (see scipy.optimize.minimize)\n    When using \"L-BFGS-B-lstsq\", \"Newton-CG-lstsq\", or \"trust-ncg-lstsq\",\n    the initial value for the optimization is set to the least squares solution\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: {array-like}\n    regression coefficients\n\nclasses_: {array-like}\n    unique classes in the target variable\n\nminloglik_: float\n    minimum value of the negative log-likelihood\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/ridge_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/ridge_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"c1\"># split data into training test and test set</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create the model with nnetsauce</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">Ridge2Classifier</span><span class=\"p\">(</span><span class=\"n\">lambda1</span> <span class=\"o\">=</span> <span class=\"mf\">6.90185578e+04</span><span class=\"p\">,</span>\n                            <span class=\"n\">lambda2</span> <span class=\"o\">=</span> <span class=\"mf\">3.17392781e+02</span><span class=\"p\">,</span>\n                            <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">,</span>\n                            <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                            <span class=\"n\">dropout</span> <span class=\"o\">=</span> <span class=\"mf\">3.62817383e-01</span><span class=\"p\">,</span>\n                            <span class=\"n\">type_clust</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;gmm&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fit the model on training set</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the accuracy on test set</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get area under the curve on test set (auc)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.ridge2.ridge2.Ridge2, sklearn.base.ClassifierMixin"}, "nnetsauce.Ridge2Classifier.__init__": {"fullname": "nnetsauce.Ridge2Classifier.__init__", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">solver</span><span class=\"o\">=</span><span class=\"s1\">&#39;L-BFGS-B&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.Ridge2Classifier.type_fit": {"fullname": "nnetsauce.Ridge2Classifier.type_fit", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Ridge2Classifier.solver": {"fullname": "nnetsauce.Ridge2Classifier.solver", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.solver", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Ridge2Classifier.beta_": {"fullname": "nnetsauce.Ridge2Classifier.beta_", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.beta_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Ridge2Classifier.classes_": {"fullname": "nnetsauce.Ridge2Classifier.classes_", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.classes_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Ridge2Classifier.minloglik_": {"fullname": "nnetsauce.Ridge2Classifier.minloglik_", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.minloglik_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Ridge2Classifier.loglik": {"fullname": "nnetsauce.Ridge2Classifier.loglik", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.loglik", "kind": "function", "doc": "<p>Log-likelihood for training data (X, Y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nY: array-like, shape = [n_samples]\n    One-hot encode target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Ridge2Classifier.fit": {"fullname": "nnetsauce.Ridge2Classifier.fit", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.fit", "kind": "function", "doc": "<p>Fit Ridge model to training data (X, y).</p>\n\n<p>for beta: regression coeffs (beta11, ..., beta1p, ..., betaK1, ..., betaKp)\nfor K classes and p covariates.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Ridge2Classifier.predict": {"fullname": "nnetsauce.Ridge2Classifier.predict", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Ridge2Classifier.predict_proba": {"fullname": "nnetsauce.Ridge2Classifier.predict_proba", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Ridge2Classifier.set_score_request": {"fullname": "nnetsauce.Ridge2Classifier.set_score_request", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Ridge2MultitaskClassifier": {"fullname": "nnetsauce.Ridge2MultitaskClassifier", "modulename": "nnetsauce", "qualname": "Ridge2MultitaskClassifier", "kind": "class", "doc": "<p>Multitask Ridge classification with 2 regularization parameters</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nlambda1: float\n    regularization parameter on direct link\n\nlambda2: float\n    regularization parameter on hidden layer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: {array-like}\n    regression coefficients\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/ridgemtask_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/ridgemtask_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">Ridge2MultitaskClassifier</span><span class=\"p\">(</span><span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">9.83730469e+01</span><span class=\"p\">),</span>\n                                <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">4.31054687e-01</span><span class=\"p\">,</span>\n                                <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">1.71484375e+00</span><span class=\"p\">),</span>\n                                <span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">1.24023438e+01</span><span class=\"p\">,</span> <span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">7.30263672e+03</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.ridge2.ridge2.Ridge2, sklearn.base.ClassifierMixin"}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"fullname": "nnetsauce.Ridge2MultitaskClassifier.__init__", "modulename": "nnetsauce", "qualname": "Ridge2MultitaskClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.Ridge2MultitaskClassifier.type_fit": {"fullname": "nnetsauce.Ridge2MultitaskClassifier.type_fit", "modulename": "nnetsauce", "qualname": "Ridge2MultitaskClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"fullname": "nnetsauce.Ridge2MultitaskClassifier.fit", "modulename": "nnetsauce", "qualname": "Ridge2MultitaskClassifier.fit", "kind": "function", "doc": "<p>Fit Ridge model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"fullname": "nnetsauce.Ridge2MultitaskClassifier.predict", "modulename": "nnetsauce", "qualname": "Ridge2MultitaskClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"fullname": "nnetsauce.Ridge2MultitaskClassifier.predict_proba", "modulename": "nnetsauce", "qualname": "Ridge2MultitaskClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"fullname": "nnetsauce.Ridge2MultitaskClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "Ridge2MultitaskClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.SubSampler": {"fullname": "nnetsauce.SubSampler", "modulename": "nnetsauce", "qualname": "SubSampler", "kind": "class", "doc": "<p>Subsampling class.</p>\n\n<p>Attributes:</p>\n\n<p>y: array-like, shape = [n_samples]\n       Target values.</p>\n\n<p>row_sample: double\n       subsampling fraction</p>\n\n<p>n_samples: int\n        subsampling by using the number of rows (supersedes row_sample)</p>\n\n<p>seed: int\n       reproductibility seed</p>\n\n<p>n_jobs: int\n        number of jobs to run in parallel</p>\n\n<p>verbose: bool\n        print progress messages and bars</p>\n"}, "nnetsauce.SubSampler.__init__": {"fullname": "nnetsauce.SubSampler.__init__", "modulename": "nnetsauce", "qualname": "SubSampler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">n_samples</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, "nnetsauce.SubSampler.y": {"fullname": "nnetsauce.SubSampler.y", "modulename": "nnetsauce", "qualname": "SubSampler.y", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.SubSampler.n_samples": {"fullname": "nnetsauce.SubSampler.n_samples", "modulename": "nnetsauce", "qualname": "SubSampler.n_samples", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.SubSampler.seed": {"fullname": "nnetsauce.SubSampler.seed", "modulename": "nnetsauce", "qualname": "SubSampler.seed", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.SubSampler.indices": {"fullname": "nnetsauce.SubSampler.indices", "modulename": "nnetsauce", "qualname": "SubSampler.indices", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.SubSampler.n_jobs": {"fullname": "nnetsauce.SubSampler.n_jobs", "modulename": "nnetsauce", "qualname": "SubSampler.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.SubSampler.verbose": {"fullname": "nnetsauce.SubSampler.verbose", "modulename": "nnetsauce", "qualname": "SubSampler.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.SubSampler.subsample": {"fullname": "nnetsauce.SubSampler.subsample", "modulename": "nnetsauce", "qualname": "SubSampler.subsample", "kind": "function", "doc": "<p>Returns indices of subsampled input data.</p>\n\n<p>Examples:</p>\n\n<ul>\n    <li> <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/nnetsauce/demo/thierrymoudiki_20240105_subsampling.ipynb\">20240105_subsampling.ipynb</a> </li>\n    <li> <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/nnetsauce/demo/thierrymoudiki_20240131_subsampling_nsamples.ipynb\">20240131_subsampling_nsamples.ipynb</a> </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.base": {"fullname": "nnetsauce.base", "modulename": "nnetsauce.base", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.base.Base": {"fullname": "nnetsauce.base.Base", "modulename": "nnetsauce.base", "qualname": "Base", "kind": "class", "doc": "<p>Base model from which all the other classes inherit.</p>\n\n<p>This class contains the most important data preprocessing/feature engineering methods.</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for hidden layer nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or\n    not (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original features are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for type_clust='kmeans' or type_clust='gmm'\n    clustering (could be 0: no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot);\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax') or robust scaling ('robust')\n\ncol_sample: float\n    percentage of features randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform', clustering and dropout\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n", "bases": "sklearn.base.BaseEstimator"}, "nnetsauce.base.Base.__init__": {"fullname": "nnetsauce.base.Base.__init__", "modulename": "nnetsauce.base", "qualname": "Base.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.base.Base.n_hidden_features": {"fullname": "nnetsauce.base.Base.n_hidden_features", "modulename": "nnetsauce.base", "qualname": "Base.n_hidden_features", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.activation_name": {"fullname": "nnetsauce.base.Base.activation_name", "modulename": "nnetsauce.base", "qualname": "Base.activation_name", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.a": {"fullname": "nnetsauce.base.Base.a", "modulename": "nnetsauce.base", "qualname": "Base.a", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.nodes_sim": {"fullname": "nnetsauce.base.Base.nodes_sim", "modulename": "nnetsauce.base", "qualname": "Base.nodes_sim", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.bias": {"fullname": "nnetsauce.base.Base.bias", "modulename": "nnetsauce.base", "qualname": "Base.bias", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.seed": {"fullname": "nnetsauce.base.Base.seed", "modulename": "nnetsauce.base", "qualname": "Base.seed", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.backend": {"fullname": "nnetsauce.base.Base.backend", "modulename": "nnetsauce.base", "qualname": "Base.backend", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.dropout": {"fullname": "nnetsauce.base.Base.dropout", "modulename": "nnetsauce.base", "qualname": "Base.dropout", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.direct_link": {"fullname": "nnetsauce.base.Base.direct_link", "modulename": "nnetsauce.base", "qualname": "Base.direct_link", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.cluster_encode": {"fullname": "nnetsauce.base.Base.cluster_encode", "modulename": "nnetsauce.base", "qualname": "Base.cluster_encode", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.type_clust": {"fullname": "nnetsauce.base.Base.type_clust", "modulename": "nnetsauce.base", "qualname": "Base.type_clust", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.type_scaling": {"fullname": "nnetsauce.base.Base.type_scaling", "modulename": "nnetsauce.base", "qualname": "Base.type_scaling", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.col_sample": {"fullname": "nnetsauce.base.Base.col_sample", "modulename": "nnetsauce.base", "qualname": "Base.col_sample", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.row_sample": {"fullname": "nnetsauce.base.Base.row_sample", "modulename": "nnetsauce.base", "qualname": "Base.row_sample", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.n_clusters": {"fullname": "nnetsauce.base.Base.n_clusters", "modulename": "nnetsauce.base", "qualname": "Base.n_clusters", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.subsampler_": {"fullname": "nnetsauce.base.Base.subsampler_", "modulename": "nnetsauce.base", "qualname": "Base.subsampler_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.index_col_": {"fullname": "nnetsauce.base.Base.index_col_", "modulename": "nnetsauce.base", "qualname": "Base.index_col_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.index_row_": {"fullname": "nnetsauce.base.Base.index_row_", "modulename": "nnetsauce.base", "qualname": "Base.index_row_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.clustering_obj_": {"fullname": "nnetsauce.base.Base.clustering_obj_", "modulename": "nnetsauce.base", "qualname": "Base.clustering_obj_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.clustering_scaler_": {"fullname": "nnetsauce.base.Base.clustering_scaler_", "modulename": "nnetsauce.base", "qualname": "Base.clustering_scaler_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.nn_scaler_": {"fullname": "nnetsauce.base.Base.nn_scaler_", "modulename": "nnetsauce.base", "qualname": "Base.nn_scaler_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.scaler_": {"fullname": "nnetsauce.base.Base.scaler_", "modulename": "nnetsauce.base", "qualname": "Base.scaler_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.encoder_": {"fullname": "nnetsauce.base.Base.encoder_", "modulename": "nnetsauce.base", "qualname": "Base.encoder_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.W_": {"fullname": "nnetsauce.base.Base.W_", "modulename": "nnetsauce.base", "qualname": "Base.W_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.X_": {"fullname": "nnetsauce.base.Base.X_", "modulename": "nnetsauce.base", "qualname": "Base.X_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.y_": {"fullname": "nnetsauce.base.Base.y_", "modulename": "nnetsauce.base", "qualname": "Base.y_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.y_mean_": {"fullname": "nnetsauce.base.Base.y_mean_", "modulename": "nnetsauce.base", "qualname": "Base.y_mean_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.beta_": {"fullname": "nnetsauce.base.Base.beta_", "modulename": "nnetsauce.base", "qualname": "Base.beta_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.activation_func": {"fullname": "nnetsauce.base.Base.activation_func", "modulename": "nnetsauce.base", "qualname": "Base.activation_func", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.base.Base.encode_clusters": {"fullname": "nnetsauce.base.Base.encode_clusters", "modulename": "nnetsauce.base", "qualname": "Base.encode_clusters", "kind": "function", "doc": "<p>Create new covariates with kmeans or GMM clustering</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\npredict: boolean\n    is False on training set and True on test set\n\n**kwargs:\n    additional parameters to be passed to the\n    clustering method\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>Clusters' matrix, one-hot encoded: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">predict</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.base.Base.create_layer": {"fullname": "nnetsauce.base.Base.create_layer", "modulename": "nnetsauce.base", "qualname": "Base.create_layer", "kind": "function", "doc": "<p>Create hidden layer.</p>\n\n<p>Parameters:</p>\n\n<pre><code>scaled_X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\nW: {array-like}, shape = [n_features, hidden_features]\n    if provided, constructs the hidden layer with W; otherwise computed internally\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>Hidden layer matrix: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scaled_X</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.base.Base.cook_training_set": {"fullname": "nnetsauce.base.Base.cook_training_set", "modulename": "nnetsauce.base", "qualname": "Base.cook_training_set", "kind": "function", "doc": "<p>Create new hidden features for training set, with hidden layer, center the response.</p>\n\n<p>Parameters:</p>\n\n<pre><code>y: array-like, shape = [n_samples]\n    Target values\n\nX: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\nW: {array-like}, shape = [n_features, hidden_features]\n    if provided, constructs the hidden layer via W\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>(centered response, direct link + hidden layer matrix): {tuple}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.base.Base.cook_test_set": {"fullname": "nnetsauce.base.Base.cook_test_set", "modulename": "nnetsauce.base", "qualname": "Base.cook_test_set", "kind": "function", "doc": "<p>Transform data from test set, with hidden layer.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\n**kwargs: additional parameters to be passed to self.encode_cluster\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>Transformed test set : {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.base.Base.score": {"fullname": "nnetsauce.base.Base.score", "modulename": "nnetsauce.base", "qualname": "Base.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',\n                'neg_mean_squared_error', 'neg_mean_squared_log_error',\n                'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns:</p>\n\n<p>model scores: {array-like}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.base.Base.set_score_request": {"fullname": "nnetsauce.base.Base.set_score_request", "modulename": "nnetsauce.base", "qualname": "Base.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.base.BaseRegressor": {"fullname": "nnetsauce.base.BaseRegressor", "modulename": "nnetsauce.base", "qualname": "BaseRegressor", "kind": "class", "doc": "<p>Random Vector Functional Link Network regression without shrinkage</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for hidden layer nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or\n    not (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original features are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for type_clust='kmeans' or type_clust='gmm'\n    clustering (could be 0: no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot);\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of features randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform', clustering and dropout\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: vector\n    regression coefficients\n\nGCV_: float\n    Generalized Cross-Validation error\n</code></pre>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.RegressorMixin"}, "nnetsauce.base.BaseRegressor.__init__": {"fullname": "nnetsauce.base.BaseRegressor.__init__", "modulename": "nnetsauce.base", "qualname": "BaseRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.base.BaseRegressor.fit": {"fullname": "nnetsauce.base.BaseRegressor.fit", "modulename": "nnetsauce.base", "qualname": "BaseRegressor.fit", "kind": "function", "doc": "<p>Fit BaseRegressor to training data (X, y)</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\n**kwargs: additional parameters to be passed to self.cook_training_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.base.BaseRegressor.predict": {"fullname": "nnetsauce.base.BaseRegressor.predict", "modulename": "nnetsauce.base", "qualname": "BaseRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\n**kwargs: additional parameters to be passed to self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.base.BaseRegressor.set_score_request": {"fullname": "nnetsauce.base.BaseRegressor.set_score_request", "modulename": "nnetsauce.base", "qualname": "BaseRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.boosting": {"fullname": "nnetsauce.boosting", "modulename": "nnetsauce.boosting", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.boosting.AdaBoostClassifier": {"fullname": "nnetsauce.boosting.AdaBoostClassifier", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier", "kind": "class", "doc": "<p>AdaBoost Classification (SAMME) model class derived from class Boosting</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_estimators: int\n    number of boosting iterations\n\nlearning_rate: float\n    learning rate of the boosting procedure\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nreg_lambda: float\n    regularization parameter for weights\n\nreg_alpha: float\n    controls compromize between l1 and l2 norm of weights\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nverbose: int\n    0 for no output, 1 for a progress bar (default is 1)\n\nmethod: str\n    type of Adaboost method, 'SAMME' (discrete) or 'SAMME.R' (real)\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>alpha_: list\n    AdaBoost coefficients alpha_m\n\nbase_learners_: dict\n    a dictionary containing the base learners\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/adaboost_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/adaboost_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LogisticRegression</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># SAMME.R</span>\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">LogisticRegression</span><span class=\"p\">(</span><span class=\"n\">solver</span><span class=\"o\">=</span><span class=\"s1\">&#39;liblinear&#39;</span><span class=\"p\">,</span> <span class=\"n\">multi_class</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ovr&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">AdaBoostClassifier</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span>\n                                <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">11.22338867</span><span class=\"p\">),</span>\n                                <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                <span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.01126343</span><span class=\"p\">,</span>\n                                <span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mf\">0.72684326</span><span class=\"p\">,</span> <span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mf\">0.86429443</span><span class=\"p\">,</span>\n                                <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">0.63078613</span><span class=\"p\">,</span> <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                                <span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s2\">&quot;gmm&quot;</span><span class=\"p\">,</span>\n                                <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n                                <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s2\">&quot;SAMME.R&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.boosting.bst.Boosting, sklearn.base.ClassifierMixin"}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"fullname": "nnetsauce.boosting.AdaBoostClassifier.__init__", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">reg_lambda</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">reg_alpha</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;SAMME&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.boosting.AdaBoostClassifier.type_fit": {"fullname": "nnetsauce.boosting.AdaBoostClassifier.type_fit", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.boosting.AdaBoostClassifier.verbose": {"fullname": "nnetsauce.boosting.AdaBoostClassifier.verbose", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.boosting.AdaBoostClassifier.method": {"fullname": "nnetsauce.boosting.AdaBoostClassifier.method", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.method", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.boosting.AdaBoostClassifier.reg_lambda": {"fullname": "nnetsauce.boosting.AdaBoostClassifier.reg_lambda", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.reg_lambda", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.boosting.AdaBoostClassifier.reg_alpha": {"fullname": "nnetsauce.boosting.AdaBoostClassifier.reg_alpha", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.reg_alpha", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.boosting.AdaBoostClassifier.alpha_": {"fullname": "nnetsauce.boosting.AdaBoostClassifier.alpha_", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.alpha_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.boosting.AdaBoostClassifier.base_learners_": {"fullname": "nnetsauce.boosting.AdaBoostClassifier.base_learners_", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.base_learners_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"fullname": "nnetsauce.boosting.AdaBoostClassifier.fit", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.fit", "kind": "function", "doc": "<p>Fit Boosting model to training data (X, y).</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code> self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"fullname": "nnetsauce.boosting.AdaBoostClassifier.predict", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n      self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"fullname": "nnetsauce.boosting.AdaBoostClassifier.predict_proba", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n      self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"fullname": "nnetsauce.boosting.AdaBoostClassifier.set_fit_request", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"fullname": "nnetsauce.boosting.AdaBoostClassifier.set_score_request", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.custom": {"fullname": "nnetsauce.custom", "modulename": "nnetsauce.custom", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.custom.Custom": {"fullname": "nnetsauce.custom.Custom", "modulename": "nnetsauce.custom", "qualname": "Custom", "kind": "class", "doc": "<p>Custom model class derived from class Base</p>\n\n<p>This class is used to 'augment' any model with transformed features.</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n", "bases": "nnetsauce.base.base.Base"}, "nnetsauce.custom.Custom.__init__": {"fullname": "nnetsauce.custom.Custom.__init__", "modulename": "nnetsauce.custom", "qualname": "Custom.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.custom.Custom.obj": {"fullname": "nnetsauce.custom.Custom.obj", "modulename": "nnetsauce.custom", "qualname": "Custom.obj", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.custom.Custom.set_score_request": {"fullname": "nnetsauce.custom.Custom.set_score_request", "modulename": "nnetsauce.custom", "qualname": "Custom.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.custom.CustomClassifier": {"fullname": "nnetsauce.custom.CustomClassifier", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier", "kind": "class", "doc": "<p>Custom Classification model</p>\n\n<p>Attributes:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model''s\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Examples:</p>\n\n<p>Note: it's better to use the <code>DeepClassifier</code> or <code>LazyDeepClassifier</code> classes directly</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.ensemble</span> <span class=\"kn\">import</span> <span class=\"n\">RandomForestClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_digits</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">digits</span> <span class=\"o\">=</span> <span class=\"n\">load_digits</span><span class=\"p\">()</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># layer 1 (base layer) ----</span>\n<span class=\"n\">layer1_regr</span> <span class=\"o\">=</span> <span class=\"n\">RandomForestClassifier</span><span class=\"p\">(</span><span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n\n<span class=\"n\">layer1_regr</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Accuracy in layer 1</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">layer1_regr</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># layer 2 using layer 1 ----</span>\n<span class=\"n\">layer2_regr</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">CustomClassifier</span><span class=\"p\">(</span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">layer1_regr</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                        <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                        <span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;uniform&#39;</span><span class=\"p\">,</span> <span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">layer2_regr</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Accuracy in layer 2</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">layer2_regr</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># layer 3 using layer 2 ----</span>\n<span class=\"n\">layer3_regr</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">CustomClassifier</span><span class=\"p\">(</span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">layer2_regr</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n                        <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">,</span>\n                        <span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;uniform&#39;</span><span class=\"p\">,</span> <span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">layer3_regr</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Accuracy in layer 3</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">layer3_regr</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.ClassifierMixin"}, "nnetsauce.custom.CustomClassifier.__init__": {"fullname": "nnetsauce.custom.CustomClassifier.__init__", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.custom.CustomClassifier.type_fit": {"fullname": "nnetsauce.custom.CustomClassifier.type_fit", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.custom.CustomClassifier.fit": {"fullname": "nnetsauce.custom.CustomClassifier.fit", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier.fit", "kind": "function", "doc": "<p>Fit custom model to training data (X, y).</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n            self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.custom.CustomClassifier.predict": {"fullname": "nnetsauce.custom.CustomClassifier.predict", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.custom.CustomClassifier.predict_proba": {"fullname": "nnetsauce.custom.CustomClassifier.predict_proba", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"fullname": "nnetsauce.custom.CustomClassifier.set_fit_request", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.custom.CustomClassifier.set_score_request": {"fullname": "nnetsauce.custom.CustomClassifier.set_score_request", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.custom.CustomRegressor": {"fullname": "nnetsauce.custom.CustomRegressor", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor", "kind": "class", "doc": "<p>Custom Regression model</p>\n\n<p>This class is used to 'augment' any regression model with transformed features.</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ntype_pi: str.\n    type of prediction interval; currently \"kde\" (default) or \"bootstrap\".\n    Used only in `self.predict`, for `self.replications` &gt; 0 and `self.kernel`\n    in ('gaussian', 'tophat'). Default is `None`.\n\nreplications: int.\n    number of replications (if needed) for predictive simulation.\n    Used only in `self.predict`, for `self.kernel` in ('gaussian',\n    'tophat') and `self.type_pi = 'kde'`. Default is `None`.\n\nkernel: str.\n    the kernel to use for kernel density estimation (used for predictive\n    simulation in `self.predict`, with `method='splitconformal'` and\n    `type_pi = 'kde'`). Currently, either 'gaussian' or 'tophat'.\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\ntype_fit: str\n    'regression'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See <a href=\"https://thierrymoudiki.github.io/blog/2024/03/18/python/conformal-and-bayesian-regression\">https://thierrymoudiki.github.io/blog/2024/03/18/python/conformal-and-bayesian-regression</a></p>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.RegressorMixin"}, "nnetsauce.custom.CustomRegressor.__init__": {"fullname": "nnetsauce.custom.CustomRegressor.__init__", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">type_pi</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.custom.CustomRegressor.type_fit": {"fullname": "nnetsauce.custom.CustomRegressor.type_fit", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.custom.CustomRegressor.type_pi": {"fullname": "nnetsauce.custom.CustomRegressor.type_pi", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.type_pi", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.custom.CustomRegressor.replications": {"fullname": "nnetsauce.custom.CustomRegressor.replications", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.replications", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.custom.CustomRegressor.kernel": {"fullname": "nnetsauce.custom.CustomRegressor.kernel", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.kernel", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.custom.CustomRegressor.fit": {"fullname": "nnetsauce.custom.CustomRegressor.fit", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.fit", "kind": "function", "doc": "<p>Fit custom model to training data (X, y).</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n    self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.custom.CustomRegressor.predict": {"fullname": "nnetsauce.custom.CustomRegressor.predict", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nlevel: int\n    Level of confidence (default = 95)\n\nmethod: str\n    `None`, or 'splitconformal', 'localconformal'\n    prediction (if you specify `return_pi = True`)\n\n**kwargs: additional parameters\n        `return_pi = True` for conformal prediction,\n        with `method` in ('splitconformal', 'localconformal')\n        or `return_std = True` for `self.obj` in\n        (`sklearn.linear_model.BayesianRidge`,\n        `sklearn.linear_model.ARDRegressor`,\n        `sklearn.gaussian_process.GaussianProcessRegressor`)`\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions:\n    an array if uncertainty quantification is not requested,\n      or a tuple if with prediction intervals and simulations\n      if `return_std = True` (mean, standard deviation,\n      lower and upper prediction interval) or `return_pi = True`\n      ()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span>, </span><span class=\"param\"><span class=\"n\">method</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"fullname": "nnetsauce.custom.CustomRegressor.set_fit_request", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"fullname": "nnetsauce.custom.CustomRegressor.set_predict_request", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.custom.CustomRegressor.set_score_request": {"fullname": "nnetsauce.custom.CustomRegressor.set_score_request", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.datasets": {"fullname": "nnetsauce.datasets", "modulename": "nnetsauce.datasets", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.datasets.Downloader": {"fullname": "nnetsauce.datasets.Downloader", "modulename": "nnetsauce.datasets", "qualname": "Downloader", "kind": "class", "doc": "<p>Download datasets from data sources (R-universe for now)</p>\n"}, "nnetsauce.datasets.Downloader.pkgname": {"fullname": "nnetsauce.datasets.Downloader.pkgname", "modulename": "nnetsauce.datasets", "qualname": "Downloader.pkgname", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.datasets.Downloader.dataset": {"fullname": "nnetsauce.datasets.Downloader.dataset", "modulename": "nnetsauce.datasets", "qualname": "Downloader.dataset", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.datasets.Downloader.source": {"fullname": "nnetsauce.datasets.Downloader.source", "modulename": "nnetsauce.datasets", "qualname": "Downloader.source", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.datasets.Downloader.url": {"fullname": "nnetsauce.datasets.Downloader.url", "modulename": "nnetsauce.datasets", "qualname": "Downloader.url", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.datasets.Downloader.request": {"fullname": "nnetsauce.datasets.Downloader.request", "modulename": "nnetsauce.datasets", "qualname": "Downloader.request", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.datasets.Downloader.download": {"fullname": "nnetsauce.datasets.Downloader.download", "modulename": "nnetsauce.datasets", "qualname": "Downloader.download", "kind": "function", "doc": "<p>Download datasets from data sources (R-universe for now)</p>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n\n<span class=\"n\">downloader</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">Downloader</span><span class=\"p\">()</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">downloader</span><span class=\"o\">.</span><span class=\"n\">download</span><span class=\"p\">(</span><span class=\"n\">pkgname</span><span class=\"o\">=</span><span class=\"s2\">&quot;MASS&quot;</span><span class=\"p\">,</span> <span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"s2\">&quot;Boston&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">pkgname</span><span class=\"o\">=</span><span class=\"s1\">&#39;MASS&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">dataset</span><span class=\"o\">=</span><span class=\"s1\">&#39;Boston&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">source</span><span class=\"o\">=</span><span class=\"s1\">&#39;https://cran.r-universe.dev/&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.deep": {"fullname": "nnetsauce.deep", "modulename": "nnetsauce.deep", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.deep.DeepClassifier": {"fullname": "nnetsauce.deep.DeepClassifier", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier", "kind": "class", "doc": "<p>Deep Classifier</p>\n\n<p>Parameters:</p>\n\n<pre><code>verbose : int, optional (default=0)\n    Monitor progress when fitting.\n</code></pre>\n\n<p>Examples:\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LogisticRegressionCV</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n    <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n    <span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n    <span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">LogisticRegressionCV</span><span class=\"p\">()</span>\n    <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">DeepClassifier</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n    <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">),</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n    </code></pre>\n    </div></p>\n", "bases": "nnetsauce.custom.customClassifier.CustomClassifier, sklearn.base.ClassifierMixin"}, "nnetsauce.deep.DeepClassifier.__init__": {"fullname": "nnetsauce.deep.DeepClassifier.__init__", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.deep.DeepClassifier.stacked_obj": {"fullname": "nnetsauce.deep.DeepClassifier.stacked_obj", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.stacked_obj", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.deep.DeepClassifier.verbose": {"fullname": "nnetsauce.deep.DeepClassifier.verbose", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.deep.DeepClassifier.n_layers": {"fullname": "nnetsauce.deep.DeepClassifier.n_layers", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.n_layers", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.deep.DeepClassifier.fit": {"fullname": "nnetsauce.deep.DeepClassifier.fit", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.fit", "kind": "function", "doc": "<p>Fit Classification algorithms to X and y.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A fitted object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.deep.DeepClassifier.predict": {"fullname": "nnetsauce.deep.DeepClassifier.predict", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.deep.DeepClassifier.predict_proba": {"fullname": "nnetsauce.deep.DeepClassifier.predict_proba", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.deep.DeepClassifier.score": {"fullname": "nnetsauce.deep.DeepClassifier.score", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',\n                'neg_mean_squared_error', 'neg_mean_squared_log_error',\n                'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns:</p>\n\n<p>model scores: {array-like}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.deep.DeepClassifier.set_score_request": {"fullname": "nnetsauce.deep.DeepClassifier.set_score_request", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.deep.DeepRegressor": {"fullname": "nnetsauce.deep.DeepRegressor", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor", "kind": "class", "doc": "<p>Deep Regressor</p>\n\n<p>Parameters:</p>\n\n<pre><code>verbose : int, optional (default=0)\n    Monitor progress when fitting.\n</code></pre>\n\n<p>Examples:\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_diabetes</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">RidgeCV</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_diabetes</span><span class=\"p\">()</span>\n    <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n    <span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n    <span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n    <span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">RidgeCV</span><span class=\"p\">()</span>\n    <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">DeepRegressor</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n    <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">),</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n    </code></pre>\n    </div></p>\n", "bases": "nnetsauce.custom.customRegressor.CustomRegressor, sklearn.base.RegressorMixin"}, "nnetsauce.deep.DeepRegressor.__init__": {"fullname": "nnetsauce.deep.DeepRegressor.__init__", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.deep.DeepRegressor.stacked_obj": {"fullname": "nnetsauce.deep.DeepRegressor.stacked_obj", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor.stacked_obj", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.deep.DeepRegressor.verbose": {"fullname": "nnetsauce.deep.DeepRegressor.verbose", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.deep.DeepRegressor.n_layers": {"fullname": "nnetsauce.deep.DeepRegressor.n_layers", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor.n_layers", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.deep.DeepRegressor.fit": {"fullname": "nnetsauce.deep.DeepRegressor.fit", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X and y.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A fitted object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.deep.DeepRegressor.predict": {"fullname": "nnetsauce.deep.DeepRegressor.predict", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nlevel: int\n    Level of confidence (default = 95)\n\nmethod: str\n    `None`, or 'splitconformal', 'localconformal'\n    prediction (if you specify `return_pi = True`)\n\n**kwargs: additional parameters\n        `return_pi = True` for conformal prediction,\n        with `method` in ('splitconformal', 'localconformal')\n        or `return_std = True` for `self.obj` in\n        (`sklearn.linear_model.BayesianRidge`,\n        `sklearn.linear_model.ARDRegressor`,\n        `sklearn.gaussian_process.GaussianProcessRegressor`)`\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions:\n    an array if uncertainty quantification is not requested,\n      or a tuple if with prediction intervals and simulations\n      if `return_std = True` (mean, standard deviation,\n      lower and upper prediction interval) or `return_pi = True`\n      ()\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.deep.DeepRegressor.score": {"fullname": "nnetsauce.deep.DeepRegressor.score", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',\n                'neg_mean_squared_error', 'neg_mean_squared_log_error',\n                'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns:</p>\n\n<p>model scores: {array-like}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.deep.DeepRegressor.set_score_request": {"fullname": "nnetsauce.deep.DeepRegressor.set_score_request", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.deep.DeepMTS": {"fullname": "nnetsauce.deep.DeepMTS", "modulename": "nnetsauce.deep", "qualname": "DeepMTS", "kind": "class", "doc": "<p>Univariate and multivariate time series (DeepMTS) forecasting with Quasi-Randomized networks (Work in progress /!)</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object.\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict()).\n\nn_layers: int.\n    number of layers in the neural network.\n\nn_hidden_features: int.\n    number of nodes in the hidden layer.\n\nactivation_name: str.\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'.\n\na: float.\n    hyperparameter for 'prelu' or 'elu' activation function.\n\nnodes_sim: str.\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'.\n\nbias: boolean.\n    indicates if the hidden layer contains a bias term (True) or not\n    (False).\n\ndropout: float.\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training.\n\ndirect_link: boolean.\n    indicates if the original predictors are included (True) in model's fitting or not (False).\n\nn_clusters: int.\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0: no clustering).\n\ncluster_encode: bool.\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding.\n\ntype_clust: str.\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm').\n\ntype_scaling: a tuple of 3 strings.\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax').\n\nlags: int.\n    number of lags used for each time series.\n\nreplications: int.\n    number of replications (if needed, for predictive simulation). Default is 'None'.\n\nkernel: str.\n    the kernel to use for residuals density estimation (used for predictive simulation). Currently, either 'gaussian' or 'tophat'.\n\nagg: str.\n    either \"mean\" or \"median\" for simulation of bootstrap aggregating\n\nseed: int.\n    reproducibility seed for nodes_sim=='uniform' or predictive simulation.\n\nbackend: str.\n    \"cpu\" or \"gpu\" or \"tpu\".\n\nverbose: int.\n    0: not printing; 1: printing\n\nshow_progress: bool.\n    True: progress bar when fitting each series; False: no progress bar when fitting each series\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>fit_objs_: dict\n    objects adjusted to each individual time series\n\ny_: {array-like}\n    DeepMTS responses (most recent observations first)\n\nX_: {array-like}\n    DeepMTS lags\n\nxreg_: {array-like}\n    external regressors\n\ny_means_: dict\n    a dictionary of each series mean values\n\npreds_: {array-like}\n    successive model predictions\n\npreds_std_: {array-like}\n    standard deviation around the predictions\n\nreturn_std_: boolean\n    return uncertainty or not (set in predict)\n\ndf_: data frame\n    the input data frame, in case a data.frame is provided to `fit`\n</code></pre>\n\n<p>Examples:</p>\n\n<p>Example 1:\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n    <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n <br />\n    <span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n    <span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\"><em></span><span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n    <span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">25</span><span class=\"o\"></em></span><span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n <br />\n    <span class=\"c1\"># Adjust Bayesian Ridge</span>\n    <span class=\"n\">regr4</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">BayesianRidge</span><span class=\"p\">()</span>\n    <span class=\"n\">obj_DeepMTS</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">DeepMTS</span><span class=\"p\">(</span><span class=\"n\">regr4</span><span class=\"p\">,</span> <span class=\"n\">lags</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">())</span>\n <br />\n    <span class=\"c1\"># with credible intervals</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n <br />\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n    </code></pre>\n    </div></p>\n\n<p>Example 2:\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n    <span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n <br />\n    <span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n    <span class=\"s1\">&#39;date&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;2001-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2002-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2003-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2004-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2005-01-01&#39;</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;series1&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mf\">35.6</span><span class=\"p\">,</span> <span class=\"mf\">33.3</span><span class=\"p\">,</span> <span class=\"mf\">38.1</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;series2&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">5.5</span><span class=\"p\">,</span> <span class=\"mf\">5.6</span><span class=\"p\">,</span> <span class=\"mf\">6.3</span><span class=\"p\">,</span> <span class=\"mf\">5.1</span><span class=\"p\">],</span>\n    <span class=\"s1\">&#39;series3&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mf\">100.5</span><span class=\"p\">,</span> <span class=\"mf\">100.6</span><span class=\"p\">,</span> <span class=\"mf\">100.2</span><span class=\"p\">,</span> <span class=\"mf\">100.1</span><span class=\"p\">]}</span>\n    <span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;date&#39;</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n <br />\n    <span class=\"c1\"># Adjust Bayesian Ridge</span>\n    <span class=\"n\">regr5</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">BayesianRidge</span><span class=\"p\">()</span>\n    <span class=\"n\">obj_DeepMTS</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">DeepMTS</span><span class=\"p\">(</span><span class=\"n\">regr5</span><span class=\"p\">,</span> <span class=\"n\">lags</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n    <span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">())</span>\n <br />\n    <span class=\"c1\"># with credible intervals</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n <br />\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n    </code></pre>\n    </div></p>\n", "bases": "nnetsauce.mts.mts.MTS"}, "nnetsauce.deep.DeepMTS.__init__": {"fullname": "nnetsauce.deep.DeepMTS.__init__", "modulename": "nnetsauce.deep", "qualname": "DeepMTS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">type_pi</span><span class=\"o\">=</span><span class=\"s1\">&#39;kde&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, "nnetsauce.deep.DeepMTS.n_layers": {"fullname": "nnetsauce.deep.DeepMTS.n_layers", "modulename": "nnetsauce.deep", "qualname": "DeepMTS.n_layers", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.deep.DeepMTS.obj": {"fullname": "nnetsauce.deep.DeepMTS.obj", "modulename": "nnetsauce.deep", "qualname": "DeepMTS.obj", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.deep.DeepMTS.set_fit_request": {"fullname": "nnetsauce.deep.DeepMTS.set_fit_request", "modulename": "nnetsauce.deep", "qualname": "DeepMTS.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.deep.DeepMTS.set_predict_request": {"fullname": "nnetsauce.deep.DeepMTS.set_predict_request", "modulename": "nnetsauce.deep", "qualname": "DeepMTS.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.deep.DeepMTS.set_score_request": {"fullname": "nnetsauce.deep.DeepMTS.set_score_request", "modulename": "nnetsauce.deep", "qualname": "DeepMTS.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.demo": {"fullname": "nnetsauce.demo", "modulename": "nnetsauce.demo", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.glm": {"fullname": "nnetsauce.glm", "modulename": "nnetsauce.glm", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.glm.GLMClassifier": {"fullname": "nnetsauce.glm.GLMClassifier", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier", "kind": "class", "doc": "<p>Generalized 'linear' models using quasi-randomized networks (classification)</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nlambda1: float\n    regularization parameter for GLM coefficients on original features\n\nalpha1: float\n    controls compromize between l1 and l2 norm of GLM coefficients on original features\n\nlambda2: float\n    regularization parameter for GLM coefficients on nonlinear features\n\nalpha2: float\n    controls compromize between l1 and l2 norm of GLM coefficients on nonlinear features\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\noptimizer: object\n    optimizer, from class nnetsauce.Optimizer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: vector\n    regression coefficients\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/glm_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/glm_classification.py</a></p>\n", "bases": "nnetsauce.glm.glm.GLM, sklearn.base.ClassifierMixin"}, "nnetsauce.glm.GLMClassifier.__init__": {"fullname": "nnetsauce.glm.GLMClassifier.__init__", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">alpha1</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">alpha2</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">family</span><span class=\"o\">=</span><span class=\"s1\">&#39;expit&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span><span class=\"o\">=&lt;</span><span class=\"n\">nnetsauce</span><span class=\"o\">.</span><span class=\"n\">optimizers</span><span class=\"o\">.</span><span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">Optimizer</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span></span>)</span>"}, "nnetsauce.glm.GLMClassifier.family": {"fullname": "nnetsauce.glm.GLMClassifier.family", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.family", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.glm.GLMClassifier.logit_loss": {"fullname": "nnetsauce.glm.GLMClassifier.logit_loss", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.logit_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"fullname": "nnetsauce.glm.GLMClassifier.expit_erf_loss", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.expit_erf_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.glm.GLMClassifier.loss_func": {"fullname": "nnetsauce.glm.GLMClassifier.loss_func", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.loss_func", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span>,</span><span class=\"param\">\t<span class=\"n\">group_index</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">row_index</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">type_loss</span><span class=\"o\">=</span><span class=\"s1\">&#39;logit&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.glm.GLMClassifier.fit": {"fullname": "nnetsauce.glm.GLMClassifier.fit", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.fit", "kind": "function", "doc": "<p>Fit GLM model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.glm.GLMClassifier.predict": {"fullname": "nnetsauce.glm.GLMClassifier.predict", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.glm.GLMClassifier.predict_proba": {"fullname": "nnetsauce.glm.GLMClassifier.predict_proba", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.glm.GLMClassifier.set_score_request": {"fullname": "nnetsauce.glm.GLMClassifier.set_score_request", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.glm.GLMRegressor": {"fullname": "nnetsauce.glm.GLMRegressor", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor", "kind": "class", "doc": "<p>Generalized 'linear' models using quasi-randomized networks (regression)</p>\n\n<p>Attributes:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nlambda1: float\n    regularization parameter for GLM coefficients on original features\n\nalpha1: float\n    controls compromize between l1 and l2 norm of GLM coefficients on original features\n\nlambda2: float\n    regularization parameter for GLM coefficients on nonlinear features\n\nalpha2: float\n    controls compromize between l1 and l2 norm of GLM coefficients on nonlinear features\n\nfamily: str\n    \"gaussian\", \"laplace\" or \"poisson\" (for now)\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\noptimizer: object\n    optimizer, from class nnetsauce.utils.Optimizer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: vector\n    regression coefficients\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/glm_regression.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/glm_regression.py</a></p>\n", "bases": "nnetsauce.glm.glm.GLM, sklearn.base.RegressorMixin"}, "nnetsauce.glm.GLMRegressor.__init__": {"fullname": "nnetsauce.glm.GLMRegressor.__init__", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">alpha1</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">alpha2</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">family</span><span class=\"o\">=</span><span class=\"s1\">&#39;gaussian&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span><span class=\"o\">=&lt;</span><span class=\"n\">nnetsauce</span><span class=\"o\">.</span><span class=\"n\">optimizers</span><span class=\"o\">.</span><span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">Optimizer</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span></span>)</span>"}, "nnetsauce.glm.GLMRegressor.family": {"fullname": "nnetsauce.glm.GLMRegressor.family", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.family", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"fullname": "nnetsauce.glm.GLMRegressor.gaussian_loss", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.gaussian_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"fullname": "nnetsauce.glm.GLMRegressor.laplace_loss", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.laplace_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"fullname": "nnetsauce.glm.GLMRegressor.poisson_loss", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.poisson_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.glm.GLMRegressor.loss_func": {"fullname": "nnetsauce.glm.GLMRegressor.loss_func", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.loss_func", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span>,</span><span class=\"param\">\t<span class=\"n\">group_index</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">row_index</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">type_loss</span><span class=\"o\">=</span><span class=\"s1\">&#39;gaussian&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.glm.GLMRegressor.fit": {"fullname": "nnetsauce.glm.GLMRegressor.fit", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.fit", "kind": "function", "doc": "<p>Fit GLM model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.glm.GLMRegressor.predict": {"fullname": "nnetsauce.glm.GLMRegressor.predict", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.glm.GLMRegressor.set_score_request": {"fullname": "nnetsauce.glm.GLMRegressor.set_score_request", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict": {"fullname": "nnetsauce.lazypredict", "modulename": "nnetsauce.lazypredict", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyClassifier": {"fullname": "nnetsauce.lazypredict.LazyClassifier", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier", "kind": "class", "doc": "<p>Fitting -- almost -- all the classification algorithms with nnetsauce's\n    CustomClassifier and returning their scores.</p>\n\n<p>Parameters:</p>\n\n<pre><code>verbose: int, optional (default=0)\n    Any positive number for verbosity.\n\nignore_warnings: bool, optional (default=True)\n    When set to True, warnings related to algorithms that were not\n    run are ignored.\n\ncustom_metric: function, optional (default=None)\n    When function is provided, models are evaluated based on the\n    custom evaluation metric provided.\n\npredictions: bool, optional (default=False)\n    When set to True, the predictions of all the models models are\n    returned as data frame.\n\nsort_by: string, optional (default='Accuracy')\n    Sort models by a metric. Available options are 'Accuracy',\n    'Balanced Accuracy', 'ROC AUC', 'F1 Score' or a custom metric\n    identified by its name and provided by custom_metric.\n\nrandom_state: int, optional (default=42)\n    Reproducibiility seed.\n\nestimators: list, optional (default='all')\n    list of Estimators names or just 'all' for &gt; 90\n    classifiers (default='all')\n\npreprocess: bool, preprocessing is done when set to True\n\nn_jobs: int, when possible, run in parallel\n    For now, only used by individual models that support it.\n\nAll the other parameters are the same as CustomClassifier's.\n</code></pre>\n\n<p>Examples:\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n    <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n    <span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n    <span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span>\n    <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n    <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">LazyClassifier</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n    <span class=\"n\">model_dictionary</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">provide_models</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span><span class=\"n\">X_test</span><span class=\"p\">,</span><span class=\"n\">y_train</span><span class=\"p\">,</span><span class=\"n\">y_test</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">)</span>\n    </code></pre>\n    </div></p>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.ClassifierMixin"}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"fullname": "nnetsauce.lazypredict.LazyClassifier.__init__", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sort_by</span><span class=\"o\">=</span><span class=\"s1\">&#39;Accuracy&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">estimators</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.lazypredict.LazyClassifier.verbose": {"fullname": "nnetsauce.lazypredict.LazyClassifier.verbose", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyClassifier.ignore_warnings": {"fullname": "nnetsauce.lazypredict.LazyClassifier.ignore_warnings", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyClassifier.custom_metric": {"fullname": "nnetsauce.lazypredict.LazyClassifier.custom_metric", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyClassifier.predictions": {"fullname": "nnetsauce.lazypredict.LazyClassifier.predictions", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.predictions", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyClassifier.sort_by": {"fullname": "nnetsauce.lazypredict.LazyClassifier.sort_by", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.sort_by", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyClassifier.models": {"fullname": "nnetsauce.lazypredict.LazyClassifier.models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.models", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyClassifier.random_state": {"fullname": "nnetsauce.lazypredict.LazyClassifier.random_state", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.random_state", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyClassifier.estimators": {"fullname": "nnetsauce.lazypredict.LazyClassifier.estimators", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.estimators", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyClassifier.preprocess": {"fullname": "nnetsauce.lazypredict.LazyClassifier.preprocess", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.preprocess", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyClassifier.n_jobs": {"fullname": "nnetsauce.lazypredict.LazyClassifier.n_jobs", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyClassifier.fit": {"fullname": "nnetsauce.lazypredict.LazyClassifier.fit", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.fit", "kind": "function", "doc": "<p>Fit classifiers to X_train and y_train, predict and score on X_test,\ny_test.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>scores: Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\n\npredictions: Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"fullname": "nnetsauce.lazypredict.LazyClassifier.provide_models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.provide_models", "kind": "function", "doc": "<p>Returns all the model objects trained. If fit hasn't been called yet,\nthen it's called to return the models.</p>\n\n<p>Parameters:</p>\n\n<p>X_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<p>X_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<p>y_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<p>y_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<p>Returns:</p>\n\n<pre><code>models: dict-object,\n    Returns a dictionary with each model's pipeline as value\n    and key = name of the model.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"fullname": "nnetsauce.lazypredict.LazyClassifier.set_fit_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"fullname": "nnetsauce.lazypredict.LazyClassifier.set_score_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyRegressor": {"fullname": "nnetsauce.lazypredict.LazyRegressor", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor", "kind": "class", "doc": "<p>Fitting a collection of regression models using nnetsauce's CustomRegressor</p>\n\n<p>Parameters:</p>\n\n<pre><code>verbose: int, optional (default=0)\n    Any positive number for verbosity.\n\nignore_warnings: bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not able to run are ignored.\n\ncustom_metric: function, optional (default=None)\n    When function is provided, models are evaluated based on the custom evaluation metric provided.\n\npredictions: bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\n\nsort_by: string, optional (default='Accuracy')\n    Sort models by a metric. Available options are 'Accuracy', 'Balanced Accuracy', 'ROC AUC', 'F1 Score'\n    or a custom metric identified by its name and provided by custom_metric.\n\nrandom_state: int, optional (default=42)\n    Reproducibiility seed.\n\nestimators: list, optional (default='all')\n    a list of Estimators names or just 'all' (default='all')\n\npreprocess: bool\n    preprocessing is done when set to True\n\nn_jobs : int, when possible, run in parallel\n    For now, only used by individual models that support it.\n\nn_layers: int, optional (default=3)\n    Number of layers of CustomRegressors to be used.\n\nAll the other parameters are the same as CustomRegressor's.\n</code></pre>\n\n<p>Examples:\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_diabetes</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_diabetes</span><span class=\"p\">()</span>\n    <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n    <span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n    <span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n    <span class=\"n\">regr</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">LazyRegressor</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">)</span>\n    <span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n    <span class=\"n\">model_dictionary</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">provide_models</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span><span class=\"n\">X_test</span><span class=\"p\">,</span><span class=\"n\">y_train</span><span class=\"p\">,</span><span class=\"n\">y_test</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">)</span>\n    </code></pre>\n    </div></p>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.RegressorMixin"}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"fullname": "nnetsauce.lazypredict.LazyRegressor.__init__", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">estimators</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.lazypredict.LazyRegressor.verbose": {"fullname": "nnetsauce.lazypredict.LazyRegressor.verbose", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyRegressor.ignore_warnings": {"fullname": "nnetsauce.lazypredict.LazyRegressor.ignore_warnings", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyRegressor.custom_metric": {"fullname": "nnetsauce.lazypredict.LazyRegressor.custom_metric", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyRegressor.predictions": {"fullname": "nnetsauce.lazypredict.LazyRegressor.predictions", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.predictions", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyRegressor.models": {"fullname": "nnetsauce.lazypredict.LazyRegressor.models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.models", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyRegressor.random_state": {"fullname": "nnetsauce.lazypredict.LazyRegressor.random_state", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.random_state", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyRegressor.estimators": {"fullname": "nnetsauce.lazypredict.LazyRegressor.estimators", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.estimators", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyRegressor.preprocess": {"fullname": "nnetsauce.lazypredict.LazyRegressor.preprocess", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.preprocess", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyRegressor.n_jobs": {"fullname": "nnetsauce.lazypredict.LazyRegressor.n_jobs", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyRegressor.fit": {"fullname": "nnetsauce.lazypredict.LazyRegressor.fit", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X_train and y_train, predict and score on X_test, y_test.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n</code></pre>\n\n<p>Returns:</p>\n\n<p>scores : Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.</p>\n\n<p>predictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"fullname": "nnetsauce.lazypredict.LazyRegressor.provide_models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"fullname": "nnetsauce.lazypredict.LazyRegressor.set_fit_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"fullname": "nnetsauce.lazypredict.LazyRegressor.set_score_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyMTS": {"fullname": "nnetsauce.lazypredict.LazyMTS", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS", "kind": "class", "doc": "<p>Fitting -- almost -- all the regression algorithms with layers of\nnnetsauce's CustomRegressor to multivariate time series\nand returning their scores.</p>\n\n<p>Parameters:</p>\n\n<pre><code>verbose: int, optional (default=0)\n    Any positive number for verbosity.\n\nignore_warnings: bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not\n    able to run are ignored.\n\ncustom_metric: function, optional (default=None)\n    When function is provided, models are evaluated based on the custom\n      evaluation metric provided.\n\npredictions: bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\n\nsort_by: string, optional (default='RMSE')\n    Sort models by a metric. Available options are 'RMSE', 'MAE', 'MPL', 'MPE', 'MAPE',\n    'R-Squared', 'Adjusted R-Squared' or a custom metric identified by its name and\n    provided by custom_metric.\n\nrandom_state: int, optional (default=42)\n    Reproducibiility seed.\n\nestimators: list, optional (default='all')\n    list of Estimators (regression algorithms) names or just 'all' (default='all')\n\npreprocess: bool, preprocessing is done when set to True\n\nn_jobs : int, when possible, run in parallel\n    For now, only used by individual models that support it.\n\nn_layers: int, optional (default=3)\n    Number of layers of CustomRegressors to be used.\n\nAll the other parameters are the same as MTS's.\n</code></pre>\n\n<p>Examples:</p>\n\n<pre><code>See https://thierrymoudiki.github.io/blog/2023/10/29/python/quasirandomizednn/MTS-LazyPredict\n</code></pre>\n", "bases": "nnetsauce.mts.mts.MTS"}, "nnetsauce.lazypredict.LazyMTS.__init__": {"fullname": "nnetsauce.lazypredict.LazyMTS.__init__", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">estimators</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">type_pi</span><span class=\"o\">=</span><span class=\"s1\">&#39;kde&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, "nnetsauce.lazypredict.LazyMTS.verbose": {"fullname": "nnetsauce.lazypredict.LazyMTS.verbose", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyMTS.ignore_warnings": {"fullname": "nnetsauce.lazypredict.LazyMTS.ignore_warnings", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyMTS.custom_metric": {"fullname": "nnetsauce.lazypredict.LazyMTS.custom_metric", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyMTS.predictions": {"fullname": "nnetsauce.lazypredict.LazyMTS.predictions", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.predictions", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyMTS.models": {"fullname": "nnetsauce.lazypredict.LazyMTS.models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.models", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyMTS.random_state": {"fullname": "nnetsauce.lazypredict.LazyMTS.random_state", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.random_state", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyMTS.estimators": {"fullname": "nnetsauce.lazypredict.LazyMTS.estimators", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.estimators", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyMTS.preprocess": {"fullname": "nnetsauce.lazypredict.LazyMTS.preprocess", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.preprocess", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyMTS.fit": {"fullname": "nnetsauce.lazypredict.LazyMTS.fit", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X_train, predict and score on X_test.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n\nxreg: array-like, optional (default=None)\n    Additional (external) regressors to be passed to self.obj\n    xreg must be in 'increasing' order (most recent observations last)\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>scores: Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\n\npredictions: Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"fullname": "nnetsauce.lazypredict.LazyMTS.provide_models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"fullname": "nnetsauce.lazypredict.LazyMTS.set_fit_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"fullname": "nnetsauce.lazypredict.LazyMTS.set_predict_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"fullname": "nnetsauce.lazypredict.LazyMTS.set_score_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyDeepClassifier": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier", "kind": "class", "doc": "<p>Fitting -- almost -- all the classification algorithms with layers of\nnnetsauce's CustomClassifier and returning their scores.</p>\n\n<p>Parameters:</p>\n\n<pre><code>verbose: int, optional (default=0)\n    Any positive number for verbosity.\n\nignore_warnings: bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not\n    able to run are ignored.\n\ncustom_metric: function, optional (default=None)\n    When function is provided, models are evaluated based on the custom\n      evaluation metric provided.\n\npredictions: bool, optional (default=False)\n    When set to True, the predictions of all the models models are\n    returned as data frame.\n\nsort_by: string, optional (default='Accuracy')\n    Sort models by a metric. Available options are 'Accuracy',\n    'Balanced Accuracy', 'ROC AUC', 'F1 Score' or a custom metric\n    identified by its name and provided by custom_metric.\n\nrandom_state: int, optional (default=42)\n    Reproducibiility seed.\n\nestimators: list, optional (default='all')\n    list of Estimators names or just 'all' for &gt; 90 classifiers\n    (default='all')\n\npreprocess: bool, preprocessing is done when set to True\n\nn_jobs: int, when possible, run in parallel\n    For now, only used by individual models that support it.\n\nn_layers: int, optional (default=3)\n    Number of layers of CustomClassifiers to be used.\n\nAll the other parameters are the same as CustomClassifier's.\n</code></pre>\n\n<p>Examples\n    <div class=\"pdoc-code codehilite\">\n    <pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n    <span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n    <span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n    <span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n    <span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n    <span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span>\n        <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n    <span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">LazyDeepClassifier</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n    <span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n    <span class=\"n\">model_dictionary</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">provide_models</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span><span class=\"n\">X_test</span><span class=\"p\">,</span><span class=\"n\">y_train</span><span class=\"p\">,</span><span class=\"n\">y_test</span><span class=\"p\">)</span>\n    <span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">)</span>\n    </code></pre>\n    </div></p>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.ClassifierMixin"}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.__init__", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">sort_by</span><span class=\"o\">=</span><span class=\"s1\">&#39;Accuracy&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">estimators</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.lazypredict.LazyDeepClassifier.verbose": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.verbose", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepClassifier.ignore_warnings": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.ignore_warnings", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepClassifier.custom_metric": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.custom_metric", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepClassifier.predictions": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.predictions", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.predictions", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepClassifier.sort_by": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.sort_by", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.sort_by", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepClassifier.models": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.models", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepClassifier.random_state": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.random_state", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.random_state", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepClassifier.estimators": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.estimators", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.estimators", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepClassifier.preprocess": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.preprocess", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.preprocess", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepClassifier.n_layers": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.n_layers", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.n_layers", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepClassifier.n_jobs": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.n_jobs", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.fit", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.fit", "kind": "function", "doc": "<p>Fit classifiers to X_train and y_train, predict and score on X_test,\ny_test.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>scores: Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\n\npredictions: Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.provide_models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.provide_models", "kind": "function", "doc": "<p>Returns all the model objects trained. If fit hasn't been called yet,\nthen it's called to return the models.</p>\n\n<p>Parameters:</p>\n\n<p>X_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<p>X_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<p>y_train: array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<p>y_test: array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<p>Returns:</p>\n\n<pre><code>models: dict-object,\n    Returns a dictionary with each model's pipeline as value\n    and key = name of the model.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyDeepRegressor": {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor", "kind": "class", "doc": "<p>Fitting -- almost -- all the regression algorithms with layers of\n    nnetsauce's CustomRegressor and returning their scores.</p>\n\n<p>Parameters:</p>\n\n<pre><code>verbose: int, optional (default=0)\n    Any positive number for verbosity.\n\nignore_warnings: bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not able to run are ignored.\n\ncustom_metric: function, optional (default=None)\n    When function is provided, models are evaluated based on the custom evaluation metric provided.\n\npredictions: bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\n\nsort_by: string, optional (default='Accuracy')\n    Sort models by a metric. Available options are 'Accuracy', 'Balanced Accuracy', 'ROC AUC', 'F1 Score'\n    or a custom metric identified by its name and provided by custom_metric.\n\nrandom_state: int, optional (default=42)\n    Reproducibiility seed.\n\nestimators: list, optional (default='all')\n    list of Estimators names or just 'all' (default='all')\n\npreprocess: bool\n    preprocessing is done when set to True\n\nn_jobs : int, when possible, run in parallel\n    For now, only used by individual models that support it.\n\nn_layers: int, optional (default=3)\n    Number of layers of CustomRegressors to be used.\n\nAll the other parameters are the same as CustomRegressor's.\n</code></pre>\n\n<p>Examples:</p>\n\n<pre><code>import nnetsauce as ns\nimport numpy as np\nfrom sklearn import datasets\nfrom sklearn.utils import shuffle\n\ndiabetes = datasets.load_diabetes()\nX, y = shuffle(diabetes.data, diabetes.target, random_state=13)\nX = X.astype(np.float32)\n\noffset = int(X.shape[0] * 0.9)\nX_train, y_train = X[:offset], y[:offset]\nX_test, y_test = X[offset:], y[offset:]\n\nreg = ns.LazyDeepRegressor(verbose=0, ignore_warnings=False, custom_metric=None)\nmodels, predictions = reg.fit(X_train, X_test, y_train, y_test)\nprint(models)\n</code></pre>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.RegressorMixin"}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.__init__", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">estimators</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.lazypredict.LazyDeepRegressor.verbose": {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.verbose", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepRegressor.ignore_warnings": {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.ignore_warnings", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepRegressor.custom_metric": {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.custom_metric", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepRegressor.predictions": {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.predictions", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.predictions", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepRegressor.models": {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.models", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepRegressor.random_state": {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.random_state", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.random_state", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepRegressor.estimators": {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.estimators", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.estimators", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepRegressor.preprocess": {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.preprocess", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.preprocess", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepRegressor.n_layers": {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.n_layers", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.n_layers", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepRegressor.n_jobs": {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.n_jobs", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.fit", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X_train and y_train, predict and score on X_test, y_test.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n</code></pre>\n\n<h2 id=\"returns\">Returns:</h2>\n\n<p>scores:  Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.</p>\n\n<p>predictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.provide_models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyDeepMTS": {"fullname": "nnetsauce.lazypredict.LazyDeepMTS", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS", "kind": "class", "doc": "<p>Fitting -- almost -- all the regression algorithms with layers of\n    nnetsauce's CustomRegressor to multivariate time series\n    and returning their scores.</p>\n\n<p>Parameters:</p>\n\n<pre><code>verbose: int, optional (default=0)\n    Any positive number for verbosity.\n\nignore_warnings: bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not\n    able to run are ignored.\n\ncustom_metric: function, optional (default=None)\n    When function is provided, models are evaluated based on the\n    custom evaluation metric provided.\n\npredictions: bool, optional (default=False)\n    When set to True, the predictions of all the models models are\n    returned as dataframe.\n\nsort_by: string, optional (default='RMSE')\n    Sort models by a metric. Available options are 'RMSE', 'MAE',\n    'MPL', 'MPE', 'MAPE', 'R-Squared', 'Adjusted R-Squared' or\n    a custom metric identified by its name and\n    provided by custom_metric.\n\nrandom_state: int, optional (default=42)\n    Reproducibiility seed.\n\nestimators: list, optional (default='all')\n    list of Estimators (regression algorithms) names or just\n    'all' (default='all')\n\npreprocess: bool, preprocessing is done when set to True\n\nn_jobs : int, when possible, run in parallel\n    For now, only used by individual models that support it.\n\nn_layers: int, optional (default=3)\n    Number of layers of CustomRegressors to be used.\n\nAll the other parameters are the same as MTS's.\n</code></pre>\n\n<p>Examples</p>\n\n<pre><code>See https://github.com/Techtonique/nnetsauce/blob/master/nnetsauce/demo/thierrymoudiki_20240106_LazyDeepMTS.ipynb\n</code></pre>\n", "bases": "nnetsauce.mts.mts.MTS"}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.__init__", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">estimators</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">type_pi</span><span class=\"o\">=</span><span class=\"s1\">&#39;kde&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, "nnetsauce.lazypredict.LazyDeepMTS.verbose": {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.verbose", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepMTS.ignore_warnings": {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.ignore_warnings", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepMTS.custom_metric": {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.custom_metric", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepMTS.predictions": {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.predictions", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.predictions", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepMTS.models": {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.models", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepMTS.random_state": {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.random_state", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.random_state", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepMTS.estimators": {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.estimators", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.estimators", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepMTS.preprocess": {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.preprocess", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.preprocess", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepMTS.n_layers": {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.n_layers", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.n_layers", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.fit", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X_train, predict and score on X_test.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n\nxreg: {array-like}, shape = [n_samples, n_features_xreg]\n    Additional (external) regressors to be passed to self.obj\n    xreg must be in 'increasing' order (most recent observations last)\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>scores : Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\n\npredictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.provide_models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\n\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.set_score_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.mts": {"fullname": "nnetsauce.mts", "modulename": "nnetsauce.mts", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS": {"fullname": "nnetsauce.mts.MTS", "modulename": "nnetsauce.mts", "qualname": "MTS", "kind": "class", "doc": "<p>Univariate and multivariate time series (MTS) forecasting with Quasi-Randomized networks (Work in progress /!)</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object.\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict()).\n\nn_hidden_features: int.\n    number of nodes in the hidden layer.\n\nactivation_name: str.\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'.\n\na: float.\n    hyperparameter for 'prelu' or 'elu' activation function.\n\nnodes_sim: str.\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'.\n\nbias: boolean.\n    indicates if the hidden layer contains a bias term (True) or not\n    (False).\n\ndropout: float.\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training.\n\ndirect_link: boolean.\n    indicates if the original predictors are included (True) in model's fitting or not (False).\n\nn_clusters: int.\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0: no clustering).\n\ncluster_encode: bool.\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding.\n\ntype_clust: str.\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm').\n\ntype_scaling: a tuple of 3 strings.\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax').\n\nlags: int.\n    number of lags used for each time series.\n\ntype_pi: str.\n    type of prediction interval; currently:\n    - \"kde\": based on Kernel Density Estimation of in-sample residuals\n    - \"bootstrap\": based on independent bootstrap of in-sample residuals\n    - \"block-bootstrap\": based on basic block bootstrap of in-sample residuals\n    - \"scp-kde\": Split conformal prediction with Kernel Density Estimation of calibrated residuals\n    - \"scp-bootstrap\": Split conformal prediction with independent bootstrap of calibrated residuals\n    - \"scp-block-bootstrap\": Split conformal prediction with basic block bootstrap of calibrated residuals\n    - \"scp2-kde\": Split conformal prediction with Kernel Density Estimation of standardized calibrated residuals\n    - \"scp2-bootstrap\": Split conformal prediction with independent bootstrap of standardized calibrated residuals\n    - \"scp2-block-bootstrap\": Split conformal prediction with basic block bootstrap of standardized calibrated residuals\n\nreplications: int.\n    number of replications (if needed, for predictive simulation). Default is 'None'.\n\nkernel: str.\n    the kernel to use for residuals density estimation (used for predictive simulation). Currently, either 'gaussian' or 'tophat'.\n\nagg: str.\n    either \"mean\" or \"median\" for simulation of bootstrap aggregating\n\nseed: int.\n    reproducibility seed for nodes_sim=='uniform' or predictive simulation.\n\nbackend: str.\n    \"cpu\" or \"gpu\" or \"tpu\".\n\nverbose: int.\n    0: not printing; 1: printing\n\nshow_progress: bool.\n    True: progress bar when fitting each series; False: no progress bar when fitting each series\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>fit_objs_: dict\n    objects adjusted to each individual time series\n\ny_: {array-like}\n    MTS responses (most recent observations first)\n\nX_: {array-like}\n    MTS lags\n\nxreg_: {array-like}\n    external regressors\n\ny_means_: dict\n    a dictionary of each series mean values\n\npreds_: {array-like}\n    successive model predictions\n\npreds_std_: {array-like}\n    standard deviation around the predictions\n\nreturn_std_: boolean\n    return uncertainty or not (set in predict)\n\ndf_: data frame\n    the input data frame, in case a data.frame is provided to `fit`\n</code></pre>\n\n<p>Examples:</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n<span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">25</span><span class=\"o\">*</span><span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adjust Bayesian Ridge</span>\n<span class=\"n\">regr4</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">BayesianRidge</span><span class=\"p\">()</span>\n<span class=\"n\">obj_MTS</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">MTS</span><span class=\"p\">(</span><span class=\"n\">regr4</span><span class=\"p\">,</span> <span class=\"n\">lags</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># with credible intervals</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"s1\">&#39;date&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;2001-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2002-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2003-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2004-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2005-01-01&#39;</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series1&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mf\">35.6</span><span class=\"p\">,</span> <span class=\"mf\">33.3</span><span class=\"p\">,</span> <span class=\"mf\">38.1</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series2&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">5.5</span><span class=\"p\">,</span> <span class=\"mf\">5.6</span><span class=\"p\">,</span> <span class=\"mf\">6.3</span><span class=\"p\">,</span> <span class=\"mf\">5.1</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series3&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mf\">100.5</span><span class=\"p\">,</span> <span class=\"mf\">100.6</span><span class=\"p\">,</span> <span class=\"mf\">100.2</span><span class=\"p\">,</span> <span class=\"mf\">100.1</span><span class=\"p\">]}</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;date&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adjust Bayesian Ridge</span>\n<span class=\"n\">regr5</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">BayesianRidge</span><span class=\"p\">()</span>\n<span class=\"n\">obj_MTS</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">MTS</span><span class=\"p\">(</span><span class=\"n\">regr5</span><span class=\"p\">,</span> <span class=\"n\">lags</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># with credible intervals</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base"}, "nnetsauce.mts.MTS.__init__": {"fullname": "nnetsauce.mts.MTS.__init__", "modulename": "nnetsauce.mts", "qualname": "MTS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">type_pi</span><span class=\"o\">=</span><span class=\"s1\">&#39;kde&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, "nnetsauce.mts.MTS.obj": {"fullname": "nnetsauce.mts.MTS.obj", "modulename": "nnetsauce.mts", "qualname": "MTS.obj", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.n_series": {"fullname": "nnetsauce.mts.MTS.n_series", "modulename": "nnetsauce.mts", "qualname": "MTS.n_series", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.lags": {"fullname": "nnetsauce.mts.MTS.lags", "modulename": "nnetsauce.mts", "qualname": "MTS.lags", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.type_pi": {"fullname": "nnetsauce.mts.MTS.type_pi", "modulename": "nnetsauce.mts", "qualname": "MTS.type_pi", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.replications": {"fullname": "nnetsauce.mts.MTS.replications", "modulename": "nnetsauce.mts", "qualname": "MTS.replications", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.kernel": {"fullname": "nnetsauce.mts.MTS.kernel", "modulename": "nnetsauce.mts", "qualname": "MTS.kernel", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.agg": {"fullname": "nnetsauce.mts.MTS.agg", "modulename": "nnetsauce.mts", "qualname": "MTS.agg", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.verbose": {"fullname": "nnetsauce.mts.MTS.verbose", "modulename": "nnetsauce.mts", "qualname": "MTS.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.show_progress": {"fullname": "nnetsauce.mts.MTS.show_progress", "modulename": "nnetsauce.mts", "qualname": "MTS.show_progress", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.series_names": {"fullname": "nnetsauce.mts.MTS.series_names", "modulename": "nnetsauce.mts", "qualname": "MTS.series_names", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.input_dates": {"fullname": "nnetsauce.mts.MTS.input_dates", "modulename": "nnetsauce.mts", "qualname": "MTS.input_dates", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.fit_objs_": {"fullname": "nnetsauce.mts.MTS.fit_objs_", "modulename": "nnetsauce.mts", "qualname": "MTS.fit_objs_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.y_": {"fullname": "nnetsauce.mts.MTS.y_", "modulename": "nnetsauce.mts", "qualname": "MTS.y_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.X_": {"fullname": "nnetsauce.mts.MTS.X_", "modulename": "nnetsauce.mts", "qualname": "MTS.X_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.xreg_": {"fullname": "nnetsauce.mts.MTS.xreg_", "modulename": "nnetsauce.mts", "qualname": "MTS.xreg_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.y_means_": {"fullname": "nnetsauce.mts.MTS.y_means_", "modulename": "nnetsauce.mts", "qualname": "MTS.y_means_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.mean_": {"fullname": "nnetsauce.mts.MTS.mean_", "modulename": "nnetsauce.mts", "qualname": "MTS.mean_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.upper_": {"fullname": "nnetsauce.mts.MTS.upper_", "modulename": "nnetsauce.mts", "qualname": "MTS.upper_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.lower_": {"fullname": "nnetsauce.mts.MTS.lower_", "modulename": "nnetsauce.mts", "qualname": "MTS.lower_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.output_dates_": {"fullname": "nnetsauce.mts.MTS.output_dates_", "modulename": "nnetsauce.mts", "qualname": "MTS.output_dates_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.preds_std_": {"fullname": "nnetsauce.mts.MTS.preds_std_", "modulename": "nnetsauce.mts", "qualname": "MTS.preds_std_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.alpha_": {"fullname": "nnetsauce.mts.MTS.alpha_", "modulename": "nnetsauce.mts", "qualname": "MTS.alpha_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.return_std_": {"fullname": "nnetsauce.mts.MTS.return_std_", "modulename": "nnetsauce.mts", "qualname": "MTS.return_std_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.df_": {"fullname": "nnetsauce.mts.MTS.df_", "modulename": "nnetsauce.mts", "qualname": "MTS.df_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.residuals_": {"fullname": "nnetsauce.mts.MTS.residuals_", "modulename": "nnetsauce.mts", "qualname": "MTS.residuals_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.residuals_sims_": {"fullname": "nnetsauce.mts.MTS.residuals_sims_", "modulename": "nnetsauce.mts", "qualname": "MTS.residuals_sims_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.kde_": {"fullname": "nnetsauce.mts.MTS.kde_", "modulename": "nnetsauce.mts", "qualname": "MTS.kde_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.sims_": {"fullname": "nnetsauce.mts.MTS.sims_", "modulename": "nnetsauce.mts", "qualname": "MTS.sims_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.residuals_std_dev_": {"fullname": "nnetsauce.mts.MTS.residuals_std_dev_", "modulename": "nnetsauce.mts", "qualname": "MTS.residuals_std_dev_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.n_obs": {"fullname": "nnetsauce.mts.MTS.n_obs", "modulename": "nnetsauce.mts", "qualname": "MTS.n_obs", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.level": {"fullname": "nnetsauce.mts.MTS.level", "modulename": "nnetsauce.mts", "qualname": "MTS.level", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.mts.MTS.fit": {"fullname": "nnetsauce.mts.MTS.fit", "modulename": "nnetsauce.mts", "qualname": "MTS.fit", "kind": "function", "doc": "<p>Fit MTS model to training data X, with optional regressors xreg</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training time series, where n_samples is the number\n    of samples and n_features is the number of features;\n    X must be in increasing order (most recent observations last)\n\nxreg: {array-like}, shape = [n_samples, n_features_xreg]\n    Additional (external) regressors to be passed to self.obj\n    xreg must be in 'increasing' order (most recent observations last)\n\n**kwargs: for now, additional parameters to be passed to for kernel density estimation, when needed (see sklearn.neighbors.KernelDensity)\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.mts.MTS.predict": {"fullname": "nnetsauce.mts.MTS.predict", "modulename": "nnetsauce.mts", "qualname": "MTS.predict", "kind": "function", "doc": "<p>Forecast all the time series, h steps ahead</p>\n\n<p>Parameters:</p>\n\n<pre><code>h: {integer}\n    Forecasting horizon\n\nlevel: {integer}\n    Level of confidence (if obj has option 'return_std' and the\n    posterior is gaussian)\n\nnew_xreg: {array-like}, shape = [n_samples = h, n_new_xreg]\n    New values of additional (deterministic) regressors on horizon = h\n    new_xreg must be in increasing order (most recent observations last)\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions for horizon = h: {array-like}, data frame or tuple.\nStandard deviation and prediction intervals are returned when\n`obj.predict` can return standard deviation\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">h</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.mts.MTS.score": {"fullname": "nnetsauce.mts.MTS.score", "modulename": "nnetsauce.mts", "qualname": "MTS.score", "kind": "function", "doc": "<p>Train on training_index, score on testing_index.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">training_index</span>, </span><span class=\"param\"><span class=\"n\">testing_index</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.mts.MTS.plot": {"fullname": "nnetsauce.mts.MTS.plot", "modulename": "nnetsauce.mts", "qualname": "MTS.plot", "kind": "function", "doc": "<p>Plot time series forecast</p>\n\n<p>Parameters:</p>\n\n<pre><code>series: {integer} or {string}\n    series index or name\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">series</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">type_axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;dates&#39;</span>, </span><span class=\"param\"><span class=\"n\">type_plot</span><span class=\"o\">=</span><span class=\"s1\">&#39;pi&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.mts.MTS.set_fit_request": {"fullname": "nnetsauce.mts.MTS.set_fit_request", "modulename": "nnetsauce.mts", "qualname": "MTS.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.mts.MTS.set_predict_request": {"fullname": "nnetsauce.mts.MTS.set_predict_request", "modulename": "nnetsauce.mts", "qualname": "MTS.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.mts.MTS.set_score_request": {"fullname": "nnetsauce.mts.MTS.set_score_request", "modulename": "nnetsauce.mts", "qualname": "MTS.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.multitask": {"fullname": "nnetsauce.multitask", "modulename": "nnetsauce.multitask", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.multitask.MultitaskClassifier": {"fullname": "nnetsauce.multitask.MultitaskClassifier", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier", "kind": "class", "doc": "<p>Multitask Classification model based on regression models, with shared covariates</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object (must be a regression model) containing a method fit (obj.fit())\n    and a method predict (obj.predict())\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>fit_objs_: dict\n    objects adjusted to each individual time series\n\nn_classes_: int\n    number of classes for the classifier\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/mtask_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/mtask_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LinearRegression</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Linear Regression is used</span>\n<span class=\"n\">regr</span> <span class=\"o\">=</span> <span class=\"n\">LinearRegression</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">MultitaskClassifier</span><span class=\"p\">(</span><span class=\"n\">regr</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                            <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s2\">&quot;gmm&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.ClassifierMixin"}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"fullname": "nnetsauce.multitask.MultitaskClassifier.__init__", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.multitask.MultitaskClassifier.type_fit": {"fullname": "nnetsauce.multitask.MultitaskClassifier.type_fit", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.multitask.MultitaskClassifier.obj": {"fullname": "nnetsauce.multitask.MultitaskClassifier.obj", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.obj", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.multitask.MultitaskClassifier.fit_objs_": {"fullname": "nnetsauce.multitask.MultitaskClassifier.fit_objs_", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.fit_objs_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.multitask.MultitaskClassifier.fit": {"fullname": "nnetsauce.multitask.MultitaskClassifier.fit", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.fit", "kind": "function", "doc": "<p>Fit MultitaskClassifier to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.multitask.MultitaskClassifier.predict": {"fullname": "nnetsauce.multitask.MultitaskClassifier.predict", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"fullname": "nnetsauce.multitask.MultitaskClassifier.predict_proba", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"fullname": "nnetsauce.multitask.MultitaskClassifier.set_fit_request", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"fullname": "nnetsauce.multitask.MultitaskClassifier.set_score_request", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier", "kind": "class", "doc": "<p>Multitask Classification model based on regression models, with shared covariates</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object (must be a regression model) containing a method fit (obj.fit())\n    and a method predict (obj.predict())\n\nseed: int\n    reproducibility seed\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>fit_objs_: dict\n    objects adjusted to each individual time series\n\nn_classes_: int\n    number of classes for the classifier\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LinearRegression</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Linear Regression is used</span>\n<span class=\"n\">regr</span> <span class=\"o\">=</span> <span class=\"n\">LinearRegression</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">SimpleMultitaskClassifier</span><span class=\"p\">(</span><span class=\"n\">regr</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.ClassifierMixin"}, "nnetsauce.multitask.SimpleMultitaskClassifier.__init__": {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.__init__", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span>)</span>"}, "nnetsauce.multitask.SimpleMultitaskClassifier.type_fit": {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.type_fit", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.multitask.SimpleMultitaskClassifier.obj": {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.obj", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.obj", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit_objs_": {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.fit_objs_", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.fit_objs_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.multitask.SimpleMultitaskClassifier.X_scaler_": {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.X_scaler_", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.X_scaler_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.multitask.SimpleMultitaskClassifier.scaled_X_": {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.scaled_X_", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.scaled_X_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.fit", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.fit", "kind": "function", "doc": "<p>Fit SimpleMultitaskClassifier to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.predict", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist": {"fullname": "nnetsauce.nonconformist", "modulename": "nnetsauce.nonconformist", "kind": "module", "doc": "<p>docstring</p>\n"}, "nnetsauce.nonconformist.AbsErrorErrFunc": {"fullname": "nnetsauce.nonconformist.AbsErrorErrFunc", "modulename": "nnetsauce.nonconformist", "qualname": "AbsErrorErrFunc", "kind": "class", "doc": "<p>Calculates absolute error nonconformity for regression problems.</p>\n\n<p>For each correct output in <code>y</code>, nonconformity is defined as</p>\n\n<p>$$| y_i - \\hat{y}_i |$$</p>\n", "bases": "nnetsauce.nonconformist.nc.RegressionErrFunc"}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"fullname": "nnetsauce.nonconformist.AbsErrorErrFunc.apply", "modulename": "nnetsauce.nonconformist", "qualname": "AbsErrorErrFunc.apply", "kind": "function", "doc": "<p>Apply the nonconformity function.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>prediction : numpy array of shape [n_samples, n_classes]\n    Class probability estimates for each sample.</p>\n\n<p>y : numpy array of shape [n_samples]\n    True output labels of each sample.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>nc : numpy array of shape [n_samples]\n    Nonconformity scores of the samples.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">prediction</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"fullname": "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse", "modulename": "nnetsauce.nonconformist", "qualname": "AbsErrorErrFunc.apply_inverse", "kind": "function", "doc": "<p>Apply the inverse of the nonconformity function (i.e.,\ncalculate prediction interval).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>nc : numpy array of shape [n_calibration_samples]\n    Nonconformity scores obtained for conformal predictor.</p>\n\n<p>significance : float\n    Significance level (0, 1).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>interval : numpy array of shape [n_samples, 2]\n    Minimum and maximum interval boundaries for each prediction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nc</span>, </span><span class=\"param\"><span class=\"n\">significance</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"fullname": "nnetsauce.nonconformist.QuantileRegErrFunc", "modulename": "nnetsauce.nonconformist", "qualname": "QuantileRegErrFunc", "kind": "class", "doc": "<p>Calculates conformalized quantile regression error.</p>\n\n<p>For each correct output in <code>y</code>, nonconformity is defined as</p>\n\n<p>$$max{\\hat{q}_low - y, y - \\hat{q}_high}$$</p>\n", "bases": "nnetsauce.nonconformist.nc.RegressionErrFunc"}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"fullname": "nnetsauce.nonconformist.QuantileRegErrFunc.apply", "modulename": "nnetsauce.nonconformist", "qualname": "QuantileRegErrFunc.apply", "kind": "function", "doc": "<p>Apply the nonconformity function.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>prediction : numpy array of shape [n_samples, n_classes]\n    Class probability estimates for each sample.</p>\n\n<p>y : numpy array of shape [n_samples]\n    True output labels of each sample.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>nc : numpy array of shape [n_samples]\n    Nonconformity scores of the samples.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">prediction</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"fullname": "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse", "modulename": "nnetsauce.nonconformist", "qualname": "QuantileRegErrFunc.apply_inverse", "kind": "function", "doc": "<p>Apply the inverse of the nonconformity function (i.e.,\ncalculate prediction interval).</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>nc : numpy array of shape [n_calibration_samples]\n    Nonconformity scores obtained for conformal predictor.</p>\n\n<p>significance : float\n    Significance level (0, 1).</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>interval : numpy array of shape [n_samples, 2]\n    Minimum and maximum interval boundaries for each prediction.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">nc</span>, </span><span class=\"param\"><span class=\"n\">significance</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist.RegressorAdapter": {"fullname": "nnetsauce.nonconformist.RegressorAdapter", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorAdapter", "kind": "class", "doc": "<p>Base class for all estimators in scikit-learn.</p>\n\n<p>Inheriting from this class provides default implementations of:</p>\n\n<ul>\n<li>setting and getting parameters used by <code>GridSearchCV</code> and friends;</li>\n<li>textual and HTML representation displayed in terminals and IDEs;</li>\n<li>estimator serialization;</li>\n<li>parameters validation;</li>\n<li>data validation;</li>\n<li>feature names validation.</li>\n</ul>\n\n<p>Read more in the :ref:<code>User Guide &lt;rolling_your_own_estimator&gt;</code>.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>All estimators should specify all the parameters that can be set\nat the class level in their <code>__init__</code> as explicit keyword\narguments (no <code>*args</code> or <code>**kwargs</code>).</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.base</span> <span class=\"kn\">import</span> <span class=\"n\">BaseEstimator</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">MyEstimator</span><span class=\"p\">(</span><span class=\"n\">BaseEstimator</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param</span> <span class=\"o\">=</span> <span class=\"n\">param</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">fit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_fitted_</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">estimator</span> <span class=\"o\">=</span> <span class=\"n\">MyEstimator</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">get_params</span><span class=\"p\">()</span>\n<span class=\"go\">{&#39;param&#39;: 2}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n<span class=\"go\">array([2, 2, 2])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">set_params</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n<span class=\"go\">array([3, 3, 3])</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.nonconformist.base.BaseModelAdapter"}, "nnetsauce.nonconformist.RegressorAdapter.__init__": {"fullname": "nnetsauce.nonconformist.RegressorAdapter.__init__", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorAdapter.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">model</span>, </span><span class=\"param\"><span class=\"n\">fit_params</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"fullname": "nnetsauce.nonconformist.RegressorAdapter.set_fit_request", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorAdapter.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"fullname": "nnetsauce.nonconformist.RegressorAdapter.set_predict_request", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorAdapter.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist.RegressorNc": {"fullname": "nnetsauce.nonconformist.RegressorNc", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorNc", "kind": "class", "doc": "<p>Nonconformity scorer using an underlying regression model.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>model : RegressorAdapter\n    Underlying regression model used for calculating nonconformity scores.</p>\n\n<p>err_func : RegressionErrFunc\n    Error function object.</p>\n\n<p>normalizer : BaseScorer\n    Normalization model.</p>\n\n<p>beta : float\n    Normalization smoothing parameter. As the beta-value increases,\n    the normalized nonconformity function approaches a non-normalized\n    equivalent.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>model : RegressorAdapter\n    Underlying model object.</p>\n\n<p>err_func : RegressionErrFunc\n    Scorer function used to calculate nonconformity scores.</p>\n\n<h2 id=\"see-also\">See also</h2>\n\n<p>ProbEstClassifierNc, NormalizedRegressorNc</p>\n", "bases": "nnetsauce.nonconformist.nc.BaseModelNc"}, "nnetsauce.nonconformist.RegressorNc.__init__": {"fullname": "nnetsauce.nonconformist.RegressorNc.__init__", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorNc.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">model</span>,</span><span class=\"param\">\t<span class=\"n\">err_func</span><span class=\"o\">=&lt;</span><span class=\"n\">nnetsauce</span><span class=\"o\">.</span><span class=\"n\">nonconformist</span><span class=\"o\">.</span><span class=\"n\">nc</span><span class=\"o\">.</span><span class=\"n\">AbsErrorErrFunc</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">normalizer</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span><span class=\"o\">=</span><span class=\"mf\">1e-06</span></span>)</span>"}, "nnetsauce.nonconformist.RegressorNc.predict": {"fullname": "nnetsauce.nonconformist.RegressorNc.predict", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorNc.predict", "kind": "function", "doc": "<p>Constructs prediction intervals for a set of test examples.</p>\n\n<p>Predicts the output of each test pattern using the underlying model,\nand applies the (partial) inverse nonconformity function to each\nprediction, resulting in a prediction interval for each test pattern.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>x : numpy array of shape [n_samples, n_features]\n    Inputs of patters for which to predict output values.</p>\n\n<p>significance : float\n    Significance level (maximum allowed error rate) of predictions.\n    Should be a float between 0 and 1. If <code>None</code>, then intervals for\n    all significance levels (0.01, 0.02, ..., 0.99) are output in a\n    3d-matrix.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>p : numpy array of shape [n_samples, 2] or [n_samples, 2, 99]\n    If significance is <code>None</code>, then p contains the interval (minimum\n    and maximum boundaries) for each test pattern, and each significance\n    level (0.01, 0.02, ..., 0.99). If significance is a float between\n    0 and 1, then p contains the prediction intervals (minimum and\n    maximum     boundaries) for the set of test patterns at the chosen\n    significance level.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">nc</span>, </span><span class=\"param\"><span class=\"n\">significance</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"fullname": "nnetsauce.nonconformist.RegressorNc.set_fit_request", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorNc.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"fullname": "nnetsauce.nonconformist.RegressorNc.set_predict_request", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorNc.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"fullname": "nnetsauce.nonconformist.RegressorNc.set_score_request", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorNc.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist.RegressorNormalizer": {"fullname": "nnetsauce.nonconformist.RegressorNormalizer", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorNormalizer", "kind": "class", "doc": "<p>Base class for all estimators in scikit-learn.</p>\n\n<p>Inheriting from this class provides default implementations of:</p>\n\n<ul>\n<li>setting and getting parameters used by <code>GridSearchCV</code> and friends;</li>\n<li>textual and HTML representation displayed in terminals and IDEs;</li>\n<li>estimator serialization;</li>\n<li>parameters validation;</li>\n<li>data validation;</li>\n<li>feature names validation.</li>\n</ul>\n\n<p>Read more in the :ref:<code>User Guide &lt;rolling_your_own_estimator&gt;</code>.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>All estimators should specify all the parameters that can be set\nat the class level in their <code>__init__</code> as explicit keyword\narguments (no <code>*args</code> or <code>**kwargs</code>).</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.base</span> <span class=\"kn\">import</span> <span class=\"n\">BaseEstimator</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"k\">class</span> <span class=\"nc\">MyEstimator</span><span class=\"p\">(</span><span class=\"n\">BaseEstimator</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"fm\">__init__</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"o\">*</span><span class=\"p\">,</span> <span class=\"n\">param</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param</span> <span class=\"o\">=</span> <span class=\"n\">param</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">fit</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">is_fitted_</span> <span class=\"o\">=</span> <span class=\"kc\">True</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"bp\">self</span>\n<span class=\"gp\">... </span>    <span class=\"k\">def</span> <span class=\"nf\">predict</span><span class=\"p\">(</span><span class=\"bp\">self</span><span class=\"p\">,</span> <span class=\"n\">X</span><span class=\"p\">):</span>\n<span class=\"gp\">... </span>        <span class=\"k\">return</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">full</span><span class=\"p\">(</span><span class=\"n\">shape</span><span class=\"o\">=</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">],</span> <span class=\"n\">fill_value</span><span class=\"o\">=</span><span class=\"bp\">self</span><span class=\"o\">.</span><span class=\"n\">param</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">estimator</span> <span class=\"o\">=</span> <span class=\"n\">MyEstimator</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">get_params</span><span class=\"p\">()</span>\n<span class=\"go\">{&#39;param&#39;: 2}</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([[</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">2</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">],</span> <span class=\"p\">[</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"mi\">4</span><span class=\"p\">]])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">array</span><span class=\"p\">([</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"mi\">1</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n<span class=\"go\">array([2, 2, 2])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">estimator</span><span class=\"o\">.</span><span class=\"n\">set_params</span><span class=\"p\">(</span><span class=\"n\">param</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">)</span>\n<span class=\"go\">array([3, 3, 3])</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.nonconformist.nc.BaseScorer"}, "nnetsauce.nonconformist.RegressorNormalizer.__init__": {"fullname": "nnetsauce.nonconformist.RegressorNormalizer.__init__", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorNormalizer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">base_model</span>, </span><span class=\"param\"><span class=\"n\">normalizer_model</span>, </span><span class=\"param\"><span class=\"n\">err_func</span></span>)</span>"}, "nnetsauce.nonconformist.RegressorNormalizer.base_model": {"fullname": "nnetsauce.nonconformist.RegressorNormalizer.base_model", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorNormalizer.base_model", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.nonconformist.RegressorNormalizer.normalizer_model": {"fullname": "nnetsauce.nonconformist.RegressorNormalizer.normalizer_model", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorNormalizer.normalizer_model", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.nonconformist.RegressorNormalizer.err_func": {"fullname": "nnetsauce.nonconformist.RegressorNormalizer.err_func", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorNormalizer.err_func", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.nonconformist.RegressorNormalizer.fit": {"fullname": "nnetsauce.nonconformist.RegressorNormalizer.fit", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorNormalizer.fit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist.RegressorNormalizer.score": {"fullname": "nnetsauce.nonconformist.RegressorNormalizer.score", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorNormalizer.score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"fullname": "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorNormalizer.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"fullname": "nnetsauce.nonconformist.RegressorNormalizer.set_score_request", "modulename": "nnetsauce.nonconformist", "qualname": "RegressorNormalizer.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist.IcpRegressor": {"fullname": "nnetsauce.nonconformist.IcpRegressor", "modulename": "nnetsauce.nonconformist", "qualname": "IcpRegressor", "kind": "class", "doc": "<p>Inductive conformal regressor.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>nc_function : BaseScorer\n        Nonconformity scorer object used to calculate nonconformity of\n        calibration examples and test patterns. Should implement <code>fit(x, y)</code>,\n        <code>calc_nc(x, y)</code> and <code>predict(x, nc_scores, significance)</code>.</p>\n\n<h2 id=\"attributes\">Attributes</h2>\n\n<p>cal_x : numpy array of shape [n_cal_examples, n_features]\n        Inputs of calibration set.</p>\n\n<p>cal_y : numpy array of shape [n_cal_examples]\n        Outputs of calibration set.</p>\n\n<p>nc_function : BaseScorer\n        Nonconformity scorer object used to calculate nonconformity scores.</p>\n\n<h2 id=\"see-also\">See also</h2>\n\n<p>IcpClassifier</p>\n\n<h2 id=\"references\">References</h2>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_boston</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.tree</span> <span class=\"kn\">import</span> <span class=\"n\">DecisionTreeRegressor</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">nonconformist.base</span> <span class=\"kn\">import</span> <span class=\"n\">RegressorAdapter</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">nonconformist.icp</span> <span class=\"kn\">import</span> <span class=\"n\">IcpRegressor</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">nonconformist.nc</span> <span class=\"kn\">import</span> <span class=\"n\">RegressorNc</span><span class=\"p\">,</span> <span class=\"n\">AbsErrorErrFunc</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">boston</span> <span class=\"o\">=</span> <span class=\"n\">load_boston</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">idx</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">permutation</span><span class=\"p\">(</span><span class=\"n\">boston</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"o\">.</span><span class=\"n\">size</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">train</span> <span class=\"o\">=</span> <span class=\"n\">idx</span><span class=\"p\">[:</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">cal</span> <span class=\"o\">=</span> <span class=\"n\">idx</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">idx</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"p\">):</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">idx</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"p\">)]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">test</span> <span class=\"o\">=</span> <span class=\"n\">idx</span><span class=\"p\">[</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mi\">2</span> <span class=\"o\">*</span> <span class=\"n\">idx</span><span class=\"o\">.</span><span class=\"n\">size</span> <span class=\"o\">/</span> <span class=\"mi\">3</span><span class=\"p\">):]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model</span> <span class=\"o\">=</span> <span class=\"n\">RegressorAdapter</span><span class=\"p\">(</span><span class=\"n\">DecisionTreeRegressor</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">nc</span> <span class=\"o\">=</span> <span class=\"n\">RegressorNc</span><span class=\"p\">(</span><span class=\"n\">model</span><span class=\"p\">,</span> <span class=\"n\">AbsErrorErrFunc</span><span class=\"p\">())</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">icp</span> <span class=\"o\">=</span> <span class=\"n\">IcpRegressor</span><span class=\"p\">(</span><span class=\"n\">nc</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">icp</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">boston</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">train</span><span class=\"p\">,</span> <span class=\"p\">:],</span> <span class=\"n\">boston</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">[</span><span class=\"n\">train</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">icp</span><span class=\"o\">.</span><span class=\"n\">calibrate</span><span class=\"p\">(</span><span class=\"n\">boston</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">cal</span><span class=\"p\">,</span> <span class=\"p\">:],</span> <span class=\"n\">boston</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">[</span><span class=\"n\">cal</span><span class=\"p\">])</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">icp</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">boston</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">[</span><span class=\"n\">test</span><span class=\"p\">,</span> <span class=\"p\">:],</span> <span class=\"n\">significance</span><span class=\"o\">=</span><span class=\"mf\">0.10</span><span class=\"p\">)</span>\n<span class=\"gp\">... </span>    <span class=\"c1\"># doctest: +SKIP</span>\n<span class=\"go\">array([[  5. ,  20.6],</span>\n<span class=\"go\">        [ 15.5,  31.1],</span>\n<span class=\"go\">        ...,</span>\n<span class=\"go\">        [ 14.2,  29.8],</span>\n<span class=\"go\">        [ 11.6,  27.2]])</span>\n</code></pre>\n</div>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n</ol>\n</div>\n", "bases": "nnetsauce.nonconformist.icp.BaseIcp, nnetsauce.nonconformist.base.RegressorMixin"}, "nnetsauce.nonconformist.IcpRegressor.__init__": {"fullname": "nnetsauce.nonconformist.IcpRegressor.__init__", "modulename": "nnetsauce.nonconformist", "qualname": "IcpRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">nc_function</span>, </span><span class=\"param\"><span class=\"n\">condition</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, "nnetsauce.nonconformist.IcpRegressor.predict": {"fullname": "nnetsauce.nonconformist.IcpRegressor.predict", "modulename": "nnetsauce.nonconformist", "qualname": "IcpRegressor.predict", "kind": "function", "doc": "<p>Predict the output values for a set of input patterns.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>x : numpy array of shape [n_samples, n_features]\n        Inputs of patters for which to predict output values.</p>\n\n<p>significance : float\n        Significance level (maximum allowed error rate) of predictions.\n        Should be a float between 0 and 1. If <code>None</code>, then intervals for\n        all significance levels (0.01, 0.02, ..., 0.99) are output in a\n        3d-matrix.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>p : numpy array of shape [n_samples, 2] or [n_samples, 2, 99}\n        If significance is <code>None</code>, then p contains the interval (minimum\n        and maximum boundaries) for each test pattern, and each significance\n        level (0.01, 0.02, ..., 0.99). If significance is a float between\n        0 and 1, then p contains the prediction intervals (minimum and\n        maximum boundaries) for the set of test patterns at the chosen\n        significance level.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">significance</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"fullname": "nnetsauce.nonconformist.IcpRegressor.set_fit_request", "modulename": "nnetsauce.nonconformist", "qualname": "IcpRegressor.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"fullname": "nnetsauce.nonconformist.IcpRegressor.set_predict_request", "modulename": "nnetsauce.nonconformist", "qualname": "IcpRegressor.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.optimizers": {"fullname": "nnetsauce.optimizers", "modulename": "nnetsauce.optimizers", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.optimizers.Optimizer": {"fullname": "nnetsauce.optimizers.Optimizer", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer", "kind": "class", "doc": "<p>Optimizer class</p>\n\n<p>Attributes:</p>\n\n<pre><code>type_optim: str\n    type of optimizer, (currently) either 'sgd' (stochastic minibatch gradient descent)\n    or 'scd' (stochastic minibatch coordinate descent)\n\nnum_iters: int\n    number of iterations of the optimizer\n\nlearning_rate: float\n    step size\n\nbatch_prop: float\n    proportion of the initial data used at each optimization step\n\nlearning_method: str\n    \"poly\" - learning rate decreasing as a polynomial function\n    of # of iterations (default)\n    \"exp\" - learning rate decreasing as an exponential function\n    of # of iterations\n    \"momentum\" - gradient descent using momentum\n\nrandomization: str\n    type of randomization applied at each step\n    \"strat\" - stratified subsampling (default)\n    \"shuffle\" - random subsampling\n\nmass: float\n    mass on velocity, for `method` == \"momentum\"\n\ndecay: float\n    coefficient of decrease of the learning rate for\n    `method` == \"poly\" and `method` == \"exp\"\n\ntolerance: float\n    early stopping parameter (convergence of loss function)\n\nverbose: int\n    controls verbosity of gradient descent\n    0 - nothing is printed\n    1 - a progress bar is printed\n    2 - successive loss function values are printed\n</code></pre>\n"}, "nnetsauce.optimizers.Optimizer.__init__": {"fullname": "nnetsauce.optimizers.Optimizer.__init__", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">type_optim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sgd&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">num_iters</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">batch_prop</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">learning_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;momentum&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">randomization</span><span class=\"o\">=</span><span class=\"s1\">&#39;strat&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mass</span><span class=\"o\">=</span><span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">decay</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, "nnetsauce.optimizers.Optimizer.type_optim": {"fullname": "nnetsauce.optimizers.Optimizer.type_optim", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.type_optim", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.optimizers.Optimizer.num_iters": {"fullname": "nnetsauce.optimizers.Optimizer.num_iters", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.num_iters", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.optimizers.Optimizer.learning_rate": {"fullname": "nnetsauce.optimizers.Optimizer.learning_rate", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.learning_rate", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.optimizers.Optimizer.batch_prop": {"fullname": "nnetsauce.optimizers.Optimizer.batch_prop", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.batch_prop", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.optimizers.Optimizer.learning_method": {"fullname": "nnetsauce.optimizers.Optimizer.learning_method", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.learning_method", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.optimizers.Optimizer.randomization": {"fullname": "nnetsauce.optimizers.Optimizer.randomization", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.randomization", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.optimizers.Optimizer.mass": {"fullname": "nnetsauce.optimizers.Optimizer.mass", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.mass", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.optimizers.Optimizer.decay": {"fullname": "nnetsauce.optimizers.Optimizer.decay", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.decay", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.optimizers.Optimizer.tolerance": {"fullname": "nnetsauce.optimizers.Optimizer.tolerance", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.tolerance", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.optimizers.Optimizer.verbose": {"fullname": "nnetsauce.optimizers.Optimizer.verbose", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.optimizers.Optimizer.opt": {"fullname": "nnetsauce.optimizers.Optimizer.opt", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.opt", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.optimizers.Optimizer.fit": {"fullname": "nnetsauce.optimizers.Optimizer.fit", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.fit", "kind": "function", "doc": "<p>Fit GLM model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>loss_func: loss function\n\nresponse: array-like, shape = [n_samples]\ntarget variable (used for subsampling)\n\nx0: array-like, shape = [n_features]\n    initial value provided to the optimizer\n\n**kwargs: additional parameters to be passed to\n        loss function\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">loss_func</span>, </span><span class=\"param\"><span class=\"n\">response</span>, </span><span class=\"param\"><span class=\"n\">x0</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"fullname": "nnetsauce.optimizers.Optimizer.one_hot_encode", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.one_hot_encode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">n_classes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.predictioninterval": {"fullname": "nnetsauce.predictioninterval", "modulename": "nnetsauce.predictioninterval", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.predictioninterval.PredictionInterval": {"fullname": "nnetsauce.predictioninterval.PredictionInterval", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval", "kind": "class", "doc": "<p>Class PredictionInterval: Obtain prediction intervals.</p>\n\n<p>Attributes:</p>\n\n<pre><code>obj: an object;\n    fitted object containing methods `fit` and `predict`\n\nmethod: a string;\n    method for constructing the prediction intervals.\n    Currently \"splitconformal\" (default) and \"localconformal\"\n\nlevel: a float;\n    Confidence level for prediction intervals. Default is 95,\n    equivalent to a miscoverage error of 5 (%)\n\nreplications: an integer;\n    Number of replications for simulated conformal (default is `None`)\n\ntype_pi: a string;\n    type of prediction interval: currently \"kde\" (default) or \"bootstrap\"\n\nseed: an integer;\n    Reproducibility of fit (there's a random split between fitting and calibration data)\n</code></pre>\n", "bases": "sklearn.base.BaseEstimator, sklearn.base.RegressorMixin"}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.__init__", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;splitconformal&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span>,</span><span class=\"param\">\t<span class=\"n\">type_pi</span><span class=\"o\">=</span><span class=\"s1\">&#39;bootstrap&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span></span>)</span>"}, "nnetsauce.predictioninterval.PredictionInterval.obj": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.obj", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.obj", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.predictioninterval.PredictionInterval.method": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.method", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.method", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.predictioninterval.PredictionInterval.level": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.level", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.level", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.predictioninterval.PredictionInterval.type_pi": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.type_pi", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.type_pi", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.predictioninterval.PredictionInterval.replications": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.replications", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.replications", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.predictioninterval.PredictionInterval.kernel": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.kernel", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.kernel", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.predictioninterval.PredictionInterval.agg": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.agg", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.agg", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.predictioninterval.PredictionInterval.seed": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.seed", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.seed", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.predictioninterval.PredictionInterval.alpha_": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.alpha_", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.alpha_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.predictioninterval.PredictionInterval.quantile_": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.quantile_", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.quantile_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.predictioninterval.PredictionInterval.icp_": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.icp_", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.icp_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.calibrated_residuals_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.predictioninterval.PredictionInterval.scaled_calibrated_residuals_": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.scaled_calibrated_residuals_", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.scaled_calibrated_residuals_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_scaler_": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_scaler_", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.calibrated_residuals_scaler_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.predictioninterval.PredictionInterval.kde_": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.kde_", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.kde_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.fit", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.fit", "kind": "function", "doc": "<p>Fit the <code>method</code> to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: array-like, shape = [n_samples, n_features];\n    Training set vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples, ]; Target values.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.predict", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.predict", "kind": "function", "doc": "<p>Obtain predictions and prediction intervals</p>\n\n<p>Args:</p>\n\n<pre><code>X: array-like, shape = [n_samples, n_features];\n    Testing set vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nreturn_pi: boolean\n    Whether the prediction interval is returned or not.\n    Default is False, for compatibility with other _estimators_.\n    If True, a tuple containing the predictions + lower and upper\n    bounds is returned.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">return_pi</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.set_predict_request", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"fullname": "nnetsauce.predictioninterval.PredictionInterval.set_score_request", "modulename": "nnetsauce.predictioninterval", "qualname": "PredictionInterval.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.randombag": {"fullname": "nnetsauce.randombag", "modulename": "nnetsauce.randombag", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.randombag.RandomBagClassifier": {"fullname": "nnetsauce.randombag.RandomBagClassifier", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier", "kind": "class", "doc": "<p>Randomized 'Bagging' Classification model</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_estimators: int\n    number of boosting iterations\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>voter_: dict\n    dictionary containing all the fitted base-learners\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/randombag_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/randombag_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.tree</span> <span class=\"kn\">import</span> <span class=\"n\">DecisionTreeClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># decision tree</span>\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">DecisionTreeClassifier</span><span class=\"p\">(</span><span class=\"n\">max_depth</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">RandomBagClassifier</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                                <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                <span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n                                <span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span>\n                                <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.randombag.bag.RandomBag, sklearn.base.ClassifierMixin"}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"fullname": "nnetsauce.randombag.RandomBagClassifier.__init__", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.randombag.RandomBagClassifier.type_fit": {"fullname": "nnetsauce.randombag.RandomBagClassifier.type_fit", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.randombag.RandomBagClassifier.verbose": {"fullname": "nnetsauce.randombag.RandomBagClassifier.verbose", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.randombag.RandomBagClassifier.n_jobs": {"fullname": "nnetsauce.randombag.RandomBagClassifier.n_jobs", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.randombag.RandomBagClassifier.voter_": {"fullname": "nnetsauce.randombag.RandomBagClassifier.voter_", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.voter_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.randombag.RandomBagClassifier.fit": {"fullname": "nnetsauce.randombag.RandomBagClassifier.fit", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.fit", "kind": "function", "doc": "<p>Fit Random 'Bagging' model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.randombag.RandomBagClassifier.predict": {"fullname": "nnetsauce.randombag.RandomBagClassifier.predict", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"fullname": "nnetsauce.randombag.RandomBagClassifier.predict_proba", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"fullname": "nnetsauce.randombag.RandomBagClassifier.set_predict_request", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"fullname": "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.set_predict_proba_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"fullname": "nnetsauce.randombag.RandomBagClassifier.set_score_request", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.randombag.RandomBagRegressor": {"fullname": "nnetsauce.randombag.RandomBagRegressor", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor", "kind": "class", "doc": "<p>Randomized 'Bagging' Regression model</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_estimators: int\n    number of boosting iterations\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model''s\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>voter_: dict\n    dictionary containing all the fitted base-learners\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">fetch_california_housing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.tree</span> <span class=\"kn\">import</span> <span class=\"n\">DecisionTreeRegressor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n\n<span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">fetch_california_housing</span><span class=\"p\">(</span><span class=\"n\">return_X_y</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">as_frame</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># split data into training test and test set</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Requires further tuning</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">DecisionTreeRegressor</span><span class=\"p\">(</span><span class=\"n\">max_depth</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">obj2</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">RandomBagRegressor</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                            <span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span>\n                            <span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span>\n                            <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">obj2</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">obj2</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)))</span> <span class=\"c1\"># RMSE</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.randombag.bag.RandomBag, sklearn.base.RegressorMixin"}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"fullname": "nnetsauce.randombag.RandomBagRegressor.__init__", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.randombag.RandomBagRegressor.type_fit": {"fullname": "nnetsauce.randombag.RandomBagRegressor.type_fit", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.randombag.RandomBagRegressor.verbose": {"fullname": "nnetsauce.randombag.RandomBagRegressor.verbose", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.randombag.RandomBagRegressor.n_jobs": {"fullname": "nnetsauce.randombag.RandomBagRegressor.n_jobs", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.randombag.RandomBagRegressor.voter_": {"fullname": "nnetsauce.randombag.RandomBagRegressor.voter_", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.voter_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.randombag.RandomBagRegressor.fit": {"fullname": "nnetsauce.randombag.RandomBagRegressor.fit", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.fit", "kind": "function", "doc": "<p>Fit Random 'Bagging' model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.randombag.RandomBagRegressor.predict": {"fullname": "nnetsauce.randombag.RandomBagRegressor.predict", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.predict", "kind": "function", "doc": "<p>Predict for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"fullname": "nnetsauce.randombag.RandomBagRegressor.set_predict_request", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"fullname": "nnetsauce.randombag.RandomBagRegressor.set_score_request", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.ridge2": {"fullname": "nnetsauce.ridge2", "modulename": "nnetsauce.ridge2", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.ridge2.Ridge2Classifier": {"fullname": "nnetsauce.ridge2.Ridge2Classifier", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier", "kind": "class", "doc": "<p>Multinomial logit classification with 2 regularization parameters</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nlambda1: float\n    regularization parameter on direct link\n\nlambda2: float\n    regularization parameter on hidden layer\n\nsolver: str\n    optimization function \"L-BFGS-B\",  \"Newton-CG\",\n    \"trust-ncg\", \"L-BFGS-B-lstsq\", \"Newton-CG-lstsq\",\n    \"trust-ncg-lstsq\" (see scipy.optimize.minimize)\n    When using \"L-BFGS-B-lstsq\", \"Newton-CG-lstsq\", or \"trust-ncg-lstsq\",\n    the initial value for the optimization is set to the least squares solution\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: {array-like}\n    regression coefficients\n\nclasses_: {array-like}\n    unique classes in the target variable\n\nminloglik_: float\n    minimum value of the negative log-likelihood\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/ridge_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/ridge_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"c1\"># split data into training test and test set</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create the model with nnetsauce</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">Ridge2Classifier</span><span class=\"p\">(</span><span class=\"n\">lambda1</span> <span class=\"o\">=</span> <span class=\"mf\">6.90185578e+04</span><span class=\"p\">,</span>\n                            <span class=\"n\">lambda2</span> <span class=\"o\">=</span> <span class=\"mf\">3.17392781e+02</span><span class=\"p\">,</span>\n                            <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">,</span>\n                            <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                            <span class=\"n\">dropout</span> <span class=\"o\">=</span> <span class=\"mf\">3.62817383e-01</span><span class=\"p\">,</span>\n                            <span class=\"n\">type_clust</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;gmm&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fit the model on training set</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the accuracy on test set</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get area under the curve on test set (auc)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.ridge2.ridge2.Ridge2, sklearn.base.ClassifierMixin"}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"fullname": "nnetsauce.ridge2.Ridge2Classifier.__init__", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">solver</span><span class=\"o\">=</span><span class=\"s1\">&#39;L-BFGS-B&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.ridge2.Ridge2Classifier.type_fit": {"fullname": "nnetsauce.ridge2.Ridge2Classifier.type_fit", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.ridge2.Ridge2Classifier.solver": {"fullname": "nnetsauce.ridge2.Ridge2Classifier.solver", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.solver", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.ridge2.Ridge2Classifier.beta_": {"fullname": "nnetsauce.ridge2.Ridge2Classifier.beta_", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.beta_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.ridge2.Ridge2Classifier.classes_": {"fullname": "nnetsauce.ridge2.Ridge2Classifier.classes_", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.classes_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.ridge2.Ridge2Classifier.minloglik_": {"fullname": "nnetsauce.ridge2.Ridge2Classifier.minloglik_", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.minloglik_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"fullname": "nnetsauce.ridge2.Ridge2Classifier.loglik", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.loglik", "kind": "function", "doc": "<p>Log-likelihood for training data (X, Y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nY: array-like, shape = [n_samples]\n    One-hot encode target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"fullname": "nnetsauce.ridge2.Ridge2Classifier.fit", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.fit", "kind": "function", "doc": "<p>Fit Ridge model to training data (X, y).</p>\n\n<p>for beta: regression coeffs (beta11, ..., beta1p, ..., betaK1, ..., betaKp)\nfor K classes and p covariates.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"fullname": "nnetsauce.ridge2.Ridge2Classifier.predict", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"fullname": "nnetsauce.ridge2.Ridge2Classifier.predict_proba", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"fullname": "nnetsauce.ridge2.Ridge2Classifier.set_score_request", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.ridge2.Ridge2Regressor": {"fullname": "nnetsauce.ridge2.Ridge2Regressor", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Regressor", "kind": "class", "doc": "<p>Ridge regression with 2 regularization parameters derived from class Ridge</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nlambda1: float\n    regularization parameter on direct link\n\nlambda2: float\n    regularization parameter on hidden layer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    'cpu' or 'gpu' or 'tpu'\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: {array-like}\n    regression coefficients\n\ny_mean_: float\n    average response\n</code></pre>\n", "bases": "nnetsauce.ridge2.ridge2.Ridge2, sklearn.base.RegressorMixin"}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"fullname": "nnetsauce.ridge2.Ridge2Regressor.__init__", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Regressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.ridge2.Ridge2Regressor.type_fit": {"fullname": "nnetsauce.ridge2.Ridge2Regressor.type_fit", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Regressor.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"fullname": "nnetsauce.ridge2.Ridge2Regressor.fit", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Regressor.fit", "kind": "function", "doc": "<p>Fit Ridge model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"fullname": "nnetsauce.ridge2.Ridge2Regressor.predict", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Regressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"fullname": "nnetsauce.ridge2.Ridge2Regressor.set_score_request", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Regressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"fullname": "nnetsauce.ridge2.Ridge2MultitaskClassifier", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2MultitaskClassifier", "kind": "class", "doc": "<p>Multitask Ridge classification with 2 regularization parameters</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nlambda1: float\n    regularization parameter on direct link\n\nlambda2: float\n    regularization parameter on hidden layer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: {array-like}\n    regression coefficients\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/ridgemtask_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/ridgemtask_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">Ridge2MultitaskClassifier</span><span class=\"p\">(</span><span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">9.83730469e+01</span><span class=\"p\">),</span>\n                                <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">4.31054687e-01</span><span class=\"p\">,</span>\n                                <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">1.71484375e+00</span><span class=\"p\">),</span>\n                                <span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">1.24023438e+01</span><span class=\"p\">,</span> <span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">7.30263672e+03</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.ridge2.ridge2.Ridge2, sklearn.base.ClassifierMixin"}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"fullname": "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2MultitaskClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.type_fit": {"fullname": "nnetsauce.ridge2.Ridge2MultitaskClassifier.type_fit", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2MultitaskClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"fullname": "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2MultitaskClassifier.fit", "kind": "function", "doc": "<p>Fit Ridge model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"fullname": "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2MultitaskClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"fullname": "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2MultitaskClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"fullname": "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2MultitaskClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.rvfl": {"fullname": "nnetsauce.rvfl", "modulename": "nnetsauce.rvfl", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor", "kind": "class", "doc": "<p>Bayesian Random Vector Functional Link Network regression with one prior</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton', 'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original features are included (True) in model''s fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0: no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\ns: float\n    std. dev. of regression parameters in Bayesian Ridge Regression\n\nsigma: float\n    std. dev. of residuals in Bayesian Ridge Regression\n\nreturn_std: boolean\n    if True, uncertainty around predictions is evaluated\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: array-like\n    regression''s coefficients\n\nSigma_: array-like\n    covariance of the distribution of fitted parameters\n\nGCV_: float\n    Generalized cross-validation error\n\ny_mean_: float\n    average response\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">TBD</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.RegressorMixin"}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.__init__", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.rvfl.BayesianRVFLRegressor.s": {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.s", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.s", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.rvfl.BayesianRVFLRegressor.sigma": {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.sigma", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.sigma", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.rvfl.BayesianRVFLRegressor.beta_": {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.beta_", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.beta_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.rvfl.BayesianRVFLRegressor.Sigma_": {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.Sigma_", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.Sigma_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.rvfl.BayesianRVFLRegressor.GCV_": {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.GCV_", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.GCV_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.rvfl.BayesianRVFLRegressor.return_std": {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.return_std", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.return_std", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.fit", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.fit", "kind": "function", "doc": "<p>Fit BayesianRVFLRegressor to training data (X, y).</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.predict", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nreturn_std: {boolean}, standard dev. is returned or not\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor", "kind": "class", "doc": "<p>Bayesian Random Vector Functional Link Network regression with two priors</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton', 'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original features are included (True) in model''s fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0: no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\ns1: float\n    std. dev. of init. regression parameters in Bayesian Ridge Regression\n\ns2: float\n    std. dev. of augmented regression parameters in Bayesian Ridge Regression\n\nsigma: float\n    std. dev. of residuals in Bayesian Ridge Regression\n\nreturn_std: boolean\n    if True, uncertainty around predictions is evaluated\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: array-like\n    regression''s coefficients\n\nSigma_: array-like\n    covariance of the distribution of fitted parameters\n\nGCV_: float\n    Generalized cross-validation error\n\ny_mean_: float\n    average response\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">TBD</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.RegressorMixin"}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">s1</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">s2</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s1": {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.s1", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.s1", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s2": {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.s2", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.s2", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.rvfl.BayesianRVFL2Regressor.sigma": {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.sigma", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.sigma", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.rvfl.BayesianRVFL2Regressor.beta_": {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.beta_", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.beta_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.rvfl.BayesianRVFL2Regressor.Sigma_": {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.Sigma_", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.Sigma_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.rvfl.BayesianRVFL2Regressor.GCV_": {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.GCV_", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.GCV_", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.rvfl.BayesianRVFL2Regressor.return_std": {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.return_std", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.return_std", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.fit", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.fit", "kind": "function", "doc": "<p>Fit BayesianRVFL2Regressor to training data (X, y)</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.predict", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nreturn_std: {boolean}, standard dev. is returned or not\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.sampling": {"fullname": "nnetsauce.sampling", "modulename": "nnetsauce.sampling", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.sampling.SubSampler": {"fullname": "nnetsauce.sampling.SubSampler", "modulename": "nnetsauce.sampling", "qualname": "SubSampler", "kind": "class", "doc": "<p>Subsampling class.</p>\n\n<p>Attributes:</p>\n\n<p>y: array-like, shape = [n_samples]\n       Target values.</p>\n\n<p>row_sample: double\n       subsampling fraction</p>\n\n<p>n_samples: int\n        subsampling by using the number of rows (supersedes row_sample)</p>\n\n<p>seed: int\n       reproductibility seed</p>\n\n<p>n_jobs: int\n        number of jobs to run in parallel</p>\n\n<p>verbose: bool\n        print progress messages and bars</p>\n"}, "nnetsauce.sampling.SubSampler.__init__": {"fullname": "nnetsauce.sampling.SubSampler.__init__", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">n_samples</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, "nnetsauce.sampling.SubSampler.y": {"fullname": "nnetsauce.sampling.SubSampler.y", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.y", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.sampling.SubSampler.n_samples": {"fullname": "nnetsauce.sampling.SubSampler.n_samples", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.n_samples", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.sampling.SubSampler.seed": {"fullname": "nnetsauce.sampling.SubSampler.seed", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.seed", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.sampling.SubSampler.indices": {"fullname": "nnetsauce.sampling.SubSampler.indices", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.indices", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.sampling.SubSampler.n_jobs": {"fullname": "nnetsauce.sampling.SubSampler.n_jobs", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.sampling.SubSampler.verbose": {"fullname": "nnetsauce.sampling.SubSampler.verbose", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.sampling.SubSampler.subsample": {"fullname": "nnetsauce.sampling.SubSampler.subsample", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.subsample", "kind": "function", "doc": "<p>Returns indices of subsampled input data.</p>\n\n<p>Examples:</p>\n\n<ul>\n    <li> <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/nnetsauce/demo/thierrymoudiki_20240105_subsampling.ipynb\">20240105_subsampling.ipynb</a> </li>\n    <li> <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/nnetsauce/demo/thierrymoudiki_20240131_subsampling_nsamples.ipynb\">20240131_subsampling_nsamples.ipynb</a> </li>\n</ul>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.simulation": {"fullname": "nnetsauce.simulation", "modulename": "nnetsauce.simulation", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.simulation.generate_sobol": {"fullname": "nnetsauce.simulation.generate_sobol", "modulename": "nnetsauce.simulation", "qualname": "generate_sobol", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_dims</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">n_points</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.simulation.generate_uniform": {"fullname": "nnetsauce.simulation.generate_uniform", "modulename": "nnetsauce.simulation", "qualname": "generate_uniform", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_dims</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">n_points</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.simulation.generate_hammersley": {"fullname": "nnetsauce.simulation.generate_hammersley", "modulename": "nnetsauce.simulation", "qualname": "generate_hammersley", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_dims</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">n_points</span><span class=\"o\">=</span><span class=\"mi\">100</span>, </span><span class=\"param\"><span class=\"n\">primes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.simulation.generate_halton": {"fullname": "nnetsauce.simulation.generate_halton", "modulename": "nnetsauce.simulation", "qualname": "generate_halton", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_dims</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">n_points</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">primes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.simulation.getsims": {"fullname": "nnetsauce.simulation.getsims", "modulename": "nnetsauce.simulation.getsims", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.simulation.getsims.getsims": {"fullname": "nnetsauce.simulation.getsims.getsims", "modulename": "nnetsauce.simulation.getsims", "qualname": "getsims", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_data</span>, </span><span class=\"param\"><span class=\"n\">ix</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests": {"fullname": "nnetsauce.tests", "modulename": "nnetsauce.tests", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.tests.tests_adaboost": {"fullname": "nnetsauce.tests.tests_adaboost", "modulename": "nnetsauce.tests.tests_adaboost", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"fullname": "nnetsauce.tests.tests_adaboost.TestAdaBoost", "modulename": "nnetsauce.tests.tests_adaboost", "qualname": "TestAdaBoost", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_AdaBoost": {"fullname": "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_AdaBoost", "modulename": "nnetsauce.tests.tests_adaboost", "qualname": "TestAdaBoost.test_AdaBoost", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_score": {"fullname": "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_score", "modulename": "nnetsauce.tests.tests_adaboost", "qualname": "TestAdaBoost.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_base": {"fullname": "nnetsauce.tests.tests_base", "modulename": "nnetsauce.tests.tests_base", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.tests.tests_base.TestBase": {"fullname": "nnetsauce.tests.tests_base.TestBase", "modulename": "nnetsauce.tests.tests_base", "qualname": "TestBase", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, "nnetsauce.tests.tests_base.TestBase.test_base": {"fullname": "nnetsauce.tests.tests_base.TestBase.test_base", "modulename": "nnetsauce.tests.tests_base", "qualname": "TestBase.test_base", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_base.TestBase.test_score": {"fullname": "nnetsauce.tests.tests_base.TestBase.test_score", "modulename": "nnetsauce.tests.tests_base", "qualname": "TestBase.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_custom": {"fullname": "nnetsauce.tests.tests_custom", "modulename": "nnetsauce.tests.tests_custom", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.tests.tests_custom.TestCustom": {"fullname": "nnetsauce.tests.tests_custom.TestCustom", "modulename": "nnetsauce.tests.tests_custom", "qualname": "TestCustom", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, "nnetsauce.tests.tests_custom.TestCustom.test_custom": {"fullname": "nnetsauce.tests.tests_custom.TestCustom.test_custom", "modulename": "nnetsauce.tests.tests_custom", "qualname": "TestCustom.test_custom", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_custom.TestCustom.test_score": {"fullname": "nnetsauce.tests.tests_custom.TestCustom.test_score", "modulename": "nnetsauce.tests.tests_custom", "qualname": "TestCustom.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_download": {"fullname": "nnetsauce.tests.tests_download", "modulename": "nnetsauce.tests.tests_download", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.tests.tests_download.TestDownload": {"fullname": "nnetsauce.tests.tests_download.TestDownload", "modulename": "nnetsauce.tests.tests_download", "qualname": "TestDownload", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, "nnetsauce.tests.tests_download.TestDownload.test_download": {"fullname": "nnetsauce.tests.tests_download.TestDownload.test_download", "modulename": "nnetsauce.tests.tests_download", "qualname": "TestDownload.test_download", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_lazy_custom": {"fullname": "nnetsauce.tests.tests_lazy_custom", "modulename": "nnetsauce.tests.tests_lazy_custom", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"fullname": "nnetsauce.tests.tests_lazy_custom.TestLazyCustom", "modulename": "nnetsauce.tests.tests_lazy_custom", "qualname": "TestLazyCustom", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom.test_custom": {"fullname": "nnetsauce.tests.tests_lazy_custom.TestLazyCustom.test_custom", "modulename": "nnetsauce.tests.tests_lazy_custom", "qualname": "TestLazyCustom.test_custom", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_model_selection": {"fullname": "nnetsauce.tests.tests_model_selection", "modulename": "nnetsauce.tests.tests_model_selection", "kind": "module", "doc": "<p>Created on Thu May 16 16:37:42 2019</p>\n\n<p>@author: moudiki</p>\n"}, "nnetsauce.tests.tests_model_selection.TS_Split": {"fullname": "nnetsauce.tests.tests_model_selection.TS_Split", "modulename": "nnetsauce.tests.tests_model_selection", "qualname": "TS_Split", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"fullname": "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit", "modulename": "nnetsauce.tests.tests_model_selection", "qualname": "TS_Split.test_tsplit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_mtask": {"fullname": "nnetsauce.tests.tests_mtask", "modulename": "nnetsauce.tests.tests_mtask", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.tests.tests_mtask.TestMultitask": {"fullname": "nnetsauce.tests.tests_mtask.TestMultitask", "modulename": "nnetsauce.tests.tests_mtask", "qualname": "TestMultitask", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, "nnetsauce.tests.tests_mtask.TestMultitask.test_Multitask": {"fullname": "nnetsauce.tests.tests_mtask.TestMultitask.test_Multitask", "modulename": "nnetsauce.tests.tests_mtask", "qualname": "TestMultitask.test_Multitask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_mtask.TestMultitask.test_score": {"fullname": "nnetsauce.tests.tests_mtask.TestMultitask.test_score", "modulename": "nnetsauce.tests.tests_mtask", "qualname": "TestMultitask.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_mts": {"fullname": "nnetsauce.tests.tests_mts", "modulename": "nnetsauce.tests.tests_mts", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.tests.tests_mts.TestMTS": {"fullname": "nnetsauce.tests.tests_mts.TestMTS", "modulename": "nnetsauce.tests.tests_mts", "qualname": "TestMTS", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, "nnetsauce.tests.tests_mts.TestMTS.test_MTS": {"fullname": "nnetsauce.tests.tests_mts.TestMTS.test_MTS", "modulename": "nnetsauce.tests.tests_mts", "qualname": "TestMTS.test_MTS", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_mts.TestMTS.test_get_set": {"fullname": "nnetsauce.tests.tests_mts.TestMTS.test_get_set", "modulename": "nnetsauce.tests.tests_mts", "qualname": "TestMTS.test_get_set", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_mts.TestMTS.test_score": {"fullname": "nnetsauce.tests.tests_mts.TestMTS.test_score", "modulename": "nnetsauce.tests.tests_mts", "qualname": "TestMTS.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_randombag": {"fullname": "nnetsauce.tests.tests_randombag", "modulename": "nnetsauce.tests.tests_randombag", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"fullname": "nnetsauce.tests.tests_randombag.TestRandomBag", "modulename": "nnetsauce.tests.tests_randombag", "qualname": "TestRandomBag", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_RandomBag": {"fullname": "nnetsauce.tests.tests_randombag.TestRandomBag.test_RandomBag", "modulename": "nnetsauce.tests.tests_randombag", "qualname": "TestRandomBag.test_RandomBag", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_score": {"fullname": "nnetsauce.tests.tests_randombag.TestRandomBag.test_score", "modulename": "nnetsauce.tests.tests_randombag", "qualname": "TestRandomBag.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_ridge": {"fullname": "nnetsauce.tests.tests_ridge", "modulename": "nnetsauce.tests.tests_ridge", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.tests.tests_ridge.TestRidge": {"fullname": "nnetsauce.tests.tests_ridge.TestRidge", "modulename": "nnetsauce.tests.tests_ridge", "qualname": "TestRidge", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, "nnetsauce.tests.tests_ridge.TestRidge.test_Ridge": {"fullname": "nnetsauce.tests.tests_ridge.TestRidge.test_Ridge", "modulename": "nnetsauce.tests.tests_ridge", "qualname": "TestRidge.test_Ridge", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_ridge.TestRidge.test_score": {"fullname": "nnetsauce.tests.tests_ridge.TestRidge.test_score", "modulename": "nnetsauce.tests.tests_ridge", "qualname": "TestRidge.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_ridge_regression": {"fullname": "nnetsauce.tests.tests_ridge_regression", "modulename": "nnetsauce.tests.tests_ridge_regression", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"fullname": "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor", "modulename": "nnetsauce.tests.tests_ridge_regression", "qualname": "TestRidge2Regressor", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor": {"fullname": "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor", "modulename": "nnetsauce.tests.tests_ridge_regression", "qualname": "TestRidge2Regressor.test_Ridge2Regressor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score": {"fullname": "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score", "modulename": "nnetsauce.tests.tests_ridge_regression", "qualname": "TestRidge2Regressor.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_rvfl": {"fullname": "nnetsauce.tests.tests_rvfl", "modulename": "nnetsauce.tests.tests_rvfl", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"fullname": "nnetsauce.tests.tests_rvfl.TestRVFL", "modulename": "nnetsauce.tests.tests_rvfl", "qualname": "TestRVFL", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_rvfl": {"fullname": "nnetsauce.tests.tests_rvfl.TestRVFL.test_rvfl", "modulename": "nnetsauce.tests.tests_rvfl", "qualname": "TestRVFL.test_rvfl", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set": {"fullname": "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set", "modulename": "nnetsauce.tests.tests_rvfl", "qualname": "TestRVFL.test_get_set", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_score": {"fullname": "nnetsauce.tests.tests_rvfl.TestRVFL.test_score", "modulename": "nnetsauce.tests.tests_rvfl", "qualname": "TestRVFL.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_simulation": {"fullname": "nnetsauce.tests.tests_simulation", "modulename": "nnetsauce.tests.tests_simulation", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.tests.tests_simulation.TestSimul": {"fullname": "nnetsauce.tests.tests_simulation.TestSimul", "modulename": "nnetsauce.tests.tests_simulation", "qualname": "TestSimul", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, "nnetsauce.tests.tests_simulation.TestSimul.test_sobol": {"fullname": "nnetsauce.tests.tests_simulation.TestSimul.test_sobol", "modulename": "nnetsauce.tests.tests_simulation", "qualname": "TestSimul.test_sobol", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_simulation.TestSimul.test_hammersley": {"fullname": "nnetsauce.tests.tests_simulation.TestSimul.test_hammersley", "modulename": "nnetsauce.tests.tests_simulation", "qualname": "TestSimul.test_hammersley", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_simulation.TestSimul.test_halton": {"fullname": "nnetsauce.tests.tests_simulation.TestSimul.test_halton", "modulename": "nnetsauce.tests.tests_simulation", "qualname": "TestSimul.test_halton", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_simulation.TestSimul.test_uniform": {"fullname": "nnetsauce.tests.tests_simulation.TestSimul.test_uniform", "modulename": "nnetsauce.tests.tests_simulation", "qualname": "TestSimul.test_uniform", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_tssplit": {"fullname": "nnetsauce.tests.tests_tssplit", "modulename": "nnetsauce.tests.tests_tssplit", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"fullname": "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit", "modulename": "nnetsauce.tests.tests_tssplit", "qualname": "TestTimeSeriesSplit", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit.test_TimeSeriesSplit": {"fullname": "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit.test_TimeSeriesSplit", "modulename": "nnetsauce.tests.tests_tssplit", "qualname": "TestTimeSeriesSplit.test_TimeSeriesSplit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_utils": {"fullname": "nnetsauce.tests.tests_utils", "modulename": "nnetsauce.tests.tests_utils", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.tests.tests_utils.TestUtils": {"fullname": "nnetsauce.tests.tests_utils.TestUtils", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, "nnetsauce.tests.tests_utils.TestUtils.test_crossprod": {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_crossprod", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_crossprod", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_utils.TestUtils.test_tcrossprod": {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_tcrossprod", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_tcrossprod", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_utils.TestUtils.test_cbind": {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_cbind", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_cbind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_utils.TestUtils.test_rbind": {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_rbind", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_rbind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_merge_two_dicts", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_utils.TestUtils.test_psd_check": {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_psd_check", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_psd_check", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_utils.TestUtils.test_nearestPD": {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_nearestPD", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_nearestPD", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_inv_penalized_cov", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_lmf_beta_hat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_MTS_train_inputs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_MTS_reformat_response", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_beta_Sigma_hat_rvfl", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_beta_Sigma_hat_rvfl2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.tests.utilstests": {"fullname": "nnetsauce.tests.utilstests", "modulename": "nnetsauce.tests.utilstests", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.tests.utilstests.test_check": {"fullname": "nnetsauce.tests.utilstests.test_check", "modulename": "nnetsauce.tests.utilstests", "qualname": "test_check", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils": {"fullname": "nnetsauce.utils", "modulename": "nnetsauce.utils", "kind": "module", "doc": "<p></p>\n"}, "nnetsauce.utils.beta_hat": {"fullname": "nnetsauce.utils.beta_hat", "modulename": "nnetsauce.utils", "qualname": "beta_hat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">lam</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.inv_penalized_cov": {"fullname": "nnetsauce.utils.inv_penalized_cov", "modulename": "nnetsauce.utils", "qualname": "inv_penalized_cov", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">lam</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.cbind": {"fullname": "nnetsauce.utils.cbind", "modulename": "nnetsauce.utils", "qualname": "cbind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.delete_last_columns": {"fullname": "nnetsauce.utils.delete_last_columns", "modulename": "nnetsauce.utils", "qualname": "delete_last_columns", "kind": "function", "doc": "<p>Delete the last 'num_columns' columns from a DataFrame.</p>\n\n<p>Parameters:\n    x: pandas DataFrame or tuple or DataFrames.\n    num_columns (int): Number of columns to delete from the end.\n    inplace (bool): Whether to modify the DataFrame in place. Default is False.</p>\n\n<p>Returns:\n    DataFrame: Modified DataFrame if inplace=False, None otherwise.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">num_columns</span>, </span><span class=\"param\"><span class=\"n\">inplace</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.rbind": {"fullname": "nnetsauce.utils.rbind", "modulename": "nnetsauce.utils", "qualname": "rbind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.convert_df_to_numeric": {"fullname": "nnetsauce.utils.convert_df_to_numeric", "modulename": "nnetsauce.utils", "qualname": "convert_df_to_numeric", "kind": "function", "doc": "<p>Convert all columns of DataFrame to numeric type using astype with loop.</p>\n\n<p>Parameters:\n    df (pd.DataFrame): Input DataFrame with mixed data types.</p>\n\n<p>Returns:\n    pd.DataFrame: DataFrame with all columns converted to numeric type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.crossprod": {"fullname": "nnetsauce.utils.crossprod", "modulename": "nnetsauce.utils", "qualname": "crossprod", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.tcrossprod": {"fullname": "nnetsauce.utils.tcrossprod", "modulename": "nnetsauce.utils", "qualname": "tcrossprod", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.to_np_array": {"fullname": "nnetsauce.utils.to_np_array", "modulename": "nnetsauce.utils", "qualname": "to_np_array", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.merge_two_dicts": {"fullname": "nnetsauce.utils.merge_two_dicts", "modulename": "nnetsauce.utils", "qualname": "merge_two_dicts", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.is_factor": {"fullname": "nnetsauce.utils.is_factor", "modulename": "nnetsauce.utils", "qualname": "is_factor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.isPD": {"fullname": "nnetsauce.utils.isPD", "modulename": "nnetsauce.utils", "qualname": "isPD", "kind": "function", "doc": "<p>Returns true when input is positive-definite, via Cholesky</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">B</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.nearestPD": {"fullname": "nnetsauce.utils.nearestPD", "modulename": "nnetsauce.utils", "qualname": "nearestPD", "kind": "function", "doc": "<p>Find the nearest positive-definite matrix to input</p>\n\n<p>A Python/Numpy port of John D'Errico's <code>nearestSPD</code> MATLAB code [1], which\ncredits [2].</p>\n\n<p>[1] <a href=\"https://www.mathworks.com/matlabcentral/fileexchange/42885-nearestspd\">https://www.mathworks.com/matlabcentral/fileexchange/42885-nearestspd</a></p>\n\n<p>[2] N.J. Higham, \"Computing a nearest symmetric positive semidefinite\nmatrix\" (1988): <a href=\"https://doi.org/10.1016/0024-3795(88)90223-6\">https://doi.org/10.1016/0024-3795(88)90223-6</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.compute_output_dates": {"fullname": "nnetsauce.utils.compute_output_dates", "modulename": "nnetsauce.utils", "qualname": "compute_output_dates", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">horizon</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.create_lags": {"fullname": "nnetsauce.utils.create_lags", "modulename": "nnetsauce.utils", "qualname": "create_lags", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">k</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.create_train_inputs": {"fullname": "nnetsauce.utils.create_train_inputs", "modulename": "nnetsauce.utils", "qualname": "create_train_inputs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">k</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.reformat_response": {"fullname": "nnetsauce.utils.reformat_response", "modulename": "nnetsauce.utils", "qualname": "reformat_response", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">k</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.tuple_map": {"fullname": "nnetsauce.utils.tuple_map", "modulename": "nnetsauce.utils", "qualname": "tuple_map", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">foo</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.TimeSeriesSplit": {"fullname": "nnetsauce.utils.TimeSeriesSplit", "modulename": "nnetsauce.utils", "qualname": "TimeSeriesSplit", "kind": "class", "doc": "<p>Time Series cross-validator</p>\n", "bases": "sklearn.model_selection._split.TimeSeriesSplit"}, "nnetsauce.utils.TimeSeriesSplit.__init__": {"fullname": "nnetsauce.utils.TimeSeriesSplit.__init__", "modulename": "nnetsauce.utils", "qualname": "TimeSeriesSplit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_splits</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">max_train_size</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, "nnetsauce.utils.TimeSeriesSplit.split": {"fullname": "nnetsauce.utils.TimeSeriesSplit.split", "modulename": "nnetsauce.utils", "qualname": "TimeSeriesSplit.split", "kind": "function", "doc": "<p>Generate indices to split data into training and test set.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : array-like, shape (n_samples, n_features)\n    Training data, where n_samples is the number of samples\n    and n_features is the number of features.</p>\n\n<p>initial_window : int, initial number of consecutive values in each\n                 training set sample</p>\n\n<p>horizon : int, number of consecutive values in test set sample</p>\n\n<p>fixed_window : boolean, if False, all training samples start at index 0</p>\n\n<p>y : array-like, shape (n_samples,)\n    Always ignored, exists for compatibility.</p>\n\n<p>groups : array-like, with shape (n_samples,)\n    Always ignored, exists for compatibility.</p>\n\n<h2 id=\"yields\">Yields</h2>\n\n<p>train : ndarray\n    The training set indices for that split.</p>\n\n<p>test : ndarray\n    The testing set indices for that split.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">initial_window</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">horizon</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_window</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"fullname": "nnetsauce.utils.TimeSeriesSplit.set_split_request", "modulename": "nnetsauce.utils", "qualname": "TimeSeriesSplit.set_split_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.Progbar": {"fullname": "nnetsauce.utils.Progbar", "modulename": "nnetsauce.utils", "qualname": "Progbar", "kind": "class", "doc": "<p>Displays a progress bar.</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<pre><code>target: Total number of steps expected, None if unknown.\nwidth: Progress bar width on screen.\nverbose: Verbosity mode, 0 (silent), 1 (verbose), 2 (semi-verbose)\nstateful_metrics: Iterable of string names of metrics that\n    should *not* be averaged over time. Metrics in this list\n    will be displayed as-is. All others will be averaged\n    by the progbar before display.\ninterval: Minimum visual progress update interval (in seconds).\n</code></pre>\n"}, "nnetsauce.utils.Progbar.__init__": {"fullname": "nnetsauce.utils.Progbar.__init__", "modulename": "nnetsauce.utils", "qualname": "Progbar.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">target</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">30</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>, </span><span class=\"param\"><span class=\"n\">stateful_metrics</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, "nnetsauce.utils.Progbar.target": {"fullname": "nnetsauce.utils.Progbar.target", "modulename": "nnetsauce.utils", "qualname": "Progbar.target", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.utils.Progbar.width": {"fullname": "nnetsauce.utils.Progbar.width", "modulename": "nnetsauce.utils", "qualname": "Progbar.width", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.utils.Progbar.verbose": {"fullname": "nnetsauce.utils.Progbar.verbose", "modulename": "nnetsauce.utils", "qualname": "Progbar.verbose", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.utils.Progbar.interval": {"fullname": "nnetsauce.utils.Progbar.interval", "modulename": "nnetsauce.utils", "qualname": "Progbar.interval", "kind": "variable", "doc": "<p></p>\n"}, "nnetsauce.utils.Progbar.update": {"fullname": "nnetsauce.utils.Progbar.update", "modulename": "nnetsauce.utils", "qualname": "Progbar.update", "kind": "function", "doc": "<p>Updates the progress bar.</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<pre><code>current: Index of current step.\nvalues: List of tuples:\n    `(name, value_for_last_step)`.\n    If `name` is in `stateful_metrics`,\n    `value_for_last_step` will be displayed as-is.\n    Else, an average of the metric over time will be displayed.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">current</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.Progbar.add": {"fullname": "nnetsauce.utils.Progbar.add", "modulename": "nnetsauce.utils", "qualname": "Progbar.add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, "nnetsauce.utils.winkler_score": {"fullname": "nnetsauce.utils.winkler_score", "modulename": "nnetsauce.utils", "qualname": "winkler_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span>, </span><span class=\"param\"><span class=\"n\">actual</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}}, "docInfo": {"nnetsauce": {"qualname": 0, "fullname": 1, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.AdaBoostClassifier": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 1088}, "nnetsauce.AdaBoostClassifier.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 309, "bases": 0, "doc": 3}, "nnetsauce.AdaBoostClassifier.type_fit": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.AdaBoostClassifier.verbose": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.AdaBoostClassifier.method": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.AdaBoostClassifier.reg_lambda": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.AdaBoostClassifier.reg_alpha": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.AdaBoostClassifier.alpha_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.AdaBoostClassifier.base_learners_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.AdaBoostClassifier.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 79}, "nnetsauce.AdaBoostClassifier.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.AdaBoostClassifier.predict_proba": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 69}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.AdaBoostClassifier.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.Base": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 256}, "nnetsauce.Base.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 227, "bases": 0, "doc": 3}, "nnetsauce.Base.n_hidden_features": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.activation_name": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.a": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.nodes_sim": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.bias": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.seed": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.backend": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.dropout": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.direct_link": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.cluster_encode": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.type_clust": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.type_scaling": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.col_sample": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.row_sample": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.n_clusters": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.subsampler_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.index_col_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.index_row_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.clustering_obj_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.clustering_scaler_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.nn_scaler_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.scaler_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.encoder_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.W_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.X_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.y_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.y_mean_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.beta_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.activation_func": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Base.encode_clusters": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 81}, "nnetsauce.Base.create_layer": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 73}, "nnetsauce.Base.cook_training_set": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 93}, "nnetsauce.Base.cook_test_set": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 69}, "nnetsauce.Base.score": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 99}, "nnetsauce.Base.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.BaseRegressor": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 257}, "nnetsauce.BaseRegressor.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 227, "bases": 0, "doc": 3}, "nnetsauce.BaseRegressor.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 73}, "nnetsauce.BaseRegressor.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.BaseRegressor.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.BayesianRVFLRegressor": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 296}, "nnetsauce.BayesianRVFLRegressor.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 239, "bases": 0, "doc": 3}, "nnetsauce.BayesianRVFLRegressor.s": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.BayesianRVFLRegressor.sigma": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.BayesianRVFLRegressor.beta_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.BayesianRVFLRegressor.Sigma_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.BayesianRVFLRegressor.GCV_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.BayesianRVFLRegressor.return_std": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.BayesianRVFLRegressor.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 73}, "nnetsauce.BayesianRVFLRegressor.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 73}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.BayesianRVFL2Regressor": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 309}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 251, "bases": 0, "doc": 3}, "nnetsauce.BayesianRVFL2Regressor.s1": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.BayesianRVFL2Regressor.s2": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.BayesianRVFL2Regressor.sigma": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.BayesianRVFL2Regressor.beta_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.BayesianRVFL2Regressor.Sigma_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.BayesianRVFL2Regressor.GCV_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.BayesianRVFL2Regressor.return_std": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.BayesianRVFL2Regressor.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 73}, "nnetsauce.BayesianRVFL2Regressor.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 73}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.CustomClassifier": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 1016}, "nnetsauce.CustomClassifier.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 233, "bases": 0, "doc": 3}, "nnetsauce.CustomClassifier.type_fit": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.CustomClassifier.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 78}, "nnetsauce.CustomClassifier.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.CustomClassifier.predict_proba": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 69}, "nnetsauce.CustomClassifier.set_fit_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.CustomClassifier.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.CustomRegressor": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 365}, "nnetsauce.CustomRegressor.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 267, "bases": 0, "doc": 3}, "nnetsauce.CustomRegressor.type_fit": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.CustomRegressor.type_pi": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.CustomRegressor.replications": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.CustomRegressor.kernel": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.CustomRegressor.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 78}, "nnetsauce.CustomRegressor.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 139}, "nnetsauce.CustomRegressor.set_fit_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.CustomRegressor.set_predict_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.CustomRegressor.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.DeepClassifier": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 309}, "nnetsauce.DeepClassifier.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 256, "bases": 0, "doc": 3}, "nnetsauce.DeepClassifier.stacked_obj": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.DeepClassifier.verbose": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.DeepClassifier.n_layers": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.DeepClassifier.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 64}, "nnetsauce.DeepClassifier.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 64}, "nnetsauce.DeepClassifier.predict_proba": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 69}, "nnetsauce.DeepClassifier.score": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 99}, "nnetsauce.DeepClassifier.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.DeepRegressor": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 307}, "nnetsauce.DeepRegressor.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 256, "bases": 0, "doc": 3}, "nnetsauce.DeepRegressor.stacked_obj": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.DeepRegressor.verbose": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.DeepRegressor.n_layers": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.DeepRegressor.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 64}, "nnetsauce.DeepRegressor.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 139}, "nnetsauce.DeepRegressor.score": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 99}, "nnetsauce.DeepRegressor.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.DeepMTS": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 1322}, "nnetsauce.DeepMTS.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 308, "bases": 0, "doc": 3}, "nnetsauce.DeepMTS.n_layers": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.DeepMTS.obj": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.DeepMTS.set_fit_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.DeepMTS.set_predict_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.DeepMTS.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.Downloader": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "nnetsauce.Downloader.pkgname": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Downloader.dataset": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Downloader.source": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Downloader.url": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Downloader.request": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Downloader.download": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 103}, "nnetsauce.GLMClassifier": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 283}, "nnetsauce.GLMClassifier.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 285, "bases": 0, "doc": 3}, "nnetsauce.GLMClassifier.family": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.GLMClassifier.logit_loss": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "nnetsauce.GLMClassifier.expit_erf_loss": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "nnetsauce.GLMClassifier.loss_func": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 79, "bases": 0, "doc": 3}, "nnetsauce.GLMClassifier.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 78}, "nnetsauce.GLMClassifier.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.GLMClassifier.predict_proba": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 69}, "nnetsauce.GLMClassifier.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.GLMRegressor": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 292}, "nnetsauce.GLMRegressor.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 285, "bases": 0, "doc": 3}, "nnetsauce.GLMRegressor.family": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.GLMRegressor.gaussian_loss": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "nnetsauce.GLMRegressor.laplace_loss": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "nnetsauce.GLMRegressor.poisson_loss": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "nnetsauce.GLMRegressor.loss_func": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 3}, "nnetsauce.GLMRegressor.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 78}, "nnetsauce.GLMRegressor.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.GLMRegressor.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.LazyClassifier": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 513}, "nnetsauce.LazyClassifier.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 350, "bases": 0, "doc": 3}, "nnetsauce.LazyClassifier.verbose": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyClassifier.ignore_warnings": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyClassifier.custom_metric": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyClassifier.predictions": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyClassifier.sort_by": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyClassifier.models": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyClassifier.random_state": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyClassifier.estimators": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyClassifier.preprocess": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyClassifier.n_jobs": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyClassifier.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 141}, "nnetsauce.LazyClassifier.provide_models": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 146}, "nnetsauce.LazyClassifier.set_fit_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.LazyClassifier.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.LazyRegressor": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 520}, "nnetsauce.LazyRegressor.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 334, "bases": 0, "doc": 3}, "nnetsauce.LazyRegressor.verbose": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyRegressor.ignore_warnings": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyRegressor.custom_metric": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyRegressor.predictions": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyRegressor.models": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyRegressor.random_state": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyRegressor.estimators": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyRegressor.preprocess": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyRegressor.n_jobs": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyRegressor.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 149}, "nnetsauce.LazyRegressor.provide_models": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 143}, "nnetsauce.LazyRegressor.set_fit_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.LazyRegressor.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.LazyMTS": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 230}, "nnetsauce.LazyMTS.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 374, "bases": 0, "doc": 3}, "nnetsauce.LazyMTS.verbose": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyMTS.ignore_warnings": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyMTS.custom_metric": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyMTS.predictions": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyMTS.models": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyMTS.random_state": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyMTS.estimators": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyMTS.preprocess": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyMTS.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 122}, "nnetsauce.LazyMTS.provide_models": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 105}, "nnetsauce.LazyMTS.set_fit_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.LazyMTS.set_predict_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.LazyMTS.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.LazyDeepClassifier": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 544}, "nnetsauce.LazyDeepClassifier.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 362, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepClassifier.verbose": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepClassifier.ignore_warnings": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepClassifier.custom_metric": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepClassifier.predictions": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepClassifier.sort_by": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepClassifier.models": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepClassifier.random_state": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepClassifier.estimators": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepClassifier.preprocess": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepClassifier.n_layers": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepClassifier.n_jobs": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepClassifier.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 141}, "nnetsauce.LazyDeepClassifier.provide_models": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 146}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.LazyDeepClassifier.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.LazyDeepRegressor": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 296}, "nnetsauce.LazyDeepRegressor.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 346, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepRegressor.verbose": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepRegressor.ignore_warnings": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepRegressor.custom_metric": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepRegressor.predictions": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepRegressor.models": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepRegressor.random_state": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepRegressor.estimators": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepRegressor.preprocess": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepRegressor.n_layers": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepRegressor.n_jobs": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepRegressor.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 148}, "nnetsauce.LazyDeepRegressor.provide_models": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 147}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.LazyDeepRegressor.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.LazyDeepMTS": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 231}, "nnetsauce.LazyDeepMTS.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 386, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepMTS.verbose": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepMTS.ignore_warnings": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepMTS.custom_metric": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepMTS.predictions": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepMTS.models": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepMTS.random_state": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepMTS.estimators": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepMTS.preprocess": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepMTS.n_layers": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.LazyDeepMTS.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 129}, "nnetsauce.LazyDeepMTS.provide_models": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 105}, "nnetsauce.LazyDeepMTS.set_fit_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.LazyDeepMTS.set_predict_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.LazyDeepMTS.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.MTS": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 1416}, "nnetsauce.MTS.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 296, "bases": 0, "doc": 3}, "nnetsauce.MTS.obj": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.n_series": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.lags": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.type_pi": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.replications": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.kernel": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.agg": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.verbose": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.show_progress": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.series_names": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.input_dates": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.fit_objs_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.y_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.X_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.xreg_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.y_means_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.mean_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.upper_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.lower_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.output_dates_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.preds_std_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.alpha_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.return_std_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.df_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.residuals_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.residuals_sims_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.kde_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.sims_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.residuals_std_dev_": {"qualname": 5, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.n_obs": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.level": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MTS.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 115}, "nnetsauce.MTS.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 113}, "nnetsauce.MTS.score": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 11}, "nnetsauce.MTS.plot": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 22}, "nnetsauce.MTS.set_fit_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.MTS.set_predict_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.MTS.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.MultitaskClassifier": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 873}, "nnetsauce.MultitaskClassifier.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 233, "bases": 0, "doc": 3}, "nnetsauce.MultitaskClassifier.type_fit": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MultitaskClassifier.obj": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MultitaskClassifier.fit_objs_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.MultitaskClassifier.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 77}, "nnetsauce.MultitaskClassifier.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.MultitaskClassifier.predict_proba": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 69}, "nnetsauce.MultitaskClassifier.set_fit_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.MultitaskClassifier.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.PredictionInterval": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 100}, "nnetsauce.PredictionInterval.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 100, "bases": 0, "doc": 3}, "nnetsauce.PredictionInterval.obj": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.PredictionInterval.method": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.PredictionInterval.level": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.PredictionInterval.type_pi": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.PredictionInterval.replications": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.PredictionInterval.kernel": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.PredictionInterval.agg": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.PredictionInterval.seed": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.PredictionInterval.alpha_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.PredictionInterval.quantile_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.PredictionInterval.icp_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.PredictionInterval.calibrated_residuals_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.PredictionInterval.scaled_calibrated_residuals_": {"qualname": 5, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.PredictionInterval.calibrated_residuals_scaler_": {"qualname": 5, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.PredictionInterval.kde_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.PredictionInterval.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 57}, "nnetsauce.PredictionInterval.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 75}, "nnetsauce.PredictionInterval.set_predict_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.PredictionInterval.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.SimpleMultitaskClassifier": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 615}, "nnetsauce.SimpleMultitaskClassifier.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "nnetsauce.SimpleMultitaskClassifier.type_fit": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.SimpleMultitaskClassifier.obj": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.SimpleMultitaskClassifier.fit_objs_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.SimpleMultitaskClassifier.X_scaler_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.SimpleMultitaskClassifier.scaled_X_": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.SimpleMultitaskClassifier.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 77}, "nnetsauce.SimpleMultitaskClassifier.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 56}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 61}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.Optimizer": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 163}, "nnetsauce.Optimizer.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 136, "bases": 0, "doc": 3}, "nnetsauce.Optimizer.type_optim": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Optimizer.num_iters": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Optimizer.learning_rate": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Optimizer.batch_prop": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Optimizer.learning_method": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Optimizer.randomization": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Optimizer.mass": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Optimizer.decay": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Optimizer.tolerance": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Optimizer.verbose": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Optimizer.opt": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Optimizer.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 65}, "nnetsauce.Optimizer.one_hot_encode": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 3}, "nnetsauce.RandomBagRegressor": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 698}, "nnetsauce.RandomBagRegressor.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 268, "bases": 0, "doc": 3}, "nnetsauce.RandomBagRegressor.type_fit": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.RandomBagRegressor.verbose": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.RandomBagRegressor.n_jobs": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.RandomBagRegressor.voter_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.RandomBagRegressor.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 79}, "nnetsauce.RandomBagRegressor.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 67}, "nnetsauce.RandomBagRegressor.set_predict_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.RandomBagRegressor.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.RandomBagClassifier": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 924}, "nnetsauce.RandomBagClassifier.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 268, "bases": 0, "doc": 3}, "nnetsauce.RandomBagClassifier.type_fit": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.RandomBagClassifier.verbose": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.RandomBagClassifier.n_jobs": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.RandomBagClassifier.voter_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.RandomBagClassifier.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 79}, "nnetsauce.RandomBagClassifier.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 64}, "nnetsauce.RandomBagClassifier.predict_proba": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 69}, "nnetsauce.RandomBagClassifier.set_predict_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"qualname": 5, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.RandomBagClassifier.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.Ridge2Regressor": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 225}, "nnetsauce.Ridge2Regressor.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 215, "bases": 0, "doc": 3}, "nnetsauce.Ridge2Regressor.type_fit": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Ridge2Regressor.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 78}, "nnetsauce.Ridge2Regressor.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.Ridge2Regressor.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.Ridge2Classifier": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 887}, "nnetsauce.Ridge2Classifier.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 244, "bases": 0, "doc": 3}, "nnetsauce.Ridge2Classifier.type_fit": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Ridge2Classifier.solver": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Ridge2Classifier.beta_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Ridge2Classifier.classes_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Ridge2Classifier.minloglik_": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Ridge2Classifier.loglik": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 73}, "nnetsauce.Ridge2Classifier.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 95}, "nnetsauce.Ridge2Classifier.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.Ridge2Classifier.predict_proba": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 69}, "nnetsauce.Ridge2Classifier.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.Ridge2MultitaskClassifier": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 802}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 215, "bases": 0, "doc": 3}, "nnetsauce.Ridge2MultitaskClassifier.type_fit": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 78}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 69}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"qualname": 4, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.SubSampler": {"qualname": 1, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 69}, "nnetsauce.SubSampler.__init__": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 3}, "nnetsauce.SubSampler.y": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.SubSampler.n_samples": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.SubSampler.seed": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.SubSampler.indices": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.SubSampler.n_jobs": {"qualname": 3, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.SubSampler.verbose": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.SubSampler.subsample": {"qualname": 2, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 35}, "nnetsauce.base": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 256}, "nnetsauce.base.Base.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 227, "bases": 0, "doc": 3}, "nnetsauce.base.Base.n_hidden_features": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.activation_name": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.a": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.nodes_sim": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.bias": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.seed": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.backend": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.dropout": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.direct_link": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.cluster_encode": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.type_clust": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.type_scaling": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.col_sample": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.row_sample": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.n_clusters": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.subsampler_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.index_col_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.index_row_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.clustering_obj_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.clustering_scaler_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.nn_scaler_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.scaler_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.encoder_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.W_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.X_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.y_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.y_mean_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.beta_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.activation_func": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.base.Base.encode_clusters": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 81}, "nnetsauce.base.Base.create_layer": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 73}, "nnetsauce.base.Base.cook_training_set": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 93}, "nnetsauce.base.Base.cook_test_set": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 69}, "nnetsauce.base.Base.score": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 99}, "nnetsauce.base.Base.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.base.BaseRegressor": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 257}, "nnetsauce.base.BaseRegressor.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 227, "bases": 0, "doc": 3}, "nnetsauce.base.BaseRegressor.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 73}, "nnetsauce.base.BaseRegressor.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.base.BaseRegressor.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.boosting": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.boosting.AdaBoostClassifier": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 1088}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 309, "bases": 0, "doc": 3}, "nnetsauce.boosting.AdaBoostClassifier.type_fit": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.boosting.AdaBoostClassifier.verbose": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.boosting.AdaBoostClassifier.method": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.boosting.AdaBoostClassifier.reg_lambda": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.boosting.AdaBoostClassifier.reg_alpha": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.boosting.AdaBoostClassifier.alpha_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.boosting.AdaBoostClassifier.base_learners_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 79}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 69}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.custom": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.custom.Custom": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 258}, "nnetsauce.custom.Custom.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 233, "bases": 0, "doc": 3}, "nnetsauce.custom.Custom.obj": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.custom.Custom.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.custom.CustomClassifier": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 1016}, "nnetsauce.custom.CustomClassifier.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 233, "bases": 0, "doc": 3}, "nnetsauce.custom.CustomClassifier.type_fit": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.custom.CustomClassifier.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 78}, "nnetsauce.custom.CustomClassifier.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.custom.CustomClassifier.predict_proba": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 69}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.custom.CustomClassifier.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.custom.CustomRegressor": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 365}, "nnetsauce.custom.CustomRegressor.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 267, "bases": 0, "doc": 3}, "nnetsauce.custom.CustomRegressor.type_fit": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.custom.CustomRegressor.type_pi": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.custom.CustomRegressor.replications": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.custom.CustomRegressor.kernel": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.custom.CustomRegressor.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 78}, "nnetsauce.custom.CustomRegressor.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 43, "bases": 0, "doc": 139}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.custom.CustomRegressor.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.datasets": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.datasets.Downloader": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 12}, "nnetsauce.datasets.Downloader.pkgname": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.datasets.Downloader.dataset": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.datasets.Downloader.source": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.datasets.Downloader.url": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.datasets.Downloader.request": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.datasets.Downloader.download": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 103}, "nnetsauce.deep": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.deep.DeepClassifier": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 309}, "nnetsauce.deep.DeepClassifier.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 256, "bases": 0, "doc": 3}, "nnetsauce.deep.DeepClassifier.stacked_obj": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.deep.DeepClassifier.verbose": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.deep.DeepClassifier.n_layers": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.deep.DeepClassifier.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 64}, "nnetsauce.deep.DeepClassifier.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 64}, "nnetsauce.deep.DeepClassifier.predict_proba": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 69}, "nnetsauce.deep.DeepClassifier.score": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 99}, "nnetsauce.deep.DeepClassifier.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.deep.DeepRegressor": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 307}, "nnetsauce.deep.DeepRegressor.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 256, "bases": 0, "doc": 3}, "nnetsauce.deep.DeepRegressor.stacked_obj": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.deep.DeepRegressor.verbose": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.deep.DeepRegressor.n_layers": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.deep.DeepRegressor.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 64}, "nnetsauce.deep.DeepRegressor.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 139}, "nnetsauce.deep.DeepRegressor.score": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 99}, "nnetsauce.deep.DeepRegressor.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.deep.DeepMTS": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 1322}, "nnetsauce.deep.DeepMTS.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 308, "bases": 0, "doc": 3}, "nnetsauce.deep.DeepMTS.n_layers": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.deep.DeepMTS.obj": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.deep.DeepMTS.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.deep.DeepMTS.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.deep.DeepMTS.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.demo": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.glm": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.glm.GLMClassifier": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 283}, "nnetsauce.glm.GLMClassifier.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 285, "bases": 0, "doc": 3}, "nnetsauce.glm.GLMClassifier.family": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.glm.GLMClassifier.logit_loss": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "nnetsauce.glm.GLMClassifier.loss_func": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 79, "bases": 0, "doc": 3}, "nnetsauce.glm.GLMClassifier.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 78}, "nnetsauce.glm.GLMClassifier.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.glm.GLMClassifier.predict_proba": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 69}, "nnetsauce.glm.GLMClassifier.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.glm.GLMRegressor": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 292}, "nnetsauce.glm.GLMRegressor.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 285, "bases": 0, "doc": 3}, "nnetsauce.glm.GLMRegressor.family": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "nnetsauce.glm.GLMRegressor.loss_func": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 73, "bases": 0, "doc": 3}, "nnetsauce.glm.GLMRegressor.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 78}, "nnetsauce.glm.GLMRegressor.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.glm.GLMRegressor.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.lazypredict": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyClassifier": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 513}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 350, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyClassifier.verbose": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyClassifier.ignore_warnings": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyClassifier.custom_metric": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyClassifier.predictions": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyClassifier.sort_by": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyClassifier.models": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyClassifier.random_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyClassifier.estimators": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyClassifier.preprocess": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyClassifier.n_jobs": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyClassifier.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 141}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 146}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.lazypredict.LazyRegressor": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 520}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 334, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyRegressor.verbose": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyRegressor.ignore_warnings": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyRegressor.custom_metric": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyRegressor.predictions": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyRegressor.models": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyRegressor.random_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyRegressor.estimators": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyRegressor.preprocess": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyRegressor.n_jobs": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyRegressor.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 149}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 143}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.lazypredict.LazyMTS": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 230}, "nnetsauce.lazypredict.LazyMTS.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 374, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyMTS.verbose": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyMTS.ignore_warnings": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyMTS.custom_metric": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyMTS.predictions": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyMTS.models": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyMTS.random_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyMTS.estimators": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyMTS.preprocess": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyMTS.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 122}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 105}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.lazypredict.LazyDeepClassifier": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 544}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 362, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepClassifier.verbose": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepClassifier.ignore_warnings": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepClassifier.custom_metric": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepClassifier.predictions": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepClassifier.sort_by": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepClassifier.models": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepClassifier.random_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepClassifier.estimators": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepClassifier.preprocess": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepClassifier.n_layers": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepClassifier.n_jobs": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 141}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 146}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.lazypredict.LazyDeepRegressor": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 296}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 346, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepRegressor.verbose": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepRegressor.ignore_warnings": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepRegressor.custom_metric": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepRegressor.predictions": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepRegressor.models": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepRegressor.random_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepRegressor.estimators": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepRegressor.preprocess": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepRegressor.n_layers": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepRegressor.n_jobs": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 148}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 147}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.lazypredict.LazyDeepMTS": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 231}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 386, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepMTS.verbose": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepMTS.ignore_warnings": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepMTS.custom_metric": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepMTS.predictions": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepMTS.models": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepMTS.random_state": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepMTS.estimators": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepMTS.preprocess": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepMTS.n_layers": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 129}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 105}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.mts": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 1416}, "nnetsauce.mts.MTS.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 296, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.obj": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.n_series": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.lags": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.type_pi": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.replications": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.kernel": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.agg": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.verbose": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.show_progress": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.series_names": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.input_dates": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.fit_objs_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.y_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.X_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.xreg_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.y_means_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.mean_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.upper_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.lower_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.output_dates_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.preds_std_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.alpha_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.return_std_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.df_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.residuals_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.residuals_sims_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.kde_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.sims_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.residuals_std_dev_": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.n_obs": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.level": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.mts.MTS.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 115}, "nnetsauce.mts.MTS.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 113}, "nnetsauce.mts.MTS.score": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 45, "bases": 0, "doc": 11}, "nnetsauce.mts.MTS.plot": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 22}, "nnetsauce.mts.MTS.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.mts.MTS.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.mts.MTS.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.multitask": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.multitask.MultitaskClassifier": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 873}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 233, "bases": 0, "doc": 3}, "nnetsauce.multitask.MultitaskClassifier.type_fit": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.multitask.MultitaskClassifier.obj": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.multitask.MultitaskClassifier.fit_objs_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.multitask.MultitaskClassifier.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 77}, "nnetsauce.multitask.MultitaskClassifier.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 69}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 615}, "nnetsauce.multitask.SimpleMultitaskClassifier.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 9, "bases": 0, "doc": 3}, "nnetsauce.multitask.SimpleMultitaskClassifier.type_fit": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.multitask.SimpleMultitaskClassifier.obj": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit_objs_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.multitask.SimpleMultitaskClassifier.X_scaler_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.multitask.SimpleMultitaskClassifier.scaled_X_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 39, "bases": 0, "doc": 77}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 56}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 61}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.nonconformist": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.nonconformist.AbsErrorErrFunc": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 32}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 65}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 69}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 30}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 65}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 69}, "nnetsauce.nonconformist.RegressorAdapter": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 675}, "nnetsauce.nonconformist.RegressorAdapter.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 3}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.nonconformist.RegressorNc": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 102}, "nnetsauce.nonconformist.RegressorNc.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 68, "bases": 0, "doc": 3}, "nnetsauce.nonconformist.RegressorNc.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 31, "bases": 0, "doc": 193}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.nonconformist.RegressorNormalizer": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 4, "doc": 675}, "nnetsauce.nonconformist.RegressorNormalizer.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 3}, "nnetsauce.nonconformist.RegressorNormalizer.base_model": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.nonconformist.RegressorNormalizer.normalizer_model": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.nonconformist.RegressorNormalizer.err_func": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.nonconformist.RegressorNormalizer.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 3}, "nnetsauce.nonconformist.RegressorNormalizer.score": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 3}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.nonconformist.IcpRegressor": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 8, "doc": 748}, "nnetsauce.nonconformist.IcpRegressor.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 20, "bases": 0, "doc": 3}, "nnetsauce.nonconformist.IcpRegressor.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 161}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.optimizers": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.optimizers.Optimizer": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 163}, "nnetsauce.optimizers.Optimizer.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 136, "bases": 0, "doc": 3}, "nnetsauce.optimizers.Optimizer.type_optim": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.optimizers.Optimizer.num_iters": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.optimizers.Optimizer.learning_rate": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.optimizers.Optimizer.batch_prop": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.optimizers.Optimizer.learning_method": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.optimizers.Optimizer.randomization": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.optimizers.Optimizer.mass": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.optimizers.Optimizer.decay": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.optimizers.Optimizer.tolerance": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.optimizers.Optimizer.verbose": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.optimizers.Optimizer.opt": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.optimizers.Optimizer.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 65}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 22, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 6, "doc": 100}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 100, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval.obj": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval.method": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval.level": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval.type_pi": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval.replications": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval.kernel": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval.agg": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval.seed": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval.alpha_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval.quantile_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval.icp_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval.scaled_calibrated_residuals_": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_scaler_": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval.kde_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 21, "bases": 0, "doc": 57}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 75}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.randombag": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.randombag.RandomBagClassifier": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 924}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 268, "bases": 0, "doc": 3}, "nnetsauce.randombag.RandomBagClassifier.type_fit": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.randombag.RandomBagClassifier.verbose": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.randombag.RandomBagClassifier.n_jobs": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.randombag.RandomBagClassifier.voter_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.randombag.RandomBagClassifier.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 79}, "nnetsauce.randombag.RandomBagClassifier.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 64}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 69}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"qualname": 5, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.randombag.RandomBagRegressor": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 698}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 268, "bases": 0, "doc": 3}, "nnetsauce.randombag.RandomBagRegressor.type_fit": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.randombag.RandomBagRegressor.verbose": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.randombag.RandomBagRegressor.n_jobs": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.randombag.RandomBagRegressor.voter_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.randombag.RandomBagRegressor.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 79}, "nnetsauce.randombag.RandomBagRegressor.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 33, "bases": 0, "doc": 67}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.ridge2": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.ridge2.Ridge2Classifier": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 887}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 244, "bases": 0, "doc": 3}, "nnetsauce.ridge2.Ridge2Classifier.type_fit": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.ridge2.Ridge2Classifier.solver": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.ridge2.Ridge2Classifier.beta_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.ridge2.Ridge2Classifier.classes_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.ridge2.Ridge2Classifier.minloglik_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 73}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 95}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 69}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.ridge2.Ridge2Regressor": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 225}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 215, "bases": 0, "doc": 3}, "nnetsauce.ridge2.Ridge2Regressor.type_fit": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 78}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 802}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 215, "bases": 0, "doc": 3}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.type_fit": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 78}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 64}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 23, "bases": 0, "doc": 69}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.rvfl": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 296}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 239, "bases": 0, "doc": 3}, "nnetsauce.rvfl.BayesianRVFLRegressor.s": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.rvfl.BayesianRVFLRegressor.sigma": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.rvfl.BayesianRVFLRegressor.beta_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.rvfl.BayesianRVFLRegressor.Sigma_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.rvfl.BayesianRVFLRegressor.GCV_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.rvfl.BayesianRVFLRegressor.return_std": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 73}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 73}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 7, "doc": 309}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 251, "bases": 0, "doc": 3}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s1": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s2": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.rvfl.BayesianRVFL2Regressor.sigma": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.rvfl.BayesianRVFL2Regressor.beta_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.rvfl.BayesianRVFL2Regressor.Sigma_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.rvfl.BayesianRVFL2Regressor.GCV_": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.rvfl.BayesianRVFL2Regressor.return_std": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 28, "bases": 0, "doc": 73}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 34, "bases": 0, "doc": 73}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.sampling": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.sampling.SubSampler": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 69}, "nnetsauce.sampling.SubSampler.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 69, "bases": 0, "doc": 3}, "nnetsauce.sampling.SubSampler.y": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.sampling.SubSampler.n_samples": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.sampling.SubSampler.seed": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.sampling.SubSampler.indices": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.sampling.SubSampler.n_jobs": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.sampling.SubSampler.verbose": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.sampling.SubSampler.subsample": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 35}, "nnetsauce.simulation": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.simulation.generate_sobol": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 3}, "nnetsauce.simulation.generate_uniform": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 38, "bases": 0, "doc": 3}, "nnetsauce.simulation.generate_hammersley": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 3}, "nnetsauce.simulation.generate_halton": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 48, "bases": 0, "doc": 3}, "nnetsauce.simulation.getsims": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.simulation.getsims.getsims": {"qualname": 1, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 17, "bases": 0, "doc": 3}, "nnetsauce.tests": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_adaboost": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 268}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_AdaBoost": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_score": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_base": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_base.TestBase": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 268}, "nnetsauce.tests.tests_base.TestBase.test_base": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_base.TestBase.test_score": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_custom": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_custom.TestCustom": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 268}, "nnetsauce.tests.tests_custom.TestCustom.test_custom": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_custom.TestCustom.test_score": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_download": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_download.TestDownload": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 268}, "nnetsauce.tests.tests_download.TestDownload.test_download": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_lazy_custom": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 268}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom.test_custom": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_model_selection": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 13}, "nnetsauce.tests.tests_model_selection.TS_Split": {"qualname": 2, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 268}, "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"qualname": 4, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_mtask": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_mtask.TestMultitask": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 268}, "nnetsauce.tests.tests_mtask.TestMultitask.test_Multitask": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_mtask.TestMultitask.test_score": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_mts": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_mts.TestMTS": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 268}, "nnetsauce.tests.tests_mts.TestMTS.test_MTS": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_mts.TestMTS.test_get_set": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_mts.TestMTS.test_score": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_randombag": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 268}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_RandomBag": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_score": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_ridge": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_ridge.TestRidge": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 268}, "nnetsauce.tests.tests_ridge.TestRidge.test_Ridge": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_ridge.TestRidge.test_score": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_ridge_regression": {"qualname": 0, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"qualname": 1, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 268}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score": {"qualname": 3, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_rvfl": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 268}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_rvfl": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_score": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_simulation": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_simulation.TestSimul": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 268}, "nnetsauce.tests.tests_simulation.TestSimul.test_sobol": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_simulation.TestSimul.test_hammersley": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_simulation.TestSimul.test_halton": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_simulation.TestSimul.test_uniform": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_tssplit": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 268}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit.test_TimeSeriesSplit": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_utils": {"qualname": 0, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_utils.TestUtils": {"qualname": 1, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 0, "bases": 3, "doc": 268}, "nnetsauce.tests.tests_utils.TestUtils.test_crossprod": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_utils.TestUtils.test_tcrossprod": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_utils.TestUtils.test_cbind": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_utils.TestUtils.test_rbind": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_utils.TestUtils.test_psd_check": {"qualname": 4, "fullname": 8, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_utils.TestUtils.test_nearestPD": {"qualname": 3, "fullname": 7, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"qualname": 5, "fullname": 9, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"qualname": 6, "fullname": 10, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.tests.utilstests": {"qualname": 0, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.tests.utilstests.test_check": {"qualname": 2, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "nnetsauce.utils": {"qualname": 0, "fullname": 2, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.utils.beta_hat": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 40, "bases": 0, "doc": 3}, "nnetsauce.utils.inv_penalized_cov": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 3}, "nnetsauce.utils.cbind": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "nnetsauce.utils.delete_last_columns": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 60}, "nnetsauce.utils.rbind": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 30, "bases": 0, "doc": 3}, "nnetsauce.utils.convert_df_to_numeric": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 43}, "nnetsauce.utils.crossprod": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 3}, "nnetsauce.utils.tcrossprod": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 35, "bases": 0, "doc": 3}, "nnetsauce.utils.to_np_array": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.utils.merge_two_dicts": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "nnetsauce.utils.is_factor": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 3}, "nnetsauce.utils.isPD": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 11}, "nnetsauce.utils.nearestPD": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 63}, "nnetsauce.utils.compute_output_dates": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "nnetsauce.utils.create_lags": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 3}, "nnetsauce.utils.create_train_inputs": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "nnetsauce.utils.reformat_response": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "nnetsauce.utils.tuple_map": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 16, "bases": 0, "doc": 3}, "nnetsauce.utils.TimeSeriesSplit": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 5, "doc": 6}, "nnetsauce.utils.TimeSeriesSplit.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 27, "bases": 0, "doc": 3}, "nnetsauce.utils.TimeSeriesSplit.split": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 75, "bases": 0, "doc": 150}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"qualname": 4, "fullname": 6, "annotation": 0, "default_value": 0, "signature": 11, "bases": 0, "doc": 198}, "nnetsauce.utils.Progbar": {"qualname": 1, "fullname": 3, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 82}, "nnetsauce.utils.Progbar.__init__": {"qualname": 3, "fullname": 5, "annotation": 0, "default_value": 0, "signature": 51, "bases": 0, "doc": 3}, "nnetsauce.utils.Progbar.target": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.utils.Progbar.width": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.utils.Progbar.verbose": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.utils.Progbar.interval": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 0, "bases": 0, "doc": 3}, "nnetsauce.utils.Progbar.update": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 57}, "nnetsauce.utils.Progbar.add": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 3}, "nnetsauce.utils.winkler_score": {"qualname": 2, "fullname": 4, "annotation": 0, "default_value": 0, "signature": 26, "bases": 0, "doc": 3}}, "length": 969, "save": true}, "index": {"qualname": {"root": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.AdaBoostClassifier.alpha_": {"tf": 1}, "nnetsauce.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.Base.subsampler_": {"tf": 1}, "nnetsauce.Base.index_col_": {"tf": 1}, "nnetsauce.Base.index_row_": {"tf": 1}, "nnetsauce.Base.clustering_obj_": {"tf": 1}, "nnetsauce.Base.clustering_scaler_": {"tf": 1}, "nnetsauce.Base.nn_scaler_": {"tf": 1}, "nnetsauce.Base.scaler_": {"tf": 1}, "nnetsauce.Base.encoder_": {"tf": 1}, "nnetsauce.Base.W_": {"tf": 1}, "nnetsauce.Base.X_": {"tf": 1}, "nnetsauce.Base.y_": {"tf": 1}, "nnetsauce.Base.y_mean_": {"tf": 1}, "nnetsauce.Base.beta_": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.beta_": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.Sigma_": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.GCV_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.beta_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.Sigma_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.GCV_": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MTS.fit_objs_": {"tf": 1}, "nnetsauce.MTS.y_": {"tf": 1}, "nnetsauce.MTS.X_": {"tf": 1}, "nnetsauce.MTS.xreg_": {"tf": 1}, "nnetsauce.MTS.y_means_": {"tf": 1}, "nnetsauce.MTS.mean_": {"tf": 1}, "nnetsauce.MTS.upper_": {"tf": 1}, "nnetsauce.MTS.lower_": {"tf": 1}, "nnetsauce.MTS.output_dates_": {"tf": 1}, "nnetsauce.MTS.preds_std_": {"tf": 1}, "nnetsauce.MTS.alpha_": {"tf": 1}, "nnetsauce.MTS.return_std_": {"tf": 1}, "nnetsauce.MTS.df_": {"tf": 1}, "nnetsauce.MTS.residuals_": {"tf": 1}, "nnetsauce.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.MTS.kde_": {"tf": 1}, "nnetsauce.MTS.sims_": {"tf": 1}, "nnetsauce.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.PredictionInterval.alpha_": {"tf": 1}, "nnetsauce.PredictionInterval.quantile_": {"tf": 1}, "nnetsauce.PredictionInterval.icp_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}, "nnetsauce.PredictionInterval.kde_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.voter_": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.voter_": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.beta_": {"tf": 1}, "nnetsauce.Ridge2Classifier.classes_": {"tf": 1}, "nnetsauce.Ridge2Classifier.minloglik_": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.Base.subsampler_": {"tf": 1}, "nnetsauce.base.Base.index_col_": {"tf": 1}, "nnetsauce.base.Base.index_row_": {"tf": 1}, "nnetsauce.base.Base.clustering_obj_": {"tf": 1}, "nnetsauce.base.Base.clustering_scaler_": {"tf": 1}, "nnetsauce.base.Base.nn_scaler_": {"tf": 1}, "nnetsauce.base.Base.scaler_": {"tf": 1}, "nnetsauce.base.Base.encoder_": {"tf": 1}, "nnetsauce.base.Base.W_": {"tf": 1}, "nnetsauce.base.Base.X_": {"tf": 1}, "nnetsauce.base.Base.y_": {"tf": 1}, "nnetsauce.base.Base.y_mean_": {"tf": 1}, "nnetsauce.base.Base.beta_": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.alpha_": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.fit_objs_": {"tf": 1}, "nnetsauce.mts.MTS.y_": {"tf": 1}, "nnetsauce.mts.MTS.X_": {"tf": 1}, "nnetsauce.mts.MTS.xreg_": {"tf": 1}, "nnetsauce.mts.MTS.y_means_": {"tf": 1}, "nnetsauce.mts.MTS.mean_": {"tf": 1}, "nnetsauce.mts.MTS.upper_": {"tf": 1}, "nnetsauce.mts.MTS.lower_": {"tf": 1}, "nnetsauce.mts.MTS.output_dates_": {"tf": 1}, "nnetsauce.mts.MTS.preds_std_": {"tf": 1}, "nnetsauce.mts.MTS.alpha_": {"tf": 1}, "nnetsauce.mts.MTS.return_std_": {"tf": 1}, "nnetsauce.mts.MTS.df_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.mts.MTS.kde_": {"tf": 1}, "nnetsauce.mts.MTS.sims_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.alpha_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.quantile_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.icp_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.kde_": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.voter_": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.voter_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.beta_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.classes_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.minloglik_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.beta_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.Sigma_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.GCV_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.beta_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.Sigma_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.GCV_": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 1}, "nnetsauce.utils.Progbar.__init__": {"tf": 1}}, "df": 175, "a": {"docs": {"nnetsauce.Base.a": {"tf": 1}, "nnetsauce.base.Base.a": {"tf": 1}}, "df": 2, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost.test_AdaBoost": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.AdaBoostClassifier.type_fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.verbose": {"tf": 1}, "nnetsauce.AdaBoostClassifier.method": {"tf": 1}, "nnetsauce.AdaBoostClassifier.reg_lambda": {"tf": 1}, "nnetsauce.AdaBoostClassifier.reg_alpha": {"tf": 1}, "nnetsauce.AdaBoostClassifier.alpha_": {"tf": 1}, "nnetsauce.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.type_fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.verbose": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.method": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.reg_lambda": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.reg_alpha": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.alpha_": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}}, "df": 28}}}}}}}}}}}}}}}}, "d": {"docs": {"nnetsauce.utils.Progbar.add": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.AdaBoostClassifier.reg_alpha": {"tf": 1}, "nnetsauce.AdaBoostClassifier.alpha_": {"tf": 1}, "nnetsauce.MTS.alpha_": {"tf": 1}, "nnetsauce.PredictionInterval.alpha_": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.reg_alpha": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.alpha_": {"tf": 1}, "nnetsauce.mts.MTS.alpha_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.alpha_": {"tf": 1}}, "df": 8}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Base.activation_name": {"tf": 1}, "nnetsauce.Base.activation_func": {"tf": 1}, "nnetsauce.base.Base.activation_name": {"tf": 1}, "nnetsauce.base.Base.activation_func": {"tf": 1}}, "df": 4}}}}}}}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.MTS.agg": {"tf": 1}, "nnetsauce.PredictionInterval.agg": {"tf": 1}, "nnetsauce.mts.MTS.agg": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.agg": {"tf": 1}}, "df": 4}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.utils.to_np_array": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 1}, "nnetsauce.utils.Progbar.__init__": {"tf": 1}}, "df": 65}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"nnetsauce.Base.index_col_": {"tf": 1}, "nnetsauce.Base.index_row_": {"tf": 1}, "nnetsauce.base.Base.index_col_": {"tf": 1}, "nnetsauce.base.Base.index_row_": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.SubSampler.indices": {"tf": 1}, "nnetsauce.sampling.SubSampler.indices": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.MTS.input_dates": {"tf": 1}, "nnetsauce.mts.MTS.input_dates": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"tf": 1}, "nnetsauce.utils.create_train_inputs": {"tf": 1}}, "df": 2}}}}, "v": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"tf": 1}, "nnetsauce.utils.inv_penalized_cov": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.utils.Progbar.interval": {"tf": 1}}, "df": 1}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.LazyRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.LazyMTS.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepMTS.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.ignore_warnings": {"tf": 1}}, "df": 12}}}}}, "c": {"docs": {}, "df": 0, "p": {"docs": {"nnetsauce.PredictionInterval.icp_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.icp_": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.__init__": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}}, "df": 5}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Optimizer.num_iters": {"tf": 1}, "nnetsauce.optimizers.Optimizer.num_iters": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"nnetsauce.utils.is_factor": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.utils.isPD": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.type_fit": {"tf": 1}, "nnetsauce.Base.type_clust": {"tf": 1}, "nnetsauce.Base.type_scaling": {"tf": 1}, "nnetsauce.CustomClassifier.type_fit": {"tf": 1}, "nnetsauce.CustomRegressor.type_fit": {"tf": 1}, "nnetsauce.CustomRegressor.type_pi": {"tf": 1}, "nnetsauce.MTS.type_pi": {"tf": 1}, "nnetsauce.MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.PredictionInterval.type_pi": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.Optimizer.type_optim": {"tf": 1}, "nnetsauce.RandomBagRegressor.type_fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.type_fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.type_fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.type_fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.base.Base.type_clust": {"tf": 1}, "nnetsauce.base.Base.type_scaling": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.type_fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.type_fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.type_fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.type_pi": {"tf": 1}, "nnetsauce.mts.MTS.type_pi": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.optimizers.Optimizer.type_optim": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.type_pi": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.type_fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.type_fit": {"tf": 1}}, "df": 32}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"tf": 1}, "nnetsauce.utils.create_train_inputs": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_AdaBoost": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_score": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase.test_base": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase.test_score": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom.test_custom": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom.test_score": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload.test_download": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom.test_custom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_Multitask": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_score": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_MTS": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_score": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_RandomBag": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_score": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge.test_Ridge": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge.test_score": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_rvfl": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_score": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_sobol": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_hammersley": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_halton": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_uniform": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit.test_TimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_crossprod": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_tcrossprod": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_cbind": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_rbind": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_psd_check": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_nearestPD": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1}, "nnetsauce.tests.utilstests.test_check": {"tf": 1}}, "df": 44, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_AdaBoost": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_score": {"tf": 1}}, "df": 3}}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase.test_base": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase.test_score": {"tf": 1}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom.test_custom": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom.test_score": {"tf": 1}}, "df": 3}}}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload.test_download": {"tf": 1}}, "df": 2}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom.test_custom": {"tf": 1}}, "df": 2}}}}}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_Multitask": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_score": {"tf": 1}}, "df": 3}}}}}}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_MTS": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_score": {"tf": 1}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_RandomBag": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_score": {"tf": 1}}, "df": 3}}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"2": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score": {"tf": 1}}, "df": 3}}}}}}}}}}, "docs": {"nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge.test_Ridge": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge.test_score": {"tf": 1}}, "df": 3}}}}, "v": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_rvfl": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_score": {"tf": 1}}, "df": 4}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_sobol": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_hammersley": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_halton": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_uniform": {"tf": 1}}, "df": 5}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit.test_TimeSeriesSplit": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_crossprod": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_tcrossprod": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_cbind": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_rbind": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_psd_check": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_nearestPD": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1}}, "df": 14}}}}}}}}, "o": {"docs": {"nnetsauce.utils.convert_df_to_numeric": {"tf": 1}, "nnetsauce.utils.to_np_array": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Optimizer.tolerance": {"tf": 1}, "nnetsauce.optimizers.Optimizer.tolerance": {"tf": 1}}, "df": 2}}}}}}}}, "s": {"docs": {"nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"tf": 1}}, "df": 2, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit.test_TimeSeriesSplit": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_tcrossprod": {"tf": 1}, "nnetsauce.utils.tcrossprod": {"tf": 1}}, "df": 2}}}}}}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"tf": 1}, "nnetsauce.utils.merge_two_dicts": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.tuple_map": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.utils.Progbar.target": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier.type_fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.CustomClassifier.type_fit": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.type_fit": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.fit": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.fit_objs_": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.type_fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.type_fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.type_fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.type_fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.type_fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.type_fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.type_fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.fit_objs_": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.type_fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.type_fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}}, "df": 109}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Base.n_hidden_features": {"tf": 1}, "nnetsauce.base.Base.n_hidden_features": {"tf": 1}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.Base.activation_func": {"tf": 1}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.base.Base.activation_func": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.err_func": {"tf": 1}}, "df": 7}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.GLMClassifier.family": {"tf": 1}, "nnetsauce.GLMRegressor.family": {"tf": 1}, "nnetsauce.glm.GLMClassifier.family": {"tf": 1}, "nnetsauce.glm.GLMRegressor.family": {"tf": 1}}, "df": 4}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.utils.is_factor": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.verbose": {"tf": 1}, "nnetsauce.DeepClassifier.verbose": {"tf": 1}, "nnetsauce.DeepRegressor.verbose": {"tf": 1}, "nnetsauce.LazyClassifier.verbose": {"tf": 1}, "nnetsauce.LazyRegressor.verbose": {"tf": 1}, "nnetsauce.LazyMTS.verbose": {"tf": 1}, "nnetsauce.LazyDeepClassifier.verbose": {"tf": 1}, "nnetsauce.LazyDeepRegressor.verbose": {"tf": 1}, "nnetsauce.LazyDeepMTS.verbose": {"tf": 1}, "nnetsauce.MTS.verbose": {"tf": 1}, "nnetsauce.Optimizer.verbose": {"tf": 1}, "nnetsauce.RandomBagRegressor.verbose": {"tf": 1}, "nnetsauce.RandomBagClassifier.verbose": {"tf": 1}, "nnetsauce.SubSampler.verbose": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.verbose": {"tf": 1}, "nnetsauce.deep.DeepClassifier.verbose": {"tf": 1}, "nnetsauce.deep.DeepRegressor.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.verbose": {"tf": 1}, "nnetsauce.mts.MTS.verbose": {"tf": 1}, "nnetsauce.optimizers.Optimizer.verbose": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.verbose": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.verbose": {"tf": 1}, "nnetsauce.sampling.SubSampler.verbose": {"tf": 1}, "nnetsauce.utils.Progbar.verbose": {"tf": 1}}, "df": 29}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.RandomBagRegressor.voter_": {"tf": 1}, "nnetsauce.RandomBagClassifier.voter_": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.voter_": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.voter_": {"tf": 1}}, "df": 4}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier.method": {"tf": 1}, "nnetsauce.PredictionInterval.method": {"tf": 1}, "nnetsauce.Optimizer.learning_method": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.method": {"tf": 1}, "nnetsauce.optimizers.Optimizer.learning_method": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.method": {"tf": 1}}, "df": 6}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.LazyClassifier.custom_metric": {"tf": 1}, "nnetsauce.LazyRegressor.custom_metric": {"tf": 1}, "nnetsauce.LazyMTS.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepClassifier.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepRegressor.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepMTS.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.custom_metric": {"tf": 1}}, "df": 12}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Base.y_mean_": {"tf": 1}, "nnetsauce.MTS.mean_": {"tf": 1}, "nnetsauce.base.Base.y_mean_": {"tf": 1}, "nnetsauce.mts.MTS.mean_": {"tf": 1}}, "df": 4, "s": {"docs": {"nnetsauce.MTS.y_means_": {"tf": 1}, "nnetsauce.mts.MTS.y_means_": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"tf": 1}, "nnetsauce.utils.merge_two_dicts": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.nonconformist.RegressorNormalizer.base_model": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.LazyClassifier.models": {"tf": 1}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.models": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}}, "df": 24}}}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MTS.obj": {"tf": 1}, "nnetsauce.MTS.n_series": {"tf": 1}, "nnetsauce.MTS.lags": {"tf": 1}, "nnetsauce.MTS.type_pi": {"tf": 1}, "nnetsauce.MTS.replications": {"tf": 1}, "nnetsauce.MTS.kernel": {"tf": 1}, "nnetsauce.MTS.agg": {"tf": 1}, "nnetsauce.MTS.verbose": {"tf": 1}, "nnetsauce.MTS.show_progress": {"tf": 1}, "nnetsauce.MTS.series_names": {"tf": 1}, "nnetsauce.MTS.input_dates": {"tf": 1}, "nnetsauce.MTS.fit_objs_": {"tf": 1}, "nnetsauce.MTS.y_": {"tf": 1}, "nnetsauce.MTS.X_": {"tf": 1}, "nnetsauce.MTS.xreg_": {"tf": 1}, "nnetsauce.MTS.y_means_": {"tf": 1}, "nnetsauce.MTS.mean_": {"tf": 1}, "nnetsauce.MTS.upper_": {"tf": 1}, "nnetsauce.MTS.lower_": {"tf": 1}, "nnetsauce.MTS.output_dates_": {"tf": 1}, "nnetsauce.MTS.preds_std_": {"tf": 1}, "nnetsauce.MTS.alpha_": {"tf": 1}, "nnetsauce.MTS.return_std_": {"tf": 1}, "nnetsauce.MTS.df_": {"tf": 1}, "nnetsauce.MTS.residuals_": {"tf": 1}, "nnetsauce.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.MTS.kde_": {"tf": 1}, "nnetsauce.MTS.sims_": {"tf": 1}, "nnetsauce.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.MTS.n_obs": {"tf": 1}, "nnetsauce.MTS.level": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.score": {"tf": 1}, "nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.obj": {"tf": 1}, "nnetsauce.mts.MTS.n_series": {"tf": 1}, "nnetsauce.mts.MTS.lags": {"tf": 1}, "nnetsauce.mts.MTS.type_pi": {"tf": 1}, "nnetsauce.mts.MTS.replications": {"tf": 1}, "nnetsauce.mts.MTS.kernel": {"tf": 1}, "nnetsauce.mts.MTS.agg": {"tf": 1}, "nnetsauce.mts.MTS.verbose": {"tf": 1}, "nnetsauce.mts.MTS.show_progress": {"tf": 1}, "nnetsauce.mts.MTS.series_names": {"tf": 1}, "nnetsauce.mts.MTS.input_dates": {"tf": 1}, "nnetsauce.mts.MTS.fit_objs_": {"tf": 1}, "nnetsauce.mts.MTS.y_": {"tf": 1}, "nnetsauce.mts.MTS.X_": {"tf": 1}, "nnetsauce.mts.MTS.xreg_": {"tf": 1}, "nnetsauce.mts.MTS.y_means_": {"tf": 1}, "nnetsauce.mts.MTS.mean_": {"tf": 1}, "nnetsauce.mts.MTS.upper_": {"tf": 1}, "nnetsauce.mts.MTS.lower_": {"tf": 1}, "nnetsauce.mts.MTS.output_dates_": {"tf": 1}, "nnetsauce.mts.MTS.preds_std_": {"tf": 1}, "nnetsauce.mts.MTS.alpha_": {"tf": 1}, "nnetsauce.mts.MTS.return_std_": {"tf": 1}, "nnetsauce.mts.MTS.df_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.mts.MTS.kde_": {"tf": 1}, "nnetsauce.mts.MTS.sims_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.mts.MTS.n_obs": {"tf": 1}, "nnetsauce.mts.MTS.level": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.score": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_MTS": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"tf": 1}}, "df": 83}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.tests.tests_mtask.TestMultitask.test_Multitask": {"tf": 1}}, "df": 1, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.obj": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.obj": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}}, "df": 20}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Optimizer.mass": {"tf": 1}, "nnetsauce.optimizers.Optimizer.mass": {"tf": 1}}, "df": 2}}, "p": {"docs": {"nnetsauce.utils.tuple_map": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.Ridge2Classifier.minloglik_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.minloglik_": {"tf": 1}}, "df": 2}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier.reg_lambda": {"tf": 1}, "nnetsauce.AdaBoostClassifier.reg_alpha": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.reg_lambda": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.reg_alpha": {"tf": 1}}, "df": 4, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}}, "df": 4}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}}, "df": 6}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.base_model": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.err_func": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.score": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}}, "df": 9}}}}}}}}}}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.Downloader.request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.datasets.Downloader.request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 115}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.BayesianRVFLRegressor.return_std": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.return_std": {"tf": 1}, "nnetsauce.MTS.return_std_": {"tf": 1}, "nnetsauce.mts.MTS.return_std_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.return_std": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.return_std": {"tf": 1}}, "df": 6}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.CustomRegressor.replications": {"tf": 1}, "nnetsauce.MTS.replications": {"tf": 1}, "nnetsauce.PredictionInterval.replications": {"tf": 1}, "nnetsauce.custom.CustomRegressor.replications": {"tf": 1}, "nnetsauce.mts.MTS.replications": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.replications": {"tf": 1}}, "df": 6}}}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.MTS.residuals_": {"tf": 1}, "nnetsauce.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}}, "df": 12}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"tf": 1}, "nnetsauce.utils.reformat_response": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"tf": 1}, "nnetsauce.utils.reformat_response": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"nnetsauce.Base.row_sample": {"tf": 1}, "nnetsauce.Base.index_row_": {"tf": 1}, "nnetsauce.base.Base.row_sample": {"tf": 1}, "nnetsauce.base.Base.index_row_": {"tf": 1}}, "df": 4}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.LazyClassifier.random_state": {"tf": 1}, "nnetsauce.LazyRegressor.random_state": {"tf": 1}, "nnetsauce.LazyMTS.random_state": {"tf": 1}, "nnetsauce.LazyDeepClassifier.random_state": {"tf": 1}, "nnetsauce.LazyDeepRegressor.random_state": {"tf": 1}, "nnetsauce.LazyDeepMTS.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.random_state": {"tf": 1}}, "df": 12, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Optimizer.randomization": {"tf": 1}, "nnetsauce.optimizers.Optimizer.randomization": {"tf": 1}}, "df": 2}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.tests.tests_randombag.TestRandomBag.test_RandomBag": {"tf": 1}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.type_fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.verbose": {"tf": 1}, "nnetsauce.RandomBagRegressor.n_jobs": {"tf": 1}, "nnetsauce.RandomBagRegressor.voter_": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.type_fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.verbose": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.n_jobs": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.voter_": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}}, "df": 20}}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.type_fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.verbose": {"tf": 1}, "nnetsauce.RandomBagClassifier.n_jobs": {"tf": 1}, "nnetsauce.RandomBagClassifier.voter_": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.type_fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.verbose": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.n_jobs": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.voter_": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}}, "df": 24}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Optimizer.learning_rate": {"tf": 1}, "nnetsauce.optimizers.Optimizer.learning_rate": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"2": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.type_fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor": {"tf": 1}}, "df": 13}}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.type_fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.solver": {"tf": 1}, "nnetsauce.Ridge2Classifier.beta_": {"tf": 1}, "nnetsauce.Ridge2Classifier.classes_": {"tf": 1}, "nnetsauce.Ridge2Classifier.minloglik_": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.solver": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.beta_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.classes_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.minloglik_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}}, "df": 24}}}}}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}}, "df": 14}}}}}}}}}}}}}}}}}}}}, "docs": {"nnetsauce.tests.tests_ridge.TestRidge.test_Ridge": {"tf": 1}}, "df": 1}}}}, "v": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"2": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1}}, "df": 1}, "docs": {"nnetsauce.tests.tests_rvfl.TestRVFL.test_rvfl": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1}}, "df": 2}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_rbind": {"tf": 1}, "nnetsauce.utils.rbind": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.AdaBoostClassifier.reg_lambda": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.reg_lambda": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.DeepClassifier.n_layers": {"tf": 1}, "nnetsauce.DeepRegressor.n_layers": {"tf": 1}, "nnetsauce.DeepMTS.n_layers": {"tf": 1}, "nnetsauce.LazyDeepClassifier.n_layers": {"tf": 1}, "nnetsauce.LazyDeepRegressor.n_layers": {"tf": 1}, "nnetsauce.LazyDeepMTS.n_layers": {"tf": 1}, "nnetsauce.deep.DeepClassifier.n_layers": {"tf": 1}, "nnetsauce.deep.DeepRegressor.n_layers": {"tf": 1}, "nnetsauce.deep.DeepMTS.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.n_layers": {"tf": 1}}, "df": 12}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"tf": 1}}, "df": 2}}}}}, "z": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.verbose": {"tf": 1}, "nnetsauce.LazyClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.LazyClassifier.custom_metric": {"tf": 1}, "nnetsauce.LazyClassifier.predictions": {"tf": 1}, "nnetsauce.LazyClassifier.sort_by": {"tf": 1}, "nnetsauce.LazyClassifier.models": {"tf": 1}, "nnetsauce.LazyClassifier.random_state": {"tf": 1}, "nnetsauce.LazyClassifier.estimators": {"tf": 1}, "nnetsauce.LazyClassifier.preprocess": {"tf": 1}, "nnetsauce.LazyClassifier.n_jobs": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.sort_by": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}}, "df": 32}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.verbose": {"tf": 1}, "nnetsauce.LazyRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.LazyRegressor.custom_metric": {"tf": 1}, "nnetsauce.LazyRegressor.predictions": {"tf": 1}, "nnetsauce.LazyRegressor.models": {"tf": 1}, "nnetsauce.LazyRegressor.random_state": {"tf": 1}, "nnetsauce.LazyRegressor.estimators": {"tf": 1}, "nnetsauce.LazyRegressor.preprocess": {"tf": 1}, "nnetsauce.LazyRegressor.n_jobs": {"tf": 1}, "nnetsauce.LazyRegressor.fit": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}}, "df": 30}}}}}}}}}, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyMTS.verbose": {"tf": 1}, "nnetsauce.LazyMTS.ignore_warnings": {"tf": 1}, "nnetsauce.LazyMTS.custom_metric": {"tf": 1}, "nnetsauce.LazyMTS.predictions": {"tf": 1}, "nnetsauce.LazyMTS.models": {"tf": 1}, "nnetsauce.LazyMTS.random_state": {"tf": 1}, "nnetsauce.LazyMTS.estimators": {"tf": 1}, "nnetsauce.LazyMTS.preprocess": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}}, "df": 30}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.verbose": {"tf": 1}, "nnetsauce.LazyDeepClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepClassifier.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepClassifier.predictions": {"tf": 1}, "nnetsauce.LazyDeepClassifier.sort_by": {"tf": 1}, "nnetsauce.LazyDeepClassifier.models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.random_state": {"tf": 1}, "nnetsauce.LazyDeepClassifier.estimators": {"tf": 1}, "nnetsauce.LazyDeepClassifier.preprocess": {"tf": 1}, "nnetsauce.LazyDeepClassifier.n_layers": {"tf": 1}, "nnetsauce.LazyDeepClassifier.n_jobs": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.sort_by": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}}, "df": 34}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.verbose": {"tf": 1}, "nnetsauce.LazyDeepRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepRegressor.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepRegressor.predictions": {"tf": 1}, "nnetsauce.LazyDeepRegressor.models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.random_state": {"tf": 1}, "nnetsauce.LazyDeepRegressor.estimators": {"tf": 1}, "nnetsauce.LazyDeepRegressor.preprocess": {"tf": 1}, "nnetsauce.LazyDeepRegressor.n_layers": {"tf": 1}, "nnetsauce.LazyDeepRegressor.n_jobs": {"tf": 1}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}}, "df": 32}}}}}}}}}, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.verbose": {"tf": 1}, "nnetsauce.LazyDeepMTS.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepMTS.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepMTS.predictions": {"tf": 1}, "nnetsauce.LazyDeepMTS.models": {"tf": 1}, "nnetsauce.LazyDeepMTS.random_state": {"tf": 1}, "nnetsauce.LazyDeepMTS.estimators": {"tf": 1}, "nnetsauce.LazyDeepMTS.preprocess": {"tf": 1}, "nnetsauce.LazyDeepMTS.n_layers": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}}, "df": 32}}}}}}}}}, "g": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.MTS.lags": {"tf": 1}, "nnetsauce.mts.MTS.lags": {"tf": 1}, "nnetsauce.utils.create_lags": {"tf": 1}}, "df": 3}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.base_learners_": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.Optimizer.learning_rate": {"tf": 1}, "nnetsauce.Optimizer.learning_method": {"tf": 1}, "nnetsauce.optimizers.Optimizer.learning_rate": {"tf": 1}, "nnetsauce.optimizers.Optimizer.learning_method": {"tf": 1}}, "df": 4}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.MTS.level": {"tf": 1}, "nnetsauce.PredictionInterval.level": {"tf": 1}, "nnetsauce.mts.MTS.level": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.level": {"tf": 1}}, "df": 4}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.Base.direct_link": {"tf": 1}, "nnetsauce.base.Base.direct_link": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.logit_loss": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.glm.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}}, "df": 14}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.MTS.lower_": {"tf": 1}, "nnetsauce.mts.MTS.lower_": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "f": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.Base.n_hidden_features": {"tf": 1}, "nnetsauce.Base.activation_name": {"tf": 1}, "nnetsauce.Base.a": {"tf": 1}, "nnetsauce.Base.nodes_sim": {"tf": 1}, "nnetsauce.Base.bias": {"tf": 1}, "nnetsauce.Base.seed": {"tf": 1}, "nnetsauce.Base.backend": {"tf": 1}, "nnetsauce.Base.dropout": {"tf": 1}, "nnetsauce.Base.direct_link": {"tf": 1}, "nnetsauce.Base.cluster_encode": {"tf": 1}, "nnetsauce.Base.type_clust": {"tf": 1}, "nnetsauce.Base.type_scaling": {"tf": 1}, "nnetsauce.Base.col_sample": {"tf": 1}, "nnetsauce.Base.row_sample": {"tf": 1}, "nnetsauce.Base.n_clusters": {"tf": 1}, "nnetsauce.Base.subsampler_": {"tf": 1}, "nnetsauce.Base.index_col_": {"tf": 1}, "nnetsauce.Base.index_row_": {"tf": 1}, "nnetsauce.Base.clustering_obj_": {"tf": 1}, "nnetsauce.Base.clustering_scaler_": {"tf": 1}, "nnetsauce.Base.nn_scaler_": {"tf": 1}, "nnetsauce.Base.scaler_": {"tf": 1}, "nnetsauce.Base.encoder_": {"tf": 1}, "nnetsauce.Base.W_": {"tf": 1}, "nnetsauce.Base.X_": {"tf": 1}, "nnetsauce.Base.y_": {"tf": 1}, "nnetsauce.Base.y_mean_": {"tf": 1}, "nnetsauce.Base.beta_": {"tf": 1}, "nnetsauce.Base.activation_func": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.Base.n_hidden_features": {"tf": 1}, "nnetsauce.base.Base.activation_name": {"tf": 1}, "nnetsauce.base.Base.a": {"tf": 1}, "nnetsauce.base.Base.nodes_sim": {"tf": 1}, "nnetsauce.base.Base.bias": {"tf": 1}, "nnetsauce.base.Base.seed": {"tf": 1}, "nnetsauce.base.Base.backend": {"tf": 1}, "nnetsauce.base.Base.dropout": {"tf": 1}, "nnetsauce.base.Base.direct_link": {"tf": 1}, "nnetsauce.base.Base.cluster_encode": {"tf": 1}, "nnetsauce.base.Base.type_clust": {"tf": 1}, "nnetsauce.base.Base.type_scaling": {"tf": 1}, "nnetsauce.base.Base.col_sample": {"tf": 1}, "nnetsauce.base.Base.row_sample": {"tf": 1}, "nnetsauce.base.Base.n_clusters": {"tf": 1}, "nnetsauce.base.Base.subsampler_": {"tf": 1}, "nnetsauce.base.Base.index_col_": {"tf": 1}, "nnetsauce.base.Base.index_row_": {"tf": 1}, "nnetsauce.base.Base.clustering_obj_": {"tf": 1}, "nnetsauce.base.Base.clustering_scaler_": {"tf": 1}, "nnetsauce.base.Base.nn_scaler_": {"tf": 1}, "nnetsauce.base.Base.scaler_": {"tf": 1}, "nnetsauce.base.Base.encoder_": {"tf": 1}, "nnetsauce.base.Base.W_": {"tf": 1}, "nnetsauce.base.Base.X_": {"tf": 1}, "nnetsauce.base.Base.y_": {"tf": 1}, "nnetsauce.base.Base.y_mean_": {"tf": 1}, "nnetsauce.base.Base.beta_": {"tf": 1}, "nnetsauce.base.Base.activation_func": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.base_model": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase.test_base": {"tf": 1}}, "df": 78, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}}, "df": 10}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Base.backend": {"tf": 1}, "nnetsauce.base.Base.backend": {"tf": 1}}, "df": 2}}}}}, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"2": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.s1": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.s2": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.sigma": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.beta_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.Sigma_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.GCV_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.return_std": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s1": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s2": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.sigma": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.beta_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.Sigma_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.GCV_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.return_std": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}}, "df": 26}}}}}}}}}}, "docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.s": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.sigma": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.beta_": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.Sigma_": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.GCV_": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.return_std": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.s": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.sigma": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.beta_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.Sigma_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.GCV_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.return_std": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}}, "df": 24}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.Optimizer.batch_prop": {"tf": 1}, "nnetsauce.optimizers.Optimizer.batch_prop": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Base.bias": {"tf": 1}, "nnetsauce.base.Base.bias": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.Base.beta_": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.beta_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.beta_": {"tf": 1}, "nnetsauce.Ridge2Classifier.beta_": {"tf": 1}, "nnetsauce.base.Base.beta_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.beta_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.beta_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.beta_": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1}, "nnetsauce.utils.beta_hat": {"tf": 1}}, "df": 12}}}, "y": {"docs": {"nnetsauce.LazyClassifier.sort_by": {"tf": 1}, "nnetsauce.LazyDeepClassifier.sort_by": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.sort_by": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.sort_by": {"tf": 1}}, "df": 4}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}}, "df": 83, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyClassifier.predictions": {"tf": 1}, "nnetsauce.LazyRegressor.predictions": {"tf": 1}, "nnetsauce.LazyMTS.predictions": {"tf": 1}, "nnetsauce.LazyDeepClassifier.predictions": {"tf": 1}, "nnetsauce.LazyDeepRegressor.predictions": {"tf": 1}, "nnetsauce.LazyDeepMTS.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.predictions": {"tf": 1}}, "df": 12}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.PredictionInterval.obj": {"tf": 1}, "nnetsauce.PredictionInterval.method": {"tf": 1}, "nnetsauce.PredictionInterval.level": {"tf": 1}, "nnetsauce.PredictionInterval.type_pi": {"tf": 1}, "nnetsauce.PredictionInterval.replications": {"tf": 1}, "nnetsauce.PredictionInterval.kernel": {"tf": 1}, "nnetsauce.PredictionInterval.agg": {"tf": 1}, "nnetsauce.PredictionInterval.seed": {"tf": 1}, "nnetsauce.PredictionInterval.alpha_": {"tf": 1}, "nnetsauce.PredictionInterval.quantile_": {"tf": 1}, "nnetsauce.PredictionInterval.icp_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}, "nnetsauce.PredictionInterval.kde_": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.obj": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.method": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.level": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.type_pi": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.replications": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.kernel": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.agg": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.seed": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.alpha_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.quantile_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.icp_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.kde_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}}, "df": 42}}}}}}}}}}}}}}, "s": {"docs": {"nnetsauce.MTS.preds_std_": {"tf": 1}, "nnetsauce.mts.MTS.preds_std_": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyClassifier.preprocess": {"tf": 1}, "nnetsauce.LazyRegressor.preprocess": {"tf": 1}, "nnetsauce.LazyMTS.preprocess": {"tf": 1}, "nnetsauce.LazyDeepClassifier.preprocess": {"tf": 1}, "nnetsauce.LazyDeepRegressor.preprocess": {"tf": 1}, "nnetsauce.LazyDeepMTS.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.preprocess": {"tf": 1}}, "df": 12}}}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}}, "df": 20}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}}, "df": 12}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.MTS.show_progress": {"tf": 1}, "nnetsauce.mts.MTS.show_progress": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}, "nnetsauce.utils.Progbar.__init__": {"tf": 1}, "nnetsauce.utils.Progbar.target": {"tf": 1}, "nnetsauce.utils.Progbar.width": {"tf": 1}, "nnetsauce.utils.Progbar.verbose": {"tf": 1}, "nnetsauce.utils.Progbar.interval": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1}, "nnetsauce.utils.Progbar.add": {"tf": 1}}, "df": 8}}}}, "p": {"docs": {"nnetsauce.Optimizer.batch_prop": {"tf": 1}, "nnetsauce.optimizers.Optimizer.batch_prop": {"tf": 1}}, "df": 2}}}, "i": {"docs": {"nnetsauce.CustomRegressor.type_pi": {"tf": 1}, "nnetsauce.MTS.type_pi": {"tf": 1}, "nnetsauce.PredictionInterval.type_pi": {"tf": 1}, "nnetsauce.custom.CustomRegressor.type_pi": {"tf": 1}, "nnetsauce.mts.MTS.type_pi": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.type_pi": {"tf": 1}}, "df": 6}, "k": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Downloader.pkgname": {"tf": 1}, "nnetsauce.datasets.Downloader.pkgname": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_psd_check": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"tf": 1}, "nnetsauce.utils.inv_penalized_cov": {"tf": 1}}, "df": 2}}}}}}}}}, "s": {"1": {"docs": {"nnetsauce.BayesianRVFL2Regressor.s1": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s1": {"tf": 1}}, "df": 2}, "2": {"docs": {"nnetsauce.BayesianRVFL2Regressor.s2": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s2": {"tf": 1}}, "df": 2}, "docs": {"nnetsauce.BayesianRVFLRegressor.s": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.s": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 119}, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Base.seed": {"tf": 1}, "nnetsauce.PredictionInterval.seed": {"tf": 1}, "nnetsauce.SubSampler.seed": {"tf": 1}, "nnetsauce.base.Base.seed": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.seed": {"tf": 1}, "nnetsauce.sampling.SubSampler.seed": {"tf": 1}}, "df": 6}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.MTS.n_series": {"tf": 1}, "nnetsauce.MTS.series_names": {"tf": 1}, "nnetsauce.mts.MTS.n_series": {"tf": 1}, "nnetsauce.mts.MTS.series_names": {"tf": 1}}, "df": 4}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.score": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.score": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.score": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_score": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase.test_score": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom.test_score": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_score": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_score": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_score": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge.test_score": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_score": {"tf": 1}, "nnetsauce.utils.winkler_score": {"tf": 1}}, "df": 76}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.Base.type_scaling": {"tf": 1}, "nnetsauce.base.Base.type_scaling": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Base.clustering_scaler_": {"tf": 1}, "nnetsauce.Base.nn_scaler_": {"tf": 1}, "nnetsauce.Base.scaler_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.base.Base.clustering_scaler_": {"tf": 1}, "nnetsauce.base.Base.nn_scaler_": {"tf": 1}, "nnetsauce.base.Base.scaler_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}}, "df": 10}, "d": {"docs": {"nnetsauce.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.Base.nodes_sim": {"tf": 1}, "nnetsauce.base.Base.nodes_sim": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.MTS.sims_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.mts.MTS.sims_": {"tf": 1}}, "df": 4}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.obj": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.obj": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}}, "df": 24}}}}}}}}}}}}}}}}}}}}}}}, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.BayesianRVFLRegressor.sigma": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.Sigma_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.sigma": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.Sigma_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.sigma": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.Sigma_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.sigma": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.Sigma_": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1}}, "df": 10}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Base.col_sample": {"tf": 1}, "nnetsauce.Base.row_sample": {"tf": 1}, "nnetsauce.base.Base.col_sample": {"tf": 1}, "nnetsauce.base.Base.row_sample": {"tf": 1}}, "df": 4, "s": {"docs": {"nnetsauce.SubSampler.n_samples": {"tf": 1}, "nnetsauce.sampling.SubSampler.n_samples": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.SubSampler.subsample": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}}, "df": 2, "r": {"docs": {"nnetsauce.Base.subsampler_": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.SubSampler.y": {"tf": 1}, "nnetsauce.SubSampler.n_samples": {"tf": 1}, "nnetsauce.SubSampler.seed": {"tf": 1}, "nnetsauce.SubSampler.indices": {"tf": 1}, "nnetsauce.SubSampler.n_jobs": {"tf": 1}, "nnetsauce.SubSampler.verbose": {"tf": 1}, "nnetsauce.SubSampler.subsample": {"tf": 1}, "nnetsauce.base.Base.subsampler_": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}, "nnetsauce.sampling.SubSampler.y": {"tf": 1}, "nnetsauce.sampling.SubSampler.n_samples": {"tf": 1}, "nnetsauce.sampling.SubSampler.seed": {"tf": 1}, "nnetsauce.sampling.SubSampler.indices": {"tf": 1}, "nnetsauce.sampling.SubSampler.n_jobs": {"tf": 1}, "nnetsauce.sampling.SubSampler.verbose": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}}, "df": 20}}}}}}}}}, "t": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.BayesianRVFLRegressor.return_std": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.return_std": {"tf": 1}, "nnetsauce.MTS.preds_std_": {"tf": 1}, "nnetsauce.MTS.return_std_": {"tf": 1}, "nnetsauce.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.mts.MTS.preds_std_": {"tf": 1}, "nnetsauce.mts.MTS.return_std_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.return_std": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.return_std": {"tf": 1}}, "df": 10}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.DeepClassifier.stacked_obj": {"tf": 1}, "nnetsauce.DeepRegressor.stacked_obj": {"tf": 1}, "nnetsauce.deep.DeepClassifier.stacked_obj": {"tf": 1}, "nnetsauce.deep.DeepRegressor.stacked_obj": {"tf": 1}}, "df": 4}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyClassifier.random_state": {"tf": 1}, "nnetsauce.LazyRegressor.random_state": {"tf": 1}, "nnetsauce.LazyMTS.random_state": {"tf": 1}, "nnetsauce.LazyDeepClassifier.random_state": {"tf": 1}, "nnetsauce.LazyDeepRegressor.random_state": {"tf": 1}, "nnetsauce.LazyDeepMTS.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.random_state": {"tf": 1}}, "df": 12}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Downloader.source": {"tf": 1}, "nnetsauce.datasets.Downloader.source": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyClassifier.sort_by": {"tf": 1}, "nnetsauce.LazyDeepClassifier.sort_by": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.sort_by": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.sort_by": {"tf": 1}}, "df": 4}}, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Ridge2Classifier.solver": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.solver": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.simulation.generate_sobol": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_sobol": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"nnetsauce.MTS.show_progress": {"tf": 1}, "nnetsauce.mts.MTS.show_progress": {"tf": 1}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 4}}}}}, "n": {"docs": {"nnetsauce.Base.n_hidden_features": {"tf": 1}, "nnetsauce.Base.n_clusters": {"tf": 1}, "nnetsauce.DeepClassifier.n_layers": {"tf": 1}, "nnetsauce.DeepRegressor.n_layers": {"tf": 1}, "nnetsauce.DeepMTS.n_layers": {"tf": 1}, "nnetsauce.LazyClassifier.n_jobs": {"tf": 1}, "nnetsauce.LazyRegressor.n_jobs": {"tf": 1}, "nnetsauce.LazyDeepClassifier.n_layers": {"tf": 1}, "nnetsauce.LazyDeepClassifier.n_jobs": {"tf": 1}, "nnetsauce.LazyDeepRegressor.n_layers": {"tf": 1}, "nnetsauce.LazyDeepRegressor.n_jobs": {"tf": 1}, "nnetsauce.LazyDeepMTS.n_layers": {"tf": 1}, "nnetsauce.MTS.n_series": {"tf": 1}, "nnetsauce.MTS.n_obs": {"tf": 1}, "nnetsauce.RandomBagRegressor.n_jobs": {"tf": 1}, "nnetsauce.RandomBagClassifier.n_jobs": {"tf": 1}, "nnetsauce.SubSampler.n_samples": {"tf": 1}, "nnetsauce.SubSampler.n_jobs": {"tf": 1}, "nnetsauce.base.Base.n_hidden_features": {"tf": 1}, "nnetsauce.base.Base.n_clusters": {"tf": 1}, "nnetsauce.deep.DeepClassifier.n_layers": {"tf": 1}, "nnetsauce.deep.DeepRegressor.n_layers": {"tf": 1}, "nnetsauce.deep.DeepMTS.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.n_layers": {"tf": 1}, "nnetsauce.mts.MTS.n_series": {"tf": 1}, "nnetsauce.mts.MTS.n_obs": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.n_jobs": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.n_jobs": {"tf": 1}, "nnetsauce.sampling.SubSampler.n_samples": {"tf": 1}, "nnetsauce.sampling.SubSampler.n_jobs": {"tf": 1}}, "df": 36, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Base.activation_name": {"tf": 1}, "nnetsauce.base.Base.activation_name": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.MTS.series_names": {"tf": 1}, "nnetsauce.mts.MTS.series_names": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Base.nodes_sim": {"tf": 1}, "nnetsauce.base.Base.nodes_sim": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1}}, "df": 1}}}}}}}}}, "n": {"docs": {"nnetsauce.Base.nn_scaler_": {"tf": 1}, "nnetsauce.base.Base.nn_scaler_": {"tf": 1}}, "df": 2}, "u": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.Optimizer.num_iters": {"tf": 1}, "nnetsauce.optimizers.Optimizer.num_iters": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.utils.convert_df_to_numeric": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_nearestPD": {"tf": 1}, "nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 2}}}}}}}}, "p": {"docs": {"nnetsauce.utils.to_np_array": {"tf": 1}}, "df": 1}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Base.n_hidden_features": {"tf": 1}, "nnetsauce.base.Base.n_hidden_features": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.simulation.generate_hammersley": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_hammersley": {"tf": 1}}, "df": 2}}}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.simulation.generate_halton": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_halton": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1}, "nnetsauce.utils.beta_hat": {"tf": 1}}, "df": 4}}}, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Base.dropout": {"tf": 1}, "nnetsauce.base.Base.dropout": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Base.direct_link": {"tf": 1}, "nnetsauce.base.Base.direct_link": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"tf": 1}, "nnetsauce.utils.merge_two_dicts": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.stacked_obj": {"tf": 1}, "nnetsauce.DeepClassifier.verbose": {"tf": 1}, "nnetsauce.DeepClassifier.n_layers": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.stacked_obj": {"tf": 1}, "nnetsauce.deep.DeepClassifier.verbose": {"tf": 1}, "nnetsauce.deep.DeepClassifier.n_layers": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}}, "df": 20}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.stacked_obj": {"tf": 1}, "nnetsauce.DeepRegressor.verbose": {"tf": 1}, "nnetsauce.DeepRegressor.n_layers": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.stacked_obj": {"tf": 1}, "nnetsauce.deep.DeepRegressor.verbose": {"tf": 1}, "nnetsauce.deep.DeepRegressor.n_layers": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}}, "df": 18}}}}}}}}}, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.DeepMTS.n_layers": {"tf": 1}, "nnetsauce.DeepMTS.obj": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.n_layers": {"tf": 1}, "nnetsauce.deep.DeepMTS.obj": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}}, "df": 14}}}}}, "v": {"docs": {"nnetsauce.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_std_dev_": {"tf": 1}}, "df": 2}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.Optimizer.decay": {"tf": 1}, "nnetsauce.optimizers.Optimizer.decay": {"tf": 1}}, "df": 2}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload.test_download": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Downloader": {"tf": 1}, "nnetsauce.Downloader.pkgname": {"tf": 1}, "nnetsauce.Downloader.dataset": {"tf": 1}, "nnetsauce.Downloader.source": {"tf": 1}, "nnetsauce.Downloader.url": {"tf": 1}, "nnetsauce.Downloader.request": {"tf": 1}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.datasets.Downloader": {"tf": 1}, "nnetsauce.datasets.Downloader.pkgname": {"tf": 1}, "nnetsauce.datasets.Downloader.dataset": {"tf": 1}, "nnetsauce.datasets.Downloader.source": {"tf": 1}, "nnetsauce.datasets.Downloader.url": {"tf": 1}, "nnetsauce.datasets.Downloader.request": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}}, "df": 14}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Downloader.dataset": {"tf": 1}, "nnetsauce.datasets.Downloader.dataset": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.MTS.input_dates": {"tf": 1}, "nnetsauce.MTS.output_dates_": {"tf": 1}, "nnetsauce.mts.MTS.input_dates": {"tf": 1}, "nnetsauce.mts.MTS.output_dates_": {"tf": 1}, "nnetsauce.utils.compute_output_dates": {"tf": 1}}, "df": 5}}}}, "f": {"docs": {"nnetsauce.MTS.df_": {"tf": 1}, "nnetsauce.mts.MTS.df_": {"tf": 1}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Base.type_clust": {"tf": 1}, "nnetsauce.base.Base.type_clust": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Base.cluster_encode": {"tf": 1}, "nnetsauce.base.Base.cluster_encode": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.Base.n_clusters": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.n_clusters": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}}, "df": 4}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.Base.clustering_obj_": {"tf": 1}, "nnetsauce.Base.clustering_scaler_": {"tf": 1}, "nnetsauce.base.Base.clustering_obj_": {"tf": 1}, "nnetsauce.base.Base.clustering_scaler_": {"tf": 1}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Ridge2Classifier.classes_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.classes_": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.Base.col_sample": {"tf": 1}, "nnetsauce.Base.index_col_": {"tf": 1}, "nnetsauce.base.Base.col_sample": {"tf": 1}, "nnetsauce.base.Base.index_col_": {"tf": 1}}, "df": 4, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}}, "df": 4}}, "v": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"tf": 1}, "nnetsauce.utils.inv_penalized_cov": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.utils.convert_df_to_numeric": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.compute_output_dates": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.utils.create_lags": {"tf": 1}, "nnetsauce.utils.create_train_inputs": {"tf": 1}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_crossprod": {"tf": 1}, "nnetsauce.utils.crossprod": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.LazyClassifier.custom_metric": {"tf": 1}, "nnetsauce.LazyRegressor.custom_metric": {"tf": 1}, "nnetsauce.LazyMTS.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepClassifier.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepRegressor.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepMTS.custom_metric": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.Custom.obj": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.custom_metric": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom.test_custom": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom.test_custom": {"tf": 1}}, "df": 18, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.type_fit": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.type_fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}}, "df": 16}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.type_fit": {"tf": 1}, "nnetsauce.CustomRegressor.type_pi": {"tf": 1}, "nnetsauce.CustomRegressor.replications": {"tf": 1}, "nnetsauce.CustomRegressor.kernel": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.type_fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.type_pi": {"tf": 1}, "nnetsauce.custom.CustomRegressor.replications": {"tf": 1}, "nnetsauce.custom.CustomRegressor.kernel": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}}, "df": 22}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}}, "df": 6}}}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_cbind": {"tf": 1}, "nnetsauce.utils.cbind": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_psd_check": {"tf": 1}, "nnetsauce.tests.utilstests.test_check": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Base.cluster_encode": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.base.Base.cluster_encode": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"tf": 1}}, "df": 6, "r": {"docs": {"nnetsauce.Base.encoder_": {"tf": 1}, "nnetsauce.base.Base.encoder_": {"tf": 1}}, "df": 2}}}}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "f": {"docs": {"nnetsauce.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 1}}, "df": 2}, "r": {"docs": {"nnetsauce.nonconformist.RegressorNormalizer.err_func": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyClassifier.estimators": {"tf": 1}, "nnetsauce.LazyRegressor.estimators": {"tf": 1}, "nnetsauce.LazyMTS.estimators": {"tf": 1}, "nnetsauce.LazyDeepClassifier.estimators": {"tf": 1}, "nnetsauce.LazyDeepRegressor.estimators": {"tf": 1}, "nnetsauce.LazyDeepMTS.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.estimators": {"tf": 1}}, "df": 12}}}}}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {"nnetsauce.Base.clustering_obj_": {"tf": 1}, "nnetsauce.DeepClassifier.stacked_obj": {"tf": 1}, "nnetsauce.DeepRegressor.stacked_obj": {"tf": 1}, "nnetsauce.DeepMTS.obj": {"tf": 1}, "nnetsauce.MTS.obj": {"tf": 1}, "nnetsauce.MultitaskClassifier.obj": {"tf": 1}, "nnetsauce.PredictionInterval.obj": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.obj": {"tf": 1}, "nnetsauce.base.Base.clustering_obj_": {"tf": 1}, "nnetsauce.custom.Custom.obj": {"tf": 1}, "nnetsauce.deep.DeepClassifier.stacked_obj": {"tf": 1}, "nnetsauce.deep.DeepRegressor.stacked_obj": {"tf": 1}, "nnetsauce.deep.DeepMTS.obj": {"tf": 1}, "nnetsauce.mts.MTS.obj": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.obj": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.obj": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.obj": {"tf": 1}}, "df": 17, "s": {"docs": {"nnetsauce.MTS.fit_objs_": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.mts.MTS.fit_objs_": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}}, "df": 6}}, "s": {"docs": {"nnetsauce.MTS.n_obs": {"tf": 1}, "nnetsauce.mts.MTS.n_obs": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.MTS.output_dates_": {"tf": 1}, "nnetsauce.mts.MTS.output_dates_": {"tf": 1}, "nnetsauce.utils.compute_output_dates": {"tf": 1}}, "df": 3}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Optimizer.opt": {"tf": 1}, "nnetsauce.optimizers.Optimizer.opt": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.Optimizer.type_optim": {"tf": 1}, "nnetsauce.optimizers.Optimizer.type_optim": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.Optimizer.type_optim": {"tf": 1}, "nnetsauce.Optimizer.num_iters": {"tf": 1}, "nnetsauce.Optimizer.learning_rate": {"tf": 1}, "nnetsauce.Optimizer.batch_prop": {"tf": 1}, "nnetsauce.Optimizer.learning_method": {"tf": 1}, "nnetsauce.Optimizer.randomization": {"tf": 1}, "nnetsauce.Optimizer.mass": {"tf": 1}, "nnetsauce.Optimizer.decay": {"tf": 1}, "nnetsauce.Optimizer.tolerance": {"tf": 1}, "nnetsauce.Optimizer.verbose": {"tf": 1}, "nnetsauce.Optimizer.opt": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.type_optim": {"tf": 1}, "nnetsauce.optimizers.Optimizer.num_iters": {"tf": 1}, "nnetsauce.optimizers.Optimizer.learning_rate": {"tf": 1}, "nnetsauce.optimizers.Optimizer.batch_prop": {"tf": 1}, "nnetsauce.optimizers.Optimizer.learning_method": {"tf": 1}, "nnetsauce.optimizers.Optimizer.randomization": {"tf": 1}, "nnetsauce.optimizers.Optimizer.mass": {"tf": 1}, "nnetsauce.optimizers.Optimizer.decay": {"tf": 1}, "nnetsauce.optimizers.Optimizer.tolerance": {"tf": 1}, "nnetsauce.optimizers.Optimizer.verbose": {"tf": 1}, "nnetsauce.optimizers.Optimizer.opt": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"tf": 1}}, "df": 30}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"tf": 1}}, "df": 2}}}, "w": {"docs": {"nnetsauce.Base.W_": {"tf": 1}, "nnetsauce.base.Base.W_": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.LazyRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.LazyMTS.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepMTS.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.ignore_warnings": {"tf": 1}}, "df": 12}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.utils.Progbar.width": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.utils.winkler_score": {"tf": 1}}, "df": 1}}}}}}}, "x": {"docs": {"nnetsauce.Base.X_": {"tf": 1}, "nnetsauce.MTS.X_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.base.Base.X_": {"tf": 1}, "nnetsauce.mts.MTS.X_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}}, "df": 8, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.MTS.xreg_": {"tf": 1}, "nnetsauce.mts.MTS.xreg_": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {"nnetsauce.Base.y_": {"tf": 1}, "nnetsauce.Base.y_mean_": {"tf": 1}, "nnetsauce.MTS.y_": {"tf": 1}, "nnetsauce.MTS.y_means_": {"tf": 1}, "nnetsauce.SubSampler.y": {"tf": 1}, "nnetsauce.base.Base.y_": {"tf": 1}, "nnetsauce.base.Base.y_mean_": {"tf": 1}, "nnetsauce.mts.MTS.y_": {"tf": 1}, "nnetsauce.mts.MTS.y_means_": {"tf": 1}, "nnetsauce.sampling.SubSampler.y": {"tf": 1}}, "df": 10}, "g": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "v": {"docs": {"nnetsauce.BayesianRVFLRegressor.GCV_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.GCV_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.GCV_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.GCV_": {"tf": 1}}, "df": 4}}, "l": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.family": {"tf": 1}, "nnetsauce.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.family": {"tf": 1}, "nnetsauce.glm.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}}, "df": 20}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.family": {"tf": 1}, "nnetsauce.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.family": {"tf": 1}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}}, "df": 20}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.simulation.generate_sobol": {"tf": 1}, "nnetsauce.simulation.generate_uniform": {"tf": 1}, "nnetsauce.simulation.generate_hammersley": {"tf": 1}, "nnetsauce.simulation.generate_halton": {"tf": 1}}, "df": 4}}}}}}, "t": {"docs": {"nnetsauce.tests.tests_mts.TestMTS.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.simulation.getsims": {"tf": 1}, "nnetsauce.simulation.getsims.getsims": {"tf": 1}}, "df": 2}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.CustomRegressor.kernel": {"tf": 1}, "nnetsauce.MTS.kernel": {"tf": 1}, "nnetsauce.PredictionInterval.kernel": {"tf": 1}, "nnetsauce.custom.CustomRegressor.kernel": {"tf": 1}, "nnetsauce.mts.MTS.kernel": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.kernel": {"tf": 1}}, "df": 6}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.MTS.kde_": {"tf": 1}, "nnetsauce.PredictionInterval.kde_": {"tf": 1}, "nnetsauce.mts.MTS.kde_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.kde_": {"tf": 1}}, "df": 4}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.Downloader.url": {"tf": 1}, "nnetsauce.datasets.Downloader.url": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.MTS.upper_": {"tf": 1}, "nnetsauce.mts.MTS.upper_": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.simulation.generate_uniform": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_uniform": {"tf": 1}}, "df": 2}}}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyClassifier.n_jobs": {"tf": 1}, "nnetsauce.LazyRegressor.n_jobs": {"tf": 1}, "nnetsauce.LazyDeepClassifier.n_jobs": {"tf": 1}, "nnetsauce.LazyDeepRegressor.n_jobs": {"tf": 1}, "nnetsauce.RandomBagRegressor.n_jobs": {"tf": 1}, "nnetsauce.RandomBagClassifier.n_jobs": {"tf": 1}, "nnetsauce.SubSampler.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.n_jobs": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.n_jobs": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.n_jobs": {"tf": 1}, "nnetsauce.sampling.SubSampler.n_jobs": {"tf": 1}}, "df": 14}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.PredictionInterval.quantile_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.quantile_": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}, "fullname": {"root": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.AdaBoostClassifier.alpha_": {"tf": 1}, "nnetsauce.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.Base.subsampler_": {"tf": 1}, "nnetsauce.Base.index_col_": {"tf": 1}, "nnetsauce.Base.index_row_": {"tf": 1}, "nnetsauce.Base.clustering_obj_": {"tf": 1}, "nnetsauce.Base.clustering_scaler_": {"tf": 1}, "nnetsauce.Base.nn_scaler_": {"tf": 1}, "nnetsauce.Base.scaler_": {"tf": 1}, "nnetsauce.Base.encoder_": {"tf": 1}, "nnetsauce.Base.W_": {"tf": 1}, "nnetsauce.Base.X_": {"tf": 1}, "nnetsauce.Base.y_": {"tf": 1}, "nnetsauce.Base.y_mean_": {"tf": 1}, "nnetsauce.Base.beta_": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.beta_": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.Sigma_": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.GCV_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.beta_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.Sigma_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.GCV_": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MTS.fit_objs_": {"tf": 1}, "nnetsauce.MTS.y_": {"tf": 1}, "nnetsauce.MTS.X_": {"tf": 1}, "nnetsauce.MTS.xreg_": {"tf": 1}, "nnetsauce.MTS.y_means_": {"tf": 1}, "nnetsauce.MTS.mean_": {"tf": 1}, "nnetsauce.MTS.upper_": {"tf": 1}, "nnetsauce.MTS.lower_": {"tf": 1}, "nnetsauce.MTS.output_dates_": {"tf": 1}, "nnetsauce.MTS.preds_std_": {"tf": 1}, "nnetsauce.MTS.alpha_": {"tf": 1}, "nnetsauce.MTS.return_std_": {"tf": 1}, "nnetsauce.MTS.df_": {"tf": 1}, "nnetsauce.MTS.residuals_": {"tf": 1}, "nnetsauce.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.MTS.kde_": {"tf": 1}, "nnetsauce.MTS.sims_": {"tf": 1}, "nnetsauce.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.PredictionInterval.alpha_": {"tf": 1}, "nnetsauce.PredictionInterval.quantile_": {"tf": 1}, "nnetsauce.PredictionInterval.icp_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}, "nnetsauce.PredictionInterval.kde_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.voter_": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.voter_": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.beta_": {"tf": 1}, "nnetsauce.Ridge2Classifier.classes_": {"tf": 1}, "nnetsauce.Ridge2Classifier.minloglik_": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.Base.subsampler_": {"tf": 1}, "nnetsauce.base.Base.index_col_": {"tf": 1}, "nnetsauce.base.Base.index_row_": {"tf": 1}, "nnetsauce.base.Base.clustering_obj_": {"tf": 1}, "nnetsauce.base.Base.clustering_scaler_": {"tf": 1}, "nnetsauce.base.Base.nn_scaler_": {"tf": 1}, "nnetsauce.base.Base.scaler_": {"tf": 1}, "nnetsauce.base.Base.encoder_": {"tf": 1}, "nnetsauce.base.Base.W_": {"tf": 1}, "nnetsauce.base.Base.X_": {"tf": 1}, "nnetsauce.base.Base.y_": {"tf": 1}, "nnetsauce.base.Base.y_mean_": {"tf": 1}, "nnetsauce.base.Base.beta_": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.alpha_": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.fit_objs_": {"tf": 1}, "nnetsauce.mts.MTS.y_": {"tf": 1}, "nnetsauce.mts.MTS.X_": {"tf": 1}, "nnetsauce.mts.MTS.xreg_": {"tf": 1}, "nnetsauce.mts.MTS.y_means_": {"tf": 1}, "nnetsauce.mts.MTS.mean_": {"tf": 1}, "nnetsauce.mts.MTS.upper_": {"tf": 1}, "nnetsauce.mts.MTS.lower_": {"tf": 1}, "nnetsauce.mts.MTS.output_dates_": {"tf": 1}, "nnetsauce.mts.MTS.preds_std_": {"tf": 1}, "nnetsauce.mts.MTS.alpha_": {"tf": 1}, "nnetsauce.mts.MTS.return_std_": {"tf": 1}, "nnetsauce.mts.MTS.df_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.mts.MTS.kde_": {"tf": 1}, "nnetsauce.mts.MTS.sims_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.alpha_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.quantile_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.icp_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.kde_": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.voter_": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.voter_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.beta_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.classes_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.minloglik_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.beta_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.Sigma_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.GCV_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.beta_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.Sigma_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.GCV_": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 1}, "nnetsauce.utils.Progbar.__init__": {"tf": 1}}, "df": 175, "n": {"docs": {"nnetsauce.Base.n_hidden_features": {"tf": 1}, "nnetsauce.Base.n_clusters": {"tf": 1}, "nnetsauce.DeepClassifier.n_layers": {"tf": 1}, "nnetsauce.DeepRegressor.n_layers": {"tf": 1}, "nnetsauce.DeepMTS.n_layers": {"tf": 1}, "nnetsauce.LazyClassifier.n_jobs": {"tf": 1}, "nnetsauce.LazyRegressor.n_jobs": {"tf": 1}, "nnetsauce.LazyDeepClassifier.n_layers": {"tf": 1}, "nnetsauce.LazyDeepClassifier.n_jobs": {"tf": 1}, "nnetsauce.LazyDeepRegressor.n_layers": {"tf": 1}, "nnetsauce.LazyDeepRegressor.n_jobs": {"tf": 1}, "nnetsauce.LazyDeepMTS.n_layers": {"tf": 1}, "nnetsauce.MTS.n_series": {"tf": 1}, "nnetsauce.MTS.n_obs": {"tf": 1}, "nnetsauce.RandomBagRegressor.n_jobs": {"tf": 1}, "nnetsauce.RandomBagClassifier.n_jobs": {"tf": 1}, "nnetsauce.SubSampler.n_samples": {"tf": 1}, "nnetsauce.SubSampler.n_jobs": {"tf": 1}, "nnetsauce.base.Base.n_hidden_features": {"tf": 1}, "nnetsauce.base.Base.n_clusters": {"tf": 1}, "nnetsauce.deep.DeepClassifier.n_layers": {"tf": 1}, "nnetsauce.deep.DeepRegressor.n_layers": {"tf": 1}, "nnetsauce.deep.DeepMTS.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.n_layers": {"tf": 1}, "nnetsauce.mts.MTS.n_series": {"tf": 1}, "nnetsauce.mts.MTS.n_obs": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.n_jobs": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.n_jobs": {"tf": 1}, "nnetsauce.sampling.SubSampler.n_samples": {"tf": 1}, "nnetsauce.sampling.SubSampler.n_jobs": {"tf": 1}}, "df": 36, "n": {"docs": {"nnetsauce.Base.nn_scaler_": {"tf": 1}, "nnetsauce.base.Base.nn_scaler_": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce": {"tf": 1}, "nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.AdaBoostClassifier.type_fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.verbose": {"tf": 1}, "nnetsauce.AdaBoostClassifier.method": {"tf": 1}, "nnetsauce.AdaBoostClassifier.reg_lambda": {"tf": 1}, "nnetsauce.AdaBoostClassifier.reg_alpha": {"tf": 1}, "nnetsauce.AdaBoostClassifier.alpha_": {"tf": 1}, "nnetsauce.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.Base.n_hidden_features": {"tf": 1}, "nnetsauce.Base.activation_name": {"tf": 1}, "nnetsauce.Base.a": {"tf": 1}, "nnetsauce.Base.nodes_sim": {"tf": 1}, "nnetsauce.Base.bias": {"tf": 1}, "nnetsauce.Base.seed": {"tf": 1}, "nnetsauce.Base.backend": {"tf": 1}, "nnetsauce.Base.dropout": {"tf": 1}, "nnetsauce.Base.direct_link": {"tf": 1}, "nnetsauce.Base.cluster_encode": {"tf": 1}, "nnetsauce.Base.type_clust": {"tf": 1}, "nnetsauce.Base.type_scaling": {"tf": 1}, "nnetsauce.Base.col_sample": {"tf": 1}, "nnetsauce.Base.row_sample": {"tf": 1}, "nnetsauce.Base.n_clusters": {"tf": 1}, "nnetsauce.Base.subsampler_": {"tf": 1}, "nnetsauce.Base.index_col_": {"tf": 1}, "nnetsauce.Base.index_row_": {"tf": 1}, "nnetsauce.Base.clustering_obj_": {"tf": 1}, "nnetsauce.Base.clustering_scaler_": {"tf": 1}, "nnetsauce.Base.nn_scaler_": {"tf": 1}, "nnetsauce.Base.scaler_": {"tf": 1}, "nnetsauce.Base.encoder_": {"tf": 1}, "nnetsauce.Base.W_": {"tf": 1}, "nnetsauce.Base.X_": {"tf": 1}, "nnetsauce.Base.y_": {"tf": 1}, "nnetsauce.Base.y_mean_": {"tf": 1}, "nnetsauce.Base.beta_": {"tf": 1}, "nnetsauce.Base.activation_func": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.s": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.sigma": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.beta_": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.Sigma_": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.GCV_": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.return_std": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.s1": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.s2": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.sigma": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.beta_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.Sigma_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.GCV_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.return_std": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.type_fit": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.type_fit": {"tf": 1}, "nnetsauce.CustomRegressor.type_pi": {"tf": 1}, "nnetsauce.CustomRegressor.replications": {"tf": 1}, "nnetsauce.CustomRegressor.kernel": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.stacked_obj": {"tf": 1}, "nnetsauce.DeepClassifier.verbose": {"tf": 1}, "nnetsauce.DeepClassifier.n_layers": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.stacked_obj": {"tf": 1}, "nnetsauce.DeepRegressor.verbose": {"tf": 1}, "nnetsauce.DeepRegressor.n_layers": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.DeepMTS.n_layers": {"tf": 1}, "nnetsauce.DeepMTS.obj": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.Downloader": {"tf": 1}, "nnetsauce.Downloader.pkgname": {"tf": 1}, "nnetsauce.Downloader.dataset": {"tf": 1}, "nnetsauce.Downloader.source": {"tf": 1}, "nnetsauce.Downloader.url": {"tf": 1}, "nnetsauce.Downloader.request": {"tf": 1}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.family": {"tf": 1}, "nnetsauce.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.family": {"tf": 1}, "nnetsauce.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.verbose": {"tf": 1}, "nnetsauce.LazyClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.LazyClassifier.custom_metric": {"tf": 1}, "nnetsauce.LazyClassifier.predictions": {"tf": 1}, "nnetsauce.LazyClassifier.sort_by": {"tf": 1}, "nnetsauce.LazyClassifier.models": {"tf": 1}, "nnetsauce.LazyClassifier.random_state": {"tf": 1}, "nnetsauce.LazyClassifier.estimators": {"tf": 1}, "nnetsauce.LazyClassifier.preprocess": {"tf": 1}, "nnetsauce.LazyClassifier.n_jobs": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.verbose": {"tf": 1}, "nnetsauce.LazyRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.LazyRegressor.custom_metric": {"tf": 1}, "nnetsauce.LazyRegressor.predictions": {"tf": 1}, "nnetsauce.LazyRegressor.models": {"tf": 1}, "nnetsauce.LazyRegressor.random_state": {"tf": 1}, "nnetsauce.LazyRegressor.estimators": {"tf": 1}, "nnetsauce.LazyRegressor.preprocess": {"tf": 1}, "nnetsauce.LazyRegressor.n_jobs": {"tf": 1}, "nnetsauce.LazyRegressor.fit": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyMTS.verbose": {"tf": 1}, "nnetsauce.LazyMTS.ignore_warnings": {"tf": 1}, "nnetsauce.LazyMTS.custom_metric": {"tf": 1}, "nnetsauce.LazyMTS.predictions": {"tf": 1}, "nnetsauce.LazyMTS.models": {"tf": 1}, "nnetsauce.LazyMTS.random_state": {"tf": 1}, "nnetsauce.LazyMTS.estimators": {"tf": 1}, "nnetsauce.LazyMTS.preprocess": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.verbose": {"tf": 1}, "nnetsauce.LazyDeepClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepClassifier.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepClassifier.predictions": {"tf": 1}, "nnetsauce.LazyDeepClassifier.sort_by": {"tf": 1}, "nnetsauce.LazyDeepClassifier.models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.random_state": {"tf": 1}, "nnetsauce.LazyDeepClassifier.estimators": {"tf": 1}, "nnetsauce.LazyDeepClassifier.preprocess": {"tf": 1}, "nnetsauce.LazyDeepClassifier.n_layers": {"tf": 1}, "nnetsauce.LazyDeepClassifier.n_jobs": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.verbose": {"tf": 1}, "nnetsauce.LazyDeepRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepRegressor.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepRegressor.predictions": {"tf": 1}, "nnetsauce.LazyDeepRegressor.models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.random_state": {"tf": 1}, "nnetsauce.LazyDeepRegressor.estimators": {"tf": 1}, "nnetsauce.LazyDeepRegressor.preprocess": {"tf": 1}, "nnetsauce.LazyDeepRegressor.n_layers": {"tf": 1}, "nnetsauce.LazyDeepRegressor.n_jobs": {"tf": 1}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.verbose": {"tf": 1}, "nnetsauce.LazyDeepMTS.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepMTS.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepMTS.predictions": {"tf": 1}, "nnetsauce.LazyDeepMTS.models": {"tf": 1}, "nnetsauce.LazyDeepMTS.random_state": {"tf": 1}, "nnetsauce.LazyDeepMTS.estimators": {"tf": 1}, "nnetsauce.LazyDeepMTS.preprocess": {"tf": 1}, "nnetsauce.LazyDeepMTS.n_layers": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MTS.obj": {"tf": 1}, "nnetsauce.MTS.n_series": {"tf": 1}, "nnetsauce.MTS.lags": {"tf": 1}, "nnetsauce.MTS.type_pi": {"tf": 1}, "nnetsauce.MTS.replications": {"tf": 1}, "nnetsauce.MTS.kernel": {"tf": 1}, "nnetsauce.MTS.agg": {"tf": 1}, "nnetsauce.MTS.verbose": {"tf": 1}, "nnetsauce.MTS.show_progress": {"tf": 1}, "nnetsauce.MTS.series_names": {"tf": 1}, "nnetsauce.MTS.input_dates": {"tf": 1}, "nnetsauce.MTS.fit_objs_": {"tf": 1}, "nnetsauce.MTS.y_": {"tf": 1}, "nnetsauce.MTS.X_": {"tf": 1}, "nnetsauce.MTS.xreg_": {"tf": 1}, "nnetsauce.MTS.y_means_": {"tf": 1}, "nnetsauce.MTS.mean_": {"tf": 1}, "nnetsauce.MTS.upper_": {"tf": 1}, "nnetsauce.MTS.lower_": {"tf": 1}, "nnetsauce.MTS.output_dates_": {"tf": 1}, "nnetsauce.MTS.preds_std_": {"tf": 1}, "nnetsauce.MTS.alpha_": {"tf": 1}, "nnetsauce.MTS.return_std_": {"tf": 1}, "nnetsauce.MTS.df_": {"tf": 1}, "nnetsauce.MTS.residuals_": {"tf": 1}, "nnetsauce.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.MTS.kde_": {"tf": 1}, "nnetsauce.MTS.sims_": {"tf": 1}, "nnetsauce.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.MTS.n_obs": {"tf": 1}, "nnetsauce.MTS.level": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.score": {"tf": 1}, "nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.obj": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.PredictionInterval.obj": {"tf": 1}, "nnetsauce.PredictionInterval.method": {"tf": 1}, "nnetsauce.PredictionInterval.level": {"tf": 1}, "nnetsauce.PredictionInterval.type_pi": {"tf": 1}, "nnetsauce.PredictionInterval.replications": {"tf": 1}, "nnetsauce.PredictionInterval.kernel": {"tf": 1}, "nnetsauce.PredictionInterval.agg": {"tf": 1}, "nnetsauce.PredictionInterval.seed": {"tf": 1}, "nnetsauce.PredictionInterval.alpha_": {"tf": 1}, "nnetsauce.PredictionInterval.quantile_": {"tf": 1}, "nnetsauce.PredictionInterval.icp_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}, "nnetsauce.PredictionInterval.kde_": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.obj": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.Optimizer.type_optim": {"tf": 1}, "nnetsauce.Optimizer.num_iters": {"tf": 1}, "nnetsauce.Optimizer.learning_rate": {"tf": 1}, "nnetsauce.Optimizer.batch_prop": {"tf": 1}, "nnetsauce.Optimizer.learning_method": {"tf": 1}, "nnetsauce.Optimizer.randomization": {"tf": 1}, "nnetsauce.Optimizer.mass": {"tf": 1}, "nnetsauce.Optimizer.decay": {"tf": 1}, "nnetsauce.Optimizer.tolerance": {"tf": 1}, "nnetsauce.Optimizer.verbose": {"tf": 1}, "nnetsauce.Optimizer.opt": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.type_fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.verbose": {"tf": 1}, "nnetsauce.RandomBagRegressor.n_jobs": {"tf": 1}, "nnetsauce.RandomBagRegressor.voter_": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.type_fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.verbose": {"tf": 1}, "nnetsauce.RandomBagClassifier.n_jobs": {"tf": 1}, "nnetsauce.RandomBagClassifier.voter_": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.type_fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.type_fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.solver": {"tf": 1}, "nnetsauce.Ridge2Classifier.beta_": {"tf": 1}, "nnetsauce.Ridge2Classifier.classes_": {"tf": 1}, "nnetsauce.Ridge2Classifier.minloglik_": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.SubSampler.y": {"tf": 1}, "nnetsauce.SubSampler.n_samples": {"tf": 1}, "nnetsauce.SubSampler.seed": {"tf": 1}, "nnetsauce.SubSampler.indices": {"tf": 1}, "nnetsauce.SubSampler.n_jobs": {"tf": 1}, "nnetsauce.SubSampler.verbose": {"tf": 1}, "nnetsauce.SubSampler.subsample": {"tf": 1}, "nnetsauce.base": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.Base.n_hidden_features": {"tf": 1}, "nnetsauce.base.Base.activation_name": {"tf": 1}, "nnetsauce.base.Base.a": {"tf": 1}, "nnetsauce.base.Base.nodes_sim": {"tf": 1}, "nnetsauce.base.Base.bias": {"tf": 1}, "nnetsauce.base.Base.seed": {"tf": 1}, "nnetsauce.base.Base.backend": {"tf": 1}, "nnetsauce.base.Base.dropout": {"tf": 1}, "nnetsauce.base.Base.direct_link": {"tf": 1}, "nnetsauce.base.Base.cluster_encode": {"tf": 1}, "nnetsauce.base.Base.type_clust": {"tf": 1}, "nnetsauce.base.Base.type_scaling": {"tf": 1}, "nnetsauce.base.Base.col_sample": {"tf": 1}, "nnetsauce.base.Base.row_sample": {"tf": 1}, "nnetsauce.base.Base.n_clusters": {"tf": 1}, "nnetsauce.base.Base.subsampler_": {"tf": 1}, "nnetsauce.base.Base.index_col_": {"tf": 1}, "nnetsauce.base.Base.index_row_": {"tf": 1}, "nnetsauce.base.Base.clustering_obj_": {"tf": 1}, "nnetsauce.base.Base.clustering_scaler_": {"tf": 1}, "nnetsauce.base.Base.nn_scaler_": {"tf": 1}, "nnetsauce.base.Base.scaler_": {"tf": 1}, "nnetsauce.base.Base.encoder_": {"tf": 1}, "nnetsauce.base.Base.W_": {"tf": 1}, "nnetsauce.base.Base.X_": {"tf": 1}, "nnetsauce.base.Base.y_": {"tf": 1}, "nnetsauce.base.Base.y_mean_": {"tf": 1}, "nnetsauce.base.Base.beta_": {"tf": 1}, "nnetsauce.base.Base.activation_func": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.type_fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.verbose": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.method": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.reg_lambda": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.reg_alpha": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.alpha_": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.Custom.obj": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.type_fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.type_fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.type_pi": {"tf": 1}, "nnetsauce.custom.CustomRegressor.replications": {"tf": 1}, "nnetsauce.custom.CustomRegressor.kernel": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.datasets": {"tf": 1}, "nnetsauce.datasets.Downloader": {"tf": 1}, "nnetsauce.datasets.Downloader.pkgname": {"tf": 1}, "nnetsauce.datasets.Downloader.dataset": {"tf": 1}, "nnetsauce.datasets.Downloader.source": {"tf": 1}, "nnetsauce.datasets.Downloader.url": {"tf": 1}, "nnetsauce.datasets.Downloader.request": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.deep": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.stacked_obj": {"tf": 1}, "nnetsauce.deep.DeepClassifier.verbose": {"tf": 1}, "nnetsauce.deep.DeepClassifier.n_layers": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.stacked_obj": {"tf": 1}, "nnetsauce.deep.DeepRegressor.verbose": {"tf": 1}, "nnetsauce.deep.DeepRegressor.n_layers": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.n_layers": {"tf": 1}, "nnetsauce.deep.DeepMTS.obj": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.demo": {"tf": 1}, "nnetsauce.glm": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.family": {"tf": 1}, "nnetsauce.glm.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.family": {"tf": 1}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.sort_by": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.sort_by": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.obj": {"tf": 1}, "nnetsauce.mts.MTS.n_series": {"tf": 1}, "nnetsauce.mts.MTS.lags": {"tf": 1}, "nnetsauce.mts.MTS.type_pi": {"tf": 1}, "nnetsauce.mts.MTS.replications": {"tf": 1}, "nnetsauce.mts.MTS.kernel": {"tf": 1}, "nnetsauce.mts.MTS.agg": {"tf": 1}, "nnetsauce.mts.MTS.verbose": {"tf": 1}, "nnetsauce.mts.MTS.show_progress": {"tf": 1}, "nnetsauce.mts.MTS.series_names": {"tf": 1}, "nnetsauce.mts.MTS.input_dates": {"tf": 1}, "nnetsauce.mts.MTS.fit_objs_": {"tf": 1}, "nnetsauce.mts.MTS.y_": {"tf": 1}, "nnetsauce.mts.MTS.X_": {"tf": 1}, "nnetsauce.mts.MTS.xreg_": {"tf": 1}, "nnetsauce.mts.MTS.y_means_": {"tf": 1}, "nnetsauce.mts.MTS.mean_": {"tf": 1}, "nnetsauce.mts.MTS.upper_": {"tf": 1}, "nnetsauce.mts.MTS.lower_": {"tf": 1}, "nnetsauce.mts.MTS.output_dates_": {"tf": 1}, "nnetsauce.mts.MTS.preds_std_": {"tf": 1}, "nnetsauce.mts.MTS.alpha_": {"tf": 1}, "nnetsauce.mts.MTS.return_std_": {"tf": 1}, "nnetsauce.mts.MTS.df_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.mts.MTS.kde_": {"tf": 1}, "nnetsauce.mts.MTS.sims_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.mts.MTS.n_obs": {"tf": 1}, "nnetsauce.mts.MTS.level": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.score": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.obj": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.obj": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.base_model": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.err_func": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.score": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.__init__": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.optimizers": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.type_optim": {"tf": 1}, "nnetsauce.optimizers.Optimizer.num_iters": {"tf": 1}, "nnetsauce.optimizers.Optimizer.learning_rate": {"tf": 1}, "nnetsauce.optimizers.Optimizer.batch_prop": {"tf": 1}, "nnetsauce.optimizers.Optimizer.learning_method": {"tf": 1}, "nnetsauce.optimizers.Optimizer.randomization": {"tf": 1}, "nnetsauce.optimizers.Optimizer.mass": {"tf": 1}, "nnetsauce.optimizers.Optimizer.decay": {"tf": 1}, "nnetsauce.optimizers.Optimizer.tolerance": {"tf": 1}, "nnetsauce.optimizers.Optimizer.verbose": {"tf": 1}, "nnetsauce.optimizers.Optimizer.opt": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.predictioninterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.obj": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.method": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.level": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.type_pi": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.replications": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.kernel": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.agg": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.seed": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.alpha_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.quantile_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.icp_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.kde_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.type_fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.verbose": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.n_jobs": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.voter_": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.type_fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.verbose": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.n_jobs": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.voter_": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.solver": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.beta_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.classes_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.minloglik_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.s": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.sigma": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.beta_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.Sigma_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.GCV_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.return_std": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s1": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s2": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.sigma": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.beta_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.Sigma_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.GCV_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.return_std": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.sampling": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}, "nnetsauce.sampling.SubSampler.y": {"tf": 1}, "nnetsauce.sampling.SubSampler.n_samples": {"tf": 1}, "nnetsauce.sampling.SubSampler.seed": {"tf": 1}, "nnetsauce.sampling.SubSampler.indices": {"tf": 1}, "nnetsauce.sampling.SubSampler.n_jobs": {"tf": 1}, "nnetsauce.sampling.SubSampler.verbose": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}, "nnetsauce.simulation": {"tf": 1}, "nnetsauce.simulation.generate_sobol": {"tf": 1}, "nnetsauce.simulation.generate_uniform": {"tf": 1}, "nnetsauce.simulation.generate_hammersley": {"tf": 1}, "nnetsauce.simulation.generate_halton": {"tf": 1}, "nnetsauce.simulation.getsims": {"tf": 1}, "nnetsauce.simulation.getsims.getsims": {"tf": 1}, "nnetsauce.tests": {"tf": 1}, "nnetsauce.tests.tests_adaboost": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_AdaBoost": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_score": {"tf": 1}, "nnetsauce.tests.tests_base": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase.test_base": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase.test_score": {"tf": 1}, "nnetsauce.tests.tests_custom": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom.test_custom": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom.test_score": {"tf": 1}, "nnetsauce.tests.tests_download": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload.test_download": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom.test_custom": {"tf": 1}, "nnetsauce.tests.tests_model_selection": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"tf": 1}, "nnetsauce.tests.tests_mtask": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_Multitask": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_score": {"tf": 1}, "nnetsauce.tests.tests_mts": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_MTS": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_score": {"tf": 1}, "nnetsauce.tests.tests_randombag": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_RandomBag": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_score": {"tf": 1}, "nnetsauce.tests.tests_ridge": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge.test_Ridge": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge.test_score": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score": {"tf": 1}, "nnetsauce.tests.tests_rvfl": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_rvfl": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_score": {"tf": 1}, "nnetsauce.tests.tests_simulation": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_sobol": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_hammersley": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_halton": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_uniform": {"tf": 1}, "nnetsauce.tests.tests_tssplit": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit.test_TimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_crossprod": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_tcrossprod": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_cbind": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_rbind": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_psd_check": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_nearestPD": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1}, "nnetsauce.tests.utilstests": {"tf": 1}, "nnetsauce.tests.utilstests.test_check": {"tf": 1}, "nnetsauce.utils": {"tf": 1}, "nnetsauce.utils.beta_hat": {"tf": 1}, "nnetsauce.utils.inv_penalized_cov": {"tf": 1}, "nnetsauce.utils.cbind": {"tf": 1}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.rbind": {"tf": 1}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1}, "nnetsauce.utils.crossprod": {"tf": 1}, "nnetsauce.utils.tcrossprod": {"tf": 1}, "nnetsauce.utils.to_np_array": {"tf": 1}, "nnetsauce.utils.merge_two_dicts": {"tf": 1}, "nnetsauce.utils.is_factor": {"tf": 1}, "nnetsauce.utils.isPD": {"tf": 1}, "nnetsauce.utils.nearestPD": {"tf": 1}, "nnetsauce.utils.compute_output_dates": {"tf": 1}, "nnetsauce.utils.create_lags": {"tf": 1}, "nnetsauce.utils.create_train_inputs": {"tf": 1}, "nnetsauce.utils.reformat_response": {"tf": 1}, "nnetsauce.utils.tuple_map": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}, "nnetsauce.utils.Progbar.__init__": {"tf": 1}, "nnetsauce.utils.Progbar.target": {"tf": 1}, "nnetsauce.utils.Progbar.width": {"tf": 1}, "nnetsauce.utils.Progbar.verbose": {"tf": 1}, "nnetsauce.utils.Progbar.interval": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1}, "nnetsauce.utils.Progbar.add": {"tf": 1}, "nnetsauce.utils.winkler_score": {"tf": 1}}, "df": 969}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Base.activation_name": {"tf": 1}, "nnetsauce.base.Base.activation_name": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.MTS.series_names": {"tf": 1}, "nnetsauce.mts.MTS.series_names": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Base.nodes_sim": {"tf": 1}, "nnetsauce.base.Base.nodes_sim": {"tf": 1}}, "df": 2}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.nonconformist": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.base_model": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.err_func": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.score": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.__init__": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}}, "df": 31}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1}}, "df": 1}}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.Optimizer.num_iters": {"tf": 1}, "nnetsauce.optimizers.Optimizer.num_iters": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.utils.convert_df_to_numeric": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_nearestPD": {"tf": 1}, "nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 2}}}}}}}}, "p": {"docs": {"nnetsauce.utils.to_np_array": {"tf": 1}}, "df": 1}}, "a": {"docs": {"nnetsauce.Base.a": {"tf": 1}, "nnetsauce.base.Base.a": {"tf": 1}}, "df": 2, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_adaboost": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_AdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_score": {"tf": 1}}, "df": 4, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.AdaBoostClassifier.type_fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.verbose": {"tf": 1}, "nnetsauce.AdaBoostClassifier.method": {"tf": 1}, "nnetsauce.AdaBoostClassifier.reg_lambda": {"tf": 1}, "nnetsauce.AdaBoostClassifier.reg_alpha": {"tf": 1}, "nnetsauce.AdaBoostClassifier.alpha_": {"tf": 1}, "nnetsauce.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.type_fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.verbose": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.method": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.reg_lambda": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.reg_alpha": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.alpha_": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}}, "df": 28}}}}}}}}}}}}}}}}, "d": {"docs": {"nnetsauce.utils.Progbar.add": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.AdaBoostClassifier.reg_alpha": {"tf": 1}, "nnetsauce.AdaBoostClassifier.alpha_": {"tf": 1}, "nnetsauce.MTS.alpha_": {"tf": 1}, "nnetsauce.PredictionInterval.alpha_": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.reg_alpha": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.alpha_": {"tf": 1}, "nnetsauce.mts.MTS.alpha_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.alpha_": {"tf": 1}}, "df": 8}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Base.activation_name": {"tf": 1}, "nnetsauce.Base.activation_func": {"tf": 1}, "nnetsauce.base.Base.activation_name": {"tf": 1}, "nnetsauce.base.Base.activation_func": {"tf": 1}}, "df": 4}}}}}}}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.MTS.agg": {"tf": 1}, "nnetsauce.PredictionInterval.agg": {"tf": 1}, "nnetsauce.mts.MTS.agg": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.agg": {"tf": 1}}, "df": 4}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 4}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.utils.to_np_array": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 1}, "nnetsauce.utils.Progbar.__init__": {"tf": 1}}, "df": 65}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"nnetsauce.Base.index_col_": {"tf": 1}, "nnetsauce.Base.index_row_": {"tf": 1}, "nnetsauce.base.Base.index_col_": {"tf": 1}, "nnetsauce.base.Base.index_row_": {"tf": 1}}, "df": 4}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.SubSampler.indices": {"tf": 1}, "nnetsauce.sampling.SubSampler.indices": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.MTS.input_dates": {"tf": 1}, "nnetsauce.mts.MTS.input_dates": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"tf": 1}, "nnetsauce.utils.create_train_inputs": {"tf": 1}}, "df": 2}}}}, "v": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"tf": 1}, "nnetsauce.utils.inv_penalized_cov": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.utils.Progbar.interval": {"tf": 1}}, "df": 1}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.LazyRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.LazyMTS.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepMTS.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.ignore_warnings": {"tf": 1}}, "df": 12}}}}}, "c": {"docs": {}, "df": 0, "p": {"docs": {"nnetsauce.PredictionInterval.icp_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.icp_": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.__init__": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}}, "df": 5}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Optimizer.num_iters": {"tf": 1}, "nnetsauce.optimizers.Optimizer.num_iters": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {"nnetsauce.utils.is_factor": {"tf": 1}}, "df": 1, "p": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.utils.isPD": {"tf": 1}}, "df": 1}}}}, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.type_fit": {"tf": 1}, "nnetsauce.Base.type_clust": {"tf": 1}, "nnetsauce.Base.type_scaling": {"tf": 1}, "nnetsauce.CustomClassifier.type_fit": {"tf": 1}, "nnetsauce.CustomRegressor.type_fit": {"tf": 1}, "nnetsauce.CustomRegressor.type_pi": {"tf": 1}, "nnetsauce.MTS.type_pi": {"tf": 1}, "nnetsauce.MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.PredictionInterval.type_pi": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.Optimizer.type_optim": {"tf": 1}, "nnetsauce.RandomBagRegressor.type_fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.type_fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.type_fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.type_fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.base.Base.type_clust": {"tf": 1}, "nnetsauce.base.Base.type_scaling": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.type_fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.type_fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.type_fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.type_pi": {"tf": 1}, "nnetsauce.mts.MTS.type_pi": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.optimizers.Optimizer.type_optim": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.type_pi": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.type_fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.type_fit": {"tf": 1}}, "df": 32}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"tf": 1}, "nnetsauce.utils.create_train_inputs": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_AdaBoost": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_score": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase.test_base": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase.test_score": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom.test_custom": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom.test_score": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload.test_download": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom.test_custom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_Multitask": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_score": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_MTS": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_score": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_RandomBag": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_score": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge.test_Ridge": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge.test_score": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_rvfl": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_score": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_sobol": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_hammersley": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_halton": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_uniform": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit.test_TimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_crossprod": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_tcrossprod": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_cbind": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_rbind": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_psd_check": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_nearestPD": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1}, "nnetsauce.tests.utilstests.test_check": {"tf": 1}}, "df": 44, "s": {"docs": {"nnetsauce.tests": {"tf": 1}, "nnetsauce.tests.tests_adaboost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_AdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_score": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase.test_base": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase.test_score": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom.test_custom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom.test_score": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload.test_download": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom.test_custom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask.test_Multitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask.test_score": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS.test_MTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS.test_get_set": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS.test_score": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_RandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_score": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge.test_Ridge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge.test_score": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_rvfl": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_score": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul.test_sobol": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul.test_hammersley": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul.test_halton": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul.test_uniform": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit.test_TimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils.test_crossprod": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils.test_tcrossprod": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils.test_cbind": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils.test_rbind": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils.test_psd_check": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils.test_nearestPD": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1.4142135623730951}, "nnetsauce.tests.utilstests": {"tf": 1}, "nnetsauce.tests.utilstests.test_check": {"tf": 1}}, "df": 74, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_sobol": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_hammersley": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_halton": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_uniform": {"tf": 1}}, "df": 5}}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_AdaBoost": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_score": {"tf": 1}}, "df": 3}}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase.test_base": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase.test_score": {"tf": 1}}, "df": 3}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom.test_custom": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom.test_score": {"tf": 1}}, "df": 3}}}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload.test_download": {"tf": 1}}, "df": 2}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom.test_custom": {"tf": 1}}, "df": 2}}}}}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_Multitask": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_score": {"tf": 1}}, "df": 3}}}}}}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_MTS": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_score": {"tf": 1}}, "df": 4}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_RandomBag": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_score": {"tf": 1}}, "df": 3}}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"2": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score": {"tf": 1}}, "df": 3}}}}}}}}}}, "docs": {"nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge.test_Ridge": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge.test_score": {"tf": 1}}, "df": 3}}}}, "v": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_rvfl": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_score": {"tf": 1}}, "df": 4}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit.test_TimeSeriesSplit": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_crossprod": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_tcrossprod": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_cbind": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_rbind": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_psd_check": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_nearestPD": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1}}, "df": 14}}}}}}}}, "o": {"docs": {"nnetsauce.utils.convert_df_to_numeric": {"tf": 1}, "nnetsauce.utils.to_np_array": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Optimizer.tolerance": {"tf": 1}, "nnetsauce.optimizers.Optimizer.tolerance": {"tf": 1}}, "df": 2}}}}}}}}, "s": {"docs": {"nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"tf": 1}}, "df": 2, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_tssplit": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit.test_TimeSeriesSplit": {"tf": 1}}, "df": 3}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit.test_TimeSeriesSplit": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 5}}}}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_tcrossprod": {"tf": 1}, "nnetsauce.utils.tcrossprod": {"tf": 1}}, "df": 2}}}}}}}}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"tf": 1}, "nnetsauce.utils.merge_two_dicts": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.tuple_map": {"tf": 1}}, "df": 1}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.utils.Progbar.target": {"tf": 1}}, "df": 1}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier.type_fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.CustomClassifier.type_fit": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.type_fit": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.fit": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.fit_objs_": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.type_fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.type_fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.type_fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.type_fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.type_fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.type_fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.type_fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.fit_objs_": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.type_fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.type_fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}}, "df": 109}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Base.n_hidden_features": {"tf": 1}, "nnetsauce.base.Base.n_hidden_features": {"tf": 1}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.Base.activation_func": {"tf": 1}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.base.Base.activation_func": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.err_func": {"tf": 1}}, "df": 7}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.GLMClassifier.family": {"tf": 1}, "nnetsauce.GLMRegressor.family": {"tf": 1}, "nnetsauce.glm.GLMClassifier.family": {"tf": 1}, "nnetsauce.glm.GLMRegressor.family": {"tf": 1}}, "df": 4}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.utils.is_factor": {"tf": 1}}, "df": 1}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.verbose": {"tf": 1}, "nnetsauce.DeepClassifier.verbose": {"tf": 1}, "nnetsauce.DeepRegressor.verbose": {"tf": 1}, "nnetsauce.LazyClassifier.verbose": {"tf": 1}, "nnetsauce.LazyRegressor.verbose": {"tf": 1}, "nnetsauce.LazyMTS.verbose": {"tf": 1}, "nnetsauce.LazyDeepClassifier.verbose": {"tf": 1}, "nnetsauce.LazyDeepRegressor.verbose": {"tf": 1}, "nnetsauce.LazyDeepMTS.verbose": {"tf": 1}, "nnetsauce.MTS.verbose": {"tf": 1}, "nnetsauce.Optimizer.verbose": {"tf": 1}, "nnetsauce.RandomBagRegressor.verbose": {"tf": 1}, "nnetsauce.RandomBagClassifier.verbose": {"tf": 1}, "nnetsauce.SubSampler.verbose": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.verbose": {"tf": 1}, "nnetsauce.deep.DeepClassifier.verbose": {"tf": 1}, "nnetsauce.deep.DeepRegressor.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.verbose": {"tf": 1}, "nnetsauce.mts.MTS.verbose": {"tf": 1}, "nnetsauce.optimizers.Optimizer.verbose": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.verbose": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.verbose": {"tf": 1}, "nnetsauce.sampling.SubSampler.verbose": {"tf": 1}, "nnetsauce.utils.Progbar.verbose": {"tf": 1}}, "df": 29}}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.RandomBagRegressor.voter_": {"tf": 1}, "nnetsauce.RandomBagClassifier.voter_": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.voter_": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.voter_": {"tf": 1}}, "df": 4}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier.method": {"tf": 1}, "nnetsauce.PredictionInterval.method": {"tf": 1}, "nnetsauce.Optimizer.learning_method": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.method": {"tf": 1}, "nnetsauce.optimizers.Optimizer.learning_method": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.method": {"tf": 1}}, "df": 6}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.LazyClassifier.custom_metric": {"tf": 1}, "nnetsauce.LazyRegressor.custom_metric": {"tf": 1}, "nnetsauce.LazyMTS.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepClassifier.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepRegressor.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepMTS.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.custom_metric": {"tf": 1}}, "df": 12}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Base.y_mean_": {"tf": 1}, "nnetsauce.MTS.mean_": {"tf": 1}, "nnetsauce.base.Base.y_mean_": {"tf": 1}, "nnetsauce.mts.MTS.mean_": {"tf": 1}}, "df": 4, "s": {"docs": {"nnetsauce.MTS.y_means_": {"tf": 1}, "nnetsauce.mts.MTS.y_means_": {"tf": 1}}, "df": 2}}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"tf": 1}, "nnetsauce.utils.merge_two_dicts": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.nonconformist.RegressorNormalizer.base_model": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1}, "nnetsauce.tests.tests_model_selection": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"tf": 1}}, "df": 5, "s": {"docs": {"nnetsauce.LazyClassifier.models": {"tf": 1}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.models": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}}, "df": 24}}}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MTS.obj": {"tf": 1}, "nnetsauce.MTS.n_series": {"tf": 1}, "nnetsauce.MTS.lags": {"tf": 1}, "nnetsauce.MTS.type_pi": {"tf": 1}, "nnetsauce.MTS.replications": {"tf": 1}, "nnetsauce.MTS.kernel": {"tf": 1}, "nnetsauce.MTS.agg": {"tf": 1}, "nnetsauce.MTS.verbose": {"tf": 1}, "nnetsauce.MTS.show_progress": {"tf": 1}, "nnetsauce.MTS.series_names": {"tf": 1}, "nnetsauce.MTS.input_dates": {"tf": 1}, "nnetsauce.MTS.fit_objs_": {"tf": 1}, "nnetsauce.MTS.y_": {"tf": 1}, "nnetsauce.MTS.X_": {"tf": 1}, "nnetsauce.MTS.xreg_": {"tf": 1}, "nnetsauce.MTS.y_means_": {"tf": 1}, "nnetsauce.MTS.mean_": {"tf": 1}, "nnetsauce.MTS.upper_": {"tf": 1}, "nnetsauce.MTS.lower_": {"tf": 1}, "nnetsauce.MTS.output_dates_": {"tf": 1}, "nnetsauce.MTS.preds_std_": {"tf": 1}, "nnetsauce.MTS.alpha_": {"tf": 1}, "nnetsauce.MTS.return_std_": {"tf": 1}, "nnetsauce.MTS.df_": {"tf": 1}, "nnetsauce.MTS.residuals_": {"tf": 1}, "nnetsauce.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.MTS.kde_": {"tf": 1}, "nnetsauce.MTS.sims_": {"tf": 1}, "nnetsauce.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.MTS.n_obs": {"tf": 1}, "nnetsauce.MTS.level": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.score": {"tf": 1}, "nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.mts": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.__init__": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.obj": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.n_series": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.lags": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.type_pi": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.replications": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.kernel": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.agg": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.verbose": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.show_progress": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.series_names": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.input_dates": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.fit_objs_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.y_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.X_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.xreg_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.y_means_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.mean_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.upper_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.lower_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.output_dates_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.preds_std_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.alpha_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.return_std_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.df_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.residuals_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.residuals_sims_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.kde_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.sims_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.residuals_std_dev_": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.n_obs": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.level": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.score": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.plot": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_MTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_score": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"tf": 1}}, "df": 88}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.tests.tests_mtask": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_Multitask": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_score": {"tf": 1}}, "df": 4}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.multitask": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.obj": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.obj": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_Multitask": {"tf": 1}}, "df": 24, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.obj": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.obj": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}}, "df": 20}}}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Optimizer.mass": {"tf": 1}, "nnetsauce.optimizers.Optimizer.mass": {"tf": 1}}, "df": 2}}, "p": {"docs": {"nnetsauce.utils.tuple_map": {"tf": 1}}, "df": 1}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.Ridge2Classifier.minloglik_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.minloglik_": {"tf": 1}}, "df": 2}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier.reg_lambda": {"tf": 1}, "nnetsauce.AdaBoostClassifier.reg_alpha": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.reg_lambda": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.reg_alpha": {"tf": 1}}, "df": 4, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}}, "df": 4}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}}, "df": 6}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.base_model": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.err_func": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.score": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}}, "df": 9}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.tests.tests_ridge_regression": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score": {"tf": 1}}, "df": 4}}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.Downloader.request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.datasets.Downloader.request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 115}}}}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.BayesianRVFLRegressor.return_std": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.return_std": {"tf": 1}, "nnetsauce.MTS.return_std_": {"tf": 1}, "nnetsauce.mts.MTS.return_std_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.return_std": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.return_std": {"tf": 1}}, "df": 6}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.CustomRegressor.replications": {"tf": 1}, "nnetsauce.MTS.replications": {"tf": 1}, "nnetsauce.PredictionInterval.replications": {"tf": 1}, "nnetsauce.custom.CustomRegressor.replications": {"tf": 1}, "nnetsauce.mts.MTS.replications": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.replications": {"tf": 1}}, "df": 6}}}}}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.MTS.residuals_": {"tf": 1}, "nnetsauce.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}}, "df": 12}}}}}}, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"tf": 1}, "nnetsauce.utils.reformat_response": {"tf": 1}}, "df": 2}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"tf": 1}, "nnetsauce.utils.reformat_response": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"nnetsauce.Base.row_sample": {"tf": 1}, "nnetsauce.Base.index_row_": {"tf": 1}, "nnetsauce.base.Base.row_sample": {"tf": 1}, "nnetsauce.base.Base.index_row_": {"tf": 1}}, "df": 4}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.LazyClassifier.random_state": {"tf": 1}, "nnetsauce.LazyRegressor.random_state": {"tf": 1}, "nnetsauce.LazyMTS.random_state": {"tf": 1}, "nnetsauce.LazyDeepClassifier.random_state": {"tf": 1}, "nnetsauce.LazyDeepRegressor.random_state": {"tf": 1}, "nnetsauce.LazyDeepMTS.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.random_state": {"tf": 1}}, "df": 12, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Optimizer.randomization": {"tf": 1}, "nnetsauce.optimizers.Optimizer.randomization": {"tf": 1}}, "df": 2}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.randombag": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.type_fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.verbose": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.n_jobs": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.voter_": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.type_fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.verbose": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.n_jobs": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.voter_": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_randombag": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_RandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_score": {"tf": 1}}, "df": 27, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.type_fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.verbose": {"tf": 1}, "nnetsauce.RandomBagRegressor.n_jobs": {"tf": 1}, "nnetsauce.RandomBagRegressor.voter_": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.type_fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.verbose": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.n_jobs": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.voter_": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}}, "df": 20}}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.type_fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.verbose": {"tf": 1}, "nnetsauce.RandomBagClassifier.n_jobs": {"tf": 1}, "nnetsauce.RandomBagClassifier.voter_": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.type_fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.verbose": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.n_jobs": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.voter_": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}}, "df": 24}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Optimizer.learning_rate": {"tf": 1}, "nnetsauce.optimizers.Optimizer.learning_rate": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"2": {"docs": {"nnetsauce.ridge2": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.solver": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.beta_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.classes_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.minloglik_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}}, "df": 26, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.type_fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor": {"tf": 1}}, "df": 13}}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.type_fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.solver": {"tf": 1}, "nnetsauce.Ridge2Classifier.beta_": {"tf": 1}, "nnetsauce.Ridge2Classifier.classes_": {"tf": 1}, "nnetsauce.Ridge2Classifier.minloglik_": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.solver": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.beta_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.classes_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.minloglik_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}}, "df": 24}}}}}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}}, "df": 14}}}}}}}}}}}}}}}}}}}}, "docs": {"nnetsauce.tests.tests_ridge": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge.test_Ridge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge.test_score": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score": {"tf": 1}}, "df": 8}}}}, "v": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"2": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1}}, "df": 1}, "docs": {"nnetsauce.rvfl": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.s": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.sigma": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.beta_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.Sigma_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.GCV_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.return_std": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s1": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s2": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.sigma": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.beta_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.Sigma_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.GCV_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.return_std": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_rvfl": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_rvfl": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_score": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1}}, "df": 32}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_rbind": {"tf": 1}, "nnetsauce.utils.rbind": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.AdaBoostClassifier.reg_lambda": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.reg_lambda": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.DeepClassifier.n_layers": {"tf": 1}, "nnetsauce.DeepRegressor.n_layers": {"tf": 1}, "nnetsauce.DeepMTS.n_layers": {"tf": 1}, "nnetsauce.LazyDeepClassifier.n_layers": {"tf": 1}, "nnetsauce.LazyDeepRegressor.n_layers": {"tf": 1}, "nnetsauce.LazyDeepMTS.n_layers": {"tf": 1}, "nnetsauce.deep.DeepClassifier.n_layers": {"tf": 1}, "nnetsauce.deep.DeepRegressor.n_layers": {"tf": 1}, "nnetsauce.deep.DeepMTS.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.n_layers": {"tf": 1}}, "df": 12}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"tf": 1}}, "df": 2}}}}}, "z": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.tests.tests_lazy_custom": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom.test_custom": {"tf": 1}}, "df": 3, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.verbose": {"tf": 1}, "nnetsauce.LazyClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.LazyClassifier.custom_metric": {"tf": 1}, "nnetsauce.LazyClassifier.predictions": {"tf": 1}, "nnetsauce.LazyClassifier.sort_by": {"tf": 1}, "nnetsauce.LazyClassifier.models": {"tf": 1}, "nnetsauce.LazyClassifier.random_state": {"tf": 1}, "nnetsauce.LazyClassifier.estimators": {"tf": 1}, "nnetsauce.LazyClassifier.preprocess": {"tf": 1}, "nnetsauce.LazyClassifier.n_jobs": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.sort_by": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}}, "df": 32}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.verbose": {"tf": 1}, "nnetsauce.LazyRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.LazyRegressor.custom_metric": {"tf": 1}, "nnetsauce.LazyRegressor.predictions": {"tf": 1}, "nnetsauce.LazyRegressor.models": {"tf": 1}, "nnetsauce.LazyRegressor.random_state": {"tf": 1}, "nnetsauce.LazyRegressor.estimators": {"tf": 1}, "nnetsauce.LazyRegressor.preprocess": {"tf": 1}, "nnetsauce.LazyRegressor.n_jobs": {"tf": 1}, "nnetsauce.LazyRegressor.fit": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}}, "df": 30}}}}}}}}}, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyMTS.verbose": {"tf": 1}, "nnetsauce.LazyMTS.ignore_warnings": {"tf": 1}, "nnetsauce.LazyMTS.custom_metric": {"tf": 1}, "nnetsauce.LazyMTS.predictions": {"tf": 1}, "nnetsauce.LazyMTS.models": {"tf": 1}, "nnetsauce.LazyMTS.random_state": {"tf": 1}, "nnetsauce.LazyMTS.estimators": {"tf": 1}, "nnetsauce.LazyMTS.preprocess": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}}, "df": 30}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.verbose": {"tf": 1}, "nnetsauce.LazyDeepClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepClassifier.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepClassifier.predictions": {"tf": 1}, "nnetsauce.LazyDeepClassifier.sort_by": {"tf": 1}, "nnetsauce.LazyDeepClassifier.models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.random_state": {"tf": 1}, "nnetsauce.LazyDeepClassifier.estimators": {"tf": 1}, "nnetsauce.LazyDeepClassifier.preprocess": {"tf": 1}, "nnetsauce.LazyDeepClassifier.n_layers": {"tf": 1}, "nnetsauce.LazyDeepClassifier.n_jobs": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.sort_by": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}}, "df": 34}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.verbose": {"tf": 1}, "nnetsauce.LazyDeepRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepRegressor.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepRegressor.predictions": {"tf": 1}, "nnetsauce.LazyDeepRegressor.models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.random_state": {"tf": 1}, "nnetsauce.LazyDeepRegressor.estimators": {"tf": 1}, "nnetsauce.LazyDeepRegressor.preprocess": {"tf": 1}, "nnetsauce.LazyDeepRegressor.n_layers": {"tf": 1}, "nnetsauce.LazyDeepRegressor.n_jobs": {"tf": 1}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}}, "df": 32}}}}}}}}}, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.verbose": {"tf": 1}, "nnetsauce.LazyDeepMTS.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepMTS.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepMTS.predictions": {"tf": 1}, "nnetsauce.LazyDeepMTS.models": {"tf": 1}, "nnetsauce.LazyDeepMTS.random_state": {"tf": 1}, "nnetsauce.LazyDeepMTS.estimators": {"tf": 1}, "nnetsauce.LazyDeepMTS.preprocess": {"tf": 1}, "nnetsauce.LazyDeepMTS.n_layers": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}}, "df": 32}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.lazypredict": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.sort_by": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.sort_by": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.verbose": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.n_layers": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}}, "df": 96}}}}}}}}}, "g": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.MTS.lags": {"tf": 1}, "nnetsauce.mts.MTS.lags": {"tf": 1}, "nnetsauce.utils.create_lags": {"tf": 1}}, "df": 3}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 1}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.base_learners_": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.Optimizer.learning_rate": {"tf": 1}, "nnetsauce.Optimizer.learning_method": {"tf": 1}, "nnetsauce.optimizers.Optimizer.learning_rate": {"tf": 1}, "nnetsauce.optimizers.Optimizer.learning_method": {"tf": 1}}, "df": 4}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.MTS.level": {"tf": 1}, "nnetsauce.PredictionInterval.level": {"tf": 1}, "nnetsauce.mts.MTS.level": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.level": {"tf": 1}}, "df": 4}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.Base.direct_link": {"tf": 1}, "nnetsauce.base.Base.direct_link": {"tf": 1}}, "df": 2}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.logit_loss": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.glm.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}}, "df": 14}}, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.MTS.lower_": {"tf": 1}, "nnetsauce.mts.MTS.lower_": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "f": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"tf": 1}}, "df": 1}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.Base.n_hidden_features": {"tf": 1}, "nnetsauce.Base.activation_name": {"tf": 1}, "nnetsauce.Base.a": {"tf": 1}, "nnetsauce.Base.nodes_sim": {"tf": 1}, "nnetsauce.Base.bias": {"tf": 1}, "nnetsauce.Base.seed": {"tf": 1}, "nnetsauce.Base.backend": {"tf": 1}, "nnetsauce.Base.dropout": {"tf": 1}, "nnetsauce.Base.direct_link": {"tf": 1}, "nnetsauce.Base.cluster_encode": {"tf": 1}, "nnetsauce.Base.type_clust": {"tf": 1}, "nnetsauce.Base.type_scaling": {"tf": 1}, "nnetsauce.Base.col_sample": {"tf": 1}, "nnetsauce.Base.row_sample": {"tf": 1}, "nnetsauce.Base.n_clusters": {"tf": 1}, "nnetsauce.Base.subsampler_": {"tf": 1}, "nnetsauce.Base.index_col_": {"tf": 1}, "nnetsauce.Base.index_row_": {"tf": 1}, "nnetsauce.Base.clustering_obj_": {"tf": 1}, "nnetsauce.Base.clustering_scaler_": {"tf": 1}, "nnetsauce.Base.nn_scaler_": {"tf": 1}, "nnetsauce.Base.scaler_": {"tf": 1}, "nnetsauce.Base.encoder_": {"tf": 1}, "nnetsauce.Base.W_": {"tf": 1}, "nnetsauce.Base.X_": {"tf": 1}, "nnetsauce.Base.y_": {"tf": 1}, "nnetsauce.Base.y_mean_": {"tf": 1}, "nnetsauce.Base.beta_": {"tf": 1}, "nnetsauce.Base.activation_func": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.base": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.__init__": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.n_hidden_features": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.activation_name": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.a": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.nodes_sim": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.bias": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.seed": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.backend": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.dropout": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.direct_link": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.cluster_encode": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.type_clust": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.type_scaling": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.col_sample": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.row_sample": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.n_clusters": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.subsampler_": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.index_col_": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.index_row_": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.clustering_obj_": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.clustering_scaler_": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.nn_scaler_": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.scaler_": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.encoder_": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.W_": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.X_": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.y_": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.y_mean_": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.beta_": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.activation_func": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.create_layer": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.cook_training_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.base_model": {"tf": 1}, "nnetsauce.tests.tests_base": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase.test_base": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase.test_score": {"tf": 1}}, "df": 87, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}}, "df": 10}}}}}}}}}}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Base.backend": {"tf": 1}, "nnetsauce.base.Base.backend": {"tf": 1}}, "df": 2}}}}}, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"2": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.s1": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.s2": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.sigma": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.beta_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.Sigma_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.GCV_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.return_std": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s1": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s2": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.sigma": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.beta_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.Sigma_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.GCV_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.return_std": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}}, "df": 26}}}}}}}}}}, "docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.s": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.sigma": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.beta_": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.Sigma_": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.GCV_": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.return_std": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.s": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.sigma": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.beta_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.Sigma_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.GCV_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.return_std": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}}, "df": 24}}}}}}}}}}}}}}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.Optimizer.batch_prop": {"tf": 1}, "nnetsauce.optimizers.Optimizer.batch_prop": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Base.bias": {"tf": 1}, "nnetsauce.base.Base.bias": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.Base.beta_": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.beta_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.beta_": {"tf": 1}, "nnetsauce.Ridge2Classifier.beta_": {"tf": 1}, "nnetsauce.base.Base.beta_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.beta_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.beta_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.beta_": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1}, "nnetsauce.utils.beta_hat": {"tf": 1}}, "df": 12}}}, "y": {"docs": {"nnetsauce.LazyClassifier.sort_by": {"tf": 1}, "nnetsauce.LazyDeepClassifier.sort_by": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.sort_by": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.sort_by": {"tf": 1}}, "df": 4}, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.boosting": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.type_fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.verbose": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.method": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.reg_lambda": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.reg_alpha": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.alpha_": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.base_learners_": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}}, "df": 15}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}}, "df": 83, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyClassifier.predictions": {"tf": 1}, "nnetsauce.LazyRegressor.predictions": {"tf": 1}, "nnetsauce.LazyMTS.predictions": {"tf": 1}, "nnetsauce.LazyDeepClassifier.predictions": {"tf": 1}, "nnetsauce.LazyDeepRegressor.predictions": {"tf": 1}, "nnetsauce.LazyDeepMTS.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.predictions": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.predictions": {"tf": 1}}, "df": 12}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.PredictionInterval.obj": {"tf": 1}, "nnetsauce.PredictionInterval.method": {"tf": 1}, "nnetsauce.PredictionInterval.level": {"tf": 1}, "nnetsauce.PredictionInterval.type_pi": {"tf": 1}, "nnetsauce.PredictionInterval.replications": {"tf": 1}, "nnetsauce.PredictionInterval.kernel": {"tf": 1}, "nnetsauce.PredictionInterval.agg": {"tf": 1}, "nnetsauce.PredictionInterval.seed": {"tf": 1}, "nnetsauce.PredictionInterval.alpha_": {"tf": 1}, "nnetsauce.PredictionInterval.quantile_": {"tf": 1}, "nnetsauce.PredictionInterval.icp_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}, "nnetsauce.PredictionInterval.kde_": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.predictioninterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.obj": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.method": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.level": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.type_pi": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.replications": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.kernel": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.agg": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.seed": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.alpha_": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.quantile_": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.icp_": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.kde_": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}}, "df": 43}}}}}}}}}}}}}}, "s": {"docs": {"nnetsauce.MTS.preds_std_": {"tf": 1}, "nnetsauce.mts.MTS.preds_std_": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyClassifier.preprocess": {"tf": 1}, "nnetsauce.LazyRegressor.preprocess": {"tf": 1}, "nnetsauce.LazyMTS.preprocess": {"tf": 1}, "nnetsauce.LazyDeepClassifier.preprocess": {"tf": 1}, "nnetsauce.LazyDeepRegressor.preprocess": {"tf": 1}, "nnetsauce.LazyDeepMTS.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.preprocess": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.preprocess": {"tf": 1}}, "df": 12}}}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}}, "df": 20}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}}, "df": 12}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.MTS.show_progress": {"tf": 1}, "nnetsauce.mts.MTS.show_progress": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}, "nnetsauce.utils.Progbar.__init__": {"tf": 1}, "nnetsauce.utils.Progbar.target": {"tf": 1}, "nnetsauce.utils.Progbar.width": {"tf": 1}, "nnetsauce.utils.Progbar.verbose": {"tf": 1}, "nnetsauce.utils.Progbar.interval": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1}, "nnetsauce.utils.Progbar.add": {"tf": 1}}, "df": 8}}}}, "p": {"docs": {"nnetsauce.Optimizer.batch_prop": {"tf": 1}, "nnetsauce.optimizers.Optimizer.batch_prop": {"tf": 1}}, "df": 2}}}, "i": {"docs": {"nnetsauce.CustomRegressor.type_pi": {"tf": 1}, "nnetsauce.MTS.type_pi": {"tf": 1}, "nnetsauce.PredictionInterval.type_pi": {"tf": 1}, "nnetsauce.custom.CustomRegressor.type_pi": {"tf": 1}, "nnetsauce.mts.MTS.type_pi": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.type_pi": {"tf": 1}}, "df": 6}, "k": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Downloader.pkgname": {"tf": 1}, "nnetsauce.datasets.Downloader.pkgname": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_psd_check": {"tf": 1}}, "df": 1}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"tf": 1}, "nnetsauce.utils.inv_penalized_cov": {"tf": 1}}, "df": 2}}}}}}}}}, "s": {"1": {"docs": {"nnetsauce.BayesianRVFL2Regressor.s1": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s1": {"tf": 1}}, "df": 2}, "2": {"docs": {"nnetsauce.BayesianRVFL2Regressor.s2": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s2": {"tf": 1}}, "df": 2}, "docs": {"nnetsauce.BayesianRVFLRegressor.s": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.s": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 119}, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Base.seed": {"tf": 1}, "nnetsauce.PredictionInterval.seed": {"tf": 1}, "nnetsauce.SubSampler.seed": {"tf": 1}, "nnetsauce.base.Base.seed": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.seed": {"tf": 1}, "nnetsauce.sampling.SubSampler.seed": {"tf": 1}}, "df": 6}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.MTS.n_series": {"tf": 1}, "nnetsauce.MTS.series_names": {"tf": 1}, "nnetsauce.mts.MTS.n_series": {"tf": 1}, "nnetsauce.mts.MTS.series_names": {"tf": 1}}, "df": 4}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.tests.tests_model_selection": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"tf": 1}}, "df": 3}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.score": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.score": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.score": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_score": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase.test_score": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom.test_score": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_score": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_score": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_score": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge.test_score": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_score": {"tf": 1}, "nnetsauce.utils.winkler_score": {"tf": 1}}, "df": 76}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.Base.type_scaling": {"tf": 1}, "nnetsauce.base.Base.type_scaling": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Base.clustering_scaler_": {"tf": 1}, "nnetsauce.Base.nn_scaler_": {"tf": 1}, "nnetsauce.Base.scaler_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.base.Base.clustering_scaler_": {"tf": 1}, "nnetsauce.base.Base.nn_scaler_": {"tf": 1}, "nnetsauce.base.Base.scaler_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}}, "df": 10}, "d": {"docs": {"nnetsauce.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}}, "df": 4}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.Base.nodes_sim": {"tf": 1}, "nnetsauce.base.Base.nodes_sim": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.MTS.sims_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_sims_": {"tf": 1}, "nnetsauce.mts.MTS.sims_": {"tf": 1}}, "df": 4}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.obj": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.type_fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.obj": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}}, "df": 24}}}}}}}}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.simulation": {"tf": 1}, "nnetsauce.simulation.generate_sobol": {"tf": 1}, "nnetsauce.simulation.generate_uniform": {"tf": 1}, "nnetsauce.simulation.generate_hammersley": {"tf": 1}, "nnetsauce.simulation.generate_halton": {"tf": 1}, "nnetsauce.simulation.getsims": {"tf": 1}, "nnetsauce.simulation.getsims.getsims": {"tf": 1}, "nnetsauce.tests.tests_simulation": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_sobol": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_hammersley": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_halton": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_uniform": {"tf": 1}}, "df": 13}}}}}}}}, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.BayesianRVFLRegressor.sigma": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.Sigma_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.sigma": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.Sigma_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.sigma": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.Sigma_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.sigma": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.Sigma_": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1}}, "df": 10}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Base.col_sample": {"tf": 1}, "nnetsauce.Base.row_sample": {"tf": 1}, "nnetsauce.base.Base.col_sample": {"tf": 1}, "nnetsauce.base.Base.row_sample": {"tf": 1}}, "df": 4, "s": {"docs": {"nnetsauce.SubSampler.n_samples": {"tf": 1}, "nnetsauce.sampling.SubSampler.n_samples": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.sampling": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}, "nnetsauce.sampling.SubSampler.y": {"tf": 1}, "nnetsauce.sampling.SubSampler.n_samples": {"tf": 1}, "nnetsauce.sampling.SubSampler.seed": {"tf": 1}, "nnetsauce.sampling.SubSampler.indices": {"tf": 1}, "nnetsauce.sampling.SubSampler.n_jobs": {"tf": 1}, "nnetsauce.sampling.SubSampler.verbose": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}}, "df": 10}}}}}}}, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.SubSampler.subsample": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}}, "df": 2, "r": {"docs": {"nnetsauce.Base.subsampler_": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.SubSampler.y": {"tf": 1}, "nnetsauce.SubSampler.n_samples": {"tf": 1}, "nnetsauce.SubSampler.seed": {"tf": 1}, "nnetsauce.SubSampler.indices": {"tf": 1}, "nnetsauce.SubSampler.n_jobs": {"tf": 1}, "nnetsauce.SubSampler.verbose": {"tf": 1}, "nnetsauce.SubSampler.subsample": {"tf": 1}, "nnetsauce.base.Base.subsampler_": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}, "nnetsauce.sampling.SubSampler.y": {"tf": 1}, "nnetsauce.sampling.SubSampler.n_samples": {"tf": 1}, "nnetsauce.sampling.SubSampler.seed": {"tf": 1}, "nnetsauce.sampling.SubSampler.indices": {"tf": 1}, "nnetsauce.sampling.SubSampler.n_jobs": {"tf": 1}, "nnetsauce.sampling.SubSampler.verbose": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}}, "df": 20}}}}}}}}}, "t": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.BayesianRVFLRegressor.return_std": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.return_std": {"tf": 1}, "nnetsauce.MTS.preds_std_": {"tf": 1}, "nnetsauce.MTS.return_std_": {"tf": 1}, "nnetsauce.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.mts.MTS.preds_std_": {"tf": 1}, "nnetsauce.mts.MTS.return_std_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.return_std": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.return_std": {"tf": 1}}, "df": 10}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.DeepClassifier.stacked_obj": {"tf": 1}, "nnetsauce.DeepRegressor.stacked_obj": {"tf": 1}, "nnetsauce.deep.DeepClassifier.stacked_obj": {"tf": 1}, "nnetsauce.deep.DeepRegressor.stacked_obj": {"tf": 1}}, "df": 4}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyClassifier.random_state": {"tf": 1}, "nnetsauce.LazyRegressor.random_state": {"tf": 1}, "nnetsauce.LazyMTS.random_state": {"tf": 1}, "nnetsauce.LazyDeepClassifier.random_state": {"tf": 1}, "nnetsauce.LazyDeepRegressor.random_state": {"tf": 1}, "nnetsauce.LazyDeepMTS.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.random_state": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.random_state": {"tf": 1}}, "df": 12}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Downloader.source": {"tf": 1}, "nnetsauce.datasets.Downloader.source": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyClassifier.sort_by": {"tf": 1}, "nnetsauce.LazyDeepClassifier.sort_by": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.sort_by": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.sort_by": {"tf": 1}}, "df": 4}}, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Ridge2Classifier.solver": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.solver": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.simulation.generate_sobol": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_sobol": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"nnetsauce.MTS.show_progress": {"tf": 1}, "nnetsauce.mts.MTS.show_progress": {"tf": 1}}, "df": 2}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 4}}}}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Base.n_hidden_features": {"tf": 1}, "nnetsauce.base.Base.n_hidden_features": {"tf": 1}}, "df": 2}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.simulation.generate_hammersley": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_hammersley": {"tf": 1}}, "df": 2}}}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.simulation.generate_halton": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_halton": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1}, "nnetsauce.utils.beta_hat": {"tf": 1}}, "df": 4}}}, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Base.dropout": {"tf": 1}, "nnetsauce.base.Base.dropout": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Base.direct_link": {"tf": 1}, "nnetsauce.base.Base.direct_link": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"tf": 1}, "nnetsauce.utils.merge_two_dicts": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"nnetsauce.deep": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.stacked_obj": {"tf": 1}, "nnetsauce.deep.DeepClassifier.verbose": {"tf": 1}, "nnetsauce.deep.DeepClassifier.n_layers": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.stacked_obj": {"tf": 1}, "nnetsauce.deep.DeepRegressor.verbose": {"tf": 1}, "nnetsauce.deep.DeepRegressor.n_layers": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.n_layers": {"tf": 1}, "nnetsauce.deep.DeepMTS.obj": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}}, "df": 27, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.stacked_obj": {"tf": 1}, "nnetsauce.DeepClassifier.verbose": {"tf": 1}, "nnetsauce.DeepClassifier.n_layers": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.stacked_obj": {"tf": 1}, "nnetsauce.deep.DeepClassifier.verbose": {"tf": 1}, "nnetsauce.deep.DeepClassifier.n_layers": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}}, "df": 20}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.stacked_obj": {"tf": 1}, "nnetsauce.DeepRegressor.verbose": {"tf": 1}, "nnetsauce.DeepRegressor.n_layers": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.stacked_obj": {"tf": 1}, "nnetsauce.deep.DeepRegressor.verbose": {"tf": 1}, "nnetsauce.deep.DeepRegressor.n_layers": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}}, "df": 18}}}}}}}}}, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.DeepMTS.n_layers": {"tf": 1}, "nnetsauce.DeepMTS.obj": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.n_layers": {"tf": 1}, "nnetsauce.deep.DeepMTS.obj": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}}, "df": 14}}}}}, "v": {"docs": {"nnetsauce.MTS.residuals_std_dev_": {"tf": 1}, "nnetsauce.mts.MTS.residuals_std_dev_": {"tf": 1}}, "df": 2}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.Optimizer.decay": {"tf": 1}, "nnetsauce.optimizers.Optimizer.decay": {"tf": 1}}, "df": 2}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {"nnetsauce.demo": {"tf": 1}}, "df": 1}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.tests.tests_download": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload.test_download": {"tf": 1.4142135623730951}}, "df": 5, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Downloader": {"tf": 1}, "nnetsauce.Downloader.pkgname": {"tf": 1}, "nnetsauce.Downloader.dataset": {"tf": 1}, "nnetsauce.Downloader.source": {"tf": 1}, "nnetsauce.Downloader.url": {"tf": 1}, "nnetsauce.Downloader.request": {"tf": 1}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.datasets.Downloader": {"tf": 1}, "nnetsauce.datasets.Downloader.pkgname": {"tf": 1}, "nnetsauce.datasets.Downloader.dataset": {"tf": 1}, "nnetsauce.datasets.Downloader.source": {"tf": 1}, "nnetsauce.datasets.Downloader.url": {"tf": 1}, "nnetsauce.datasets.Downloader.request": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}}, "df": 14}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Downloader.dataset": {"tf": 1}, "nnetsauce.datasets.Downloader.dataset": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.datasets": {"tf": 1}, "nnetsauce.datasets.Downloader": {"tf": 1}, "nnetsauce.datasets.Downloader.pkgname": {"tf": 1}, "nnetsauce.datasets.Downloader.dataset": {"tf": 1}, "nnetsauce.datasets.Downloader.source": {"tf": 1}, "nnetsauce.datasets.Downloader.url": {"tf": 1}, "nnetsauce.datasets.Downloader.request": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}}, "df": 8}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.MTS.input_dates": {"tf": 1}, "nnetsauce.MTS.output_dates_": {"tf": 1}, "nnetsauce.mts.MTS.input_dates": {"tf": 1}, "nnetsauce.mts.MTS.output_dates_": {"tf": 1}, "nnetsauce.utils.compute_output_dates": {"tf": 1}}, "df": 5}}}}, "f": {"docs": {"nnetsauce.MTS.df_": {"tf": 1}, "nnetsauce.mts.MTS.df_": {"tf": 1}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1}}, "df": 3}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Base.type_clust": {"tf": 1}, "nnetsauce.base.Base.type_clust": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Base.cluster_encode": {"tf": 1}, "nnetsauce.base.Base.cluster_encode": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.Base.n_clusters": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.n_clusters": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}}, "df": 4}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.Base.clustering_obj_": {"tf": 1}, "nnetsauce.Base.clustering_scaler_": {"tf": 1}, "nnetsauce.base.Base.clustering_obj_": {"tf": 1}, "nnetsauce.base.Base.clustering_scaler_": {"tf": 1}}, "df": 4}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Ridge2Classifier.classes_": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.classes_": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.Base.col_sample": {"tf": 1}, "nnetsauce.Base.index_col_": {"tf": 1}, "nnetsauce.base.Base.col_sample": {"tf": 1}, "nnetsauce.base.Base.index_col_": {"tf": 1}}, "df": 4, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}}, "df": 4}}, "v": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"tf": 1}, "nnetsauce.utils.inv_penalized_cov": {"tf": 1}}, "df": 2}, "n": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.utils.convert_df_to_numeric": {"tf": 1}}, "df": 1}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.compute_output_dates": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.utils.create_lags": {"tf": 1}, "nnetsauce.utils.create_train_inputs": {"tf": 1}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_crossprod": {"tf": 1}, "nnetsauce.utils.crossprod": {"tf": 1}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.LazyClassifier.custom_metric": {"tf": 1}, "nnetsauce.LazyRegressor.custom_metric": {"tf": 1}, "nnetsauce.LazyMTS.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepClassifier.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepRegressor.custom_metric": {"tf": 1}, "nnetsauce.LazyDeepMTS.custom_metric": {"tf": 1}, "nnetsauce.custom": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.__init__": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.obj": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.type_fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.type_fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.type_pi": {"tf": 1}, "nnetsauce.custom.CustomRegressor.replications": {"tf": 1}, "nnetsauce.custom.CustomRegressor.kernel": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.custom_metric": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.custom_metric": {"tf": 1}, "nnetsauce.tests.tests_custom": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom.test_custom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom.test_score": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom.test_custom": {"tf": 1.4142135623730951}}, "df": 43, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.type_fit": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.type_fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}}, "df": 16}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.type_fit": {"tf": 1}, "nnetsauce.CustomRegressor.type_pi": {"tf": 1}, "nnetsauce.CustomRegressor.replications": {"tf": 1}, "nnetsauce.CustomRegressor.kernel": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.type_fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.type_pi": {"tf": 1}, "nnetsauce.custom.CustomRegressor.replications": {"tf": 1}, "nnetsauce.custom.CustomRegressor.kernel": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}}, "df": 22}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1}}, "df": 6}}}}}}}}}, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_cbind": {"tf": 1}, "nnetsauce.utils.cbind": {"tf": 1}}, "df": 2}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.tests.tests_utils.TestUtils.test_psd_check": {"tf": 1}, "nnetsauce.tests.utilstests.test_check": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Base.cluster_encode": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.base.Base.cluster_encode": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"tf": 1}}, "df": 6, "r": {"docs": {"nnetsauce.Base.encoder_": {"tf": 1}, "nnetsauce.base.Base.encoder_": {"tf": 1}}, "df": 2}}}}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "f": {"docs": {"nnetsauce.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 1}}, "df": 2}, "r": {"docs": {"nnetsauce.nonconformist.RegressorNormalizer.err_func": {"tf": 1}}, "df": 1}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyClassifier.estimators": {"tf": 1}, "nnetsauce.LazyRegressor.estimators": {"tf": 1}, "nnetsauce.LazyMTS.estimators": {"tf": 1}, "nnetsauce.LazyDeepClassifier.estimators": {"tf": 1}, "nnetsauce.LazyDeepRegressor.estimators": {"tf": 1}, "nnetsauce.LazyDeepMTS.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.estimators": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.estimators": {"tf": 1}}, "df": 12}}}}}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {"nnetsauce.Base.clustering_obj_": {"tf": 1}, "nnetsauce.DeepClassifier.stacked_obj": {"tf": 1}, "nnetsauce.DeepRegressor.stacked_obj": {"tf": 1}, "nnetsauce.DeepMTS.obj": {"tf": 1}, "nnetsauce.MTS.obj": {"tf": 1}, "nnetsauce.MultitaskClassifier.obj": {"tf": 1}, "nnetsauce.PredictionInterval.obj": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.obj": {"tf": 1}, "nnetsauce.base.Base.clustering_obj_": {"tf": 1}, "nnetsauce.custom.Custom.obj": {"tf": 1}, "nnetsauce.deep.DeepClassifier.stacked_obj": {"tf": 1}, "nnetsauce.deep.DeepRegressor.stacked_obj": {"tf": 1}, "nnetsauce.deep.DeepMTS.obj": {"tf": 1}, "nnetsauce.mts.MTS.obj": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.obj": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.obj": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.obj": {"tf": 1}}, "df": 17, "s": {"docs": {"nnetsauce.MTS.fit_objs_": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.mts.MTS.fit_objs_": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit_objs_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit_objs_": {"tf": 1}}, "df": 6}}, "s": {"docs": {"nnetsauce.MTS.n_obs": {"tf": 1}, "nnetsauce.mts.MTS.n_obs": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.MTS.output_dates_": {"tf": 1}, "nnetsauce.mts.MTS.output_dates_": {"tf": 1}, "nnetsauce.utils.compute_output_dates": {"tf": 1}}, "df": 3}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Optimizer.opt": {"tf": 1}, "nnetsauce.optimizers.Optimizer.opt": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.Optimizer.type_optim": {"tf": 1}, "nnetsauce.optimizers.Optimizer.type_optim": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.Optimizer.type_optim": {"tf": 1}, "nnetsauce.Optimizer.num_iters": {"tf": 1}, "nnetsauce.Optimizer.learning_rate": {"tf": 1}, "nnetsauce.Optimizer.batch_prop": {"tf": 1}, "nnetsauce.Optimizer.learning_method": {"tf": 1}, "nnetsauce.Optimizer.randomization": {"tf": 1}, "nnetsauce.Optimizer.mass": {"tf": 1}, "nnetsauce.Optimizer.decay": {"tf": 1}, "nnetsauce.Optimizer.tolerance": {"tf": 1}, "nnetsauce.Optimizer.verbose": {"tf": 1}, "nnetsauce.Optimizer.opt": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.type_optim": {"tf": 1}, "nnetsauce.optimizers.Optimizer.num_iters": {"tf": 1}, "nnetsauce.optimizers.Optimizer.learning_rate": {"tf": 1}, "nnetsauce.optimizers.Optimizer.batch_prop": {"tf": 1}, "nnetsauce.optimizers.Optimizer.learning_method": {"tf": 1}, "nnetsauce.optimizers.Optimizer.randomization": {"tf": 1}, "nnetsauce.optimizers.Optimizer.mass": {"tf": 1}, "nnetsauce.optimizers.Optimizer.decay": {"tf": 1}, "nnetsauce.optimizers.Optimizer.tolerance": {"tf": 1}, "nnetsauce.optimizers.Optimizer.verbose": {"tf": 1}, "nnetsauce.optimizers.Optimizer.opt": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"tf": 1}}, "df": 30, "s": {"docs": {"nnetsauce.optimizers": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.type_optim": {"tf": 1}, "nnetsauce.optimizers.Optimizer.num_iters": {"tf": 1}, "nnetsauce.optimizers.Optimizer.learning_rate": {"tf": 1}, "nnetsauce.optimizers.Optimizer.batch_prop": {"tf": 1}, "nnetsauce.optimizers.Optimizer.learning_method": {"tf": 1}, "nnetsauce.optimizers.Optimizer.randomization": {"tf": 1}, "nnetsauce.optimizers.Optimizer.mass": {"tf": 1}, "nnetsauce.optimizers.Optimizer.decay": {"tf": 1}, "nnetsauce.optimizers.Optimizer.tolerance": {"tf": 1}, "nnetsauce.optimizers.Optimizer.verbose": {"tf": 1}, "nnetsauce.optimizers.Optimizer.opt": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"tf": 1}}, "df": 16}}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"tf": 1}}, "df": 2}}}, "w": {"docs": {"nnetsauce.Base.W_": {"tf": 1}, "nnetsauce.base.Base.W_": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.LazyRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.LazyMTS.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.LazyDeepMTS.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.ignore_warnings": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.ignore_warnings": {"tf": 1}}, "df": 12}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.utils.Progbar.width": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.utils.winkler_score": {"tf": 1}}, "df": 1}}}}}}}, "x": {"docs": {"nnetsauce.Base.X_": {"tf": 1}, "nnetsauce.MTS.X_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}, "nnetsauce.base.Base.X_": {"tf": 1}, "nnetsauce.mts.MTS.X_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.X_scaler_": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.scaled_X_": {"tf": 1}}, "df": 8, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.MTS.xreg_": {"tf": 1}, "nnetsauce.mts.MTS.xreg_": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {"nnetsauce.Base.y_": {"tf": 1}, "nnetsauce.Base.y_mean_": {"tf": 1}, "nnetsauce.MTS.y_": {"tf": 1}, "nnetsauce.MTS.y_means_": {"tf": 1}, "nnetsauce.SubSampler.y": {"tf": 1}, "nnetsauce.base.Base.y_": {"tf": 1}, "nnetsauce.base.Base.y_mean_": {"tf": 1}, "nnetsauce.mts.MTS.y_": {"tf": 1}, "nnetsauce.mts.MTS.y_means_": {"tf": 1}, "nnetsauce.sampling.SubSampler.y": {"tf": 1}}, "df": 10}, "g": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "v": {"docs": {"nnetsauce.BayesianRVFLRegressor.GCV_": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.GCV_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.GCV_": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.GCV_": {"tf": 1}}, "df": 4}}, "l": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.glm": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.family": {"tf": 1}, "nnetsauce.glm.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.family": {"tf": 1}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}}, "df": 21, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.family": {"tf": 1}, "nnetsauce.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.family": {"tf": 1}, "nnetsauce.glm.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}}, "df": 20}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.family": {"tf": 1}, "nnetsauce.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.family": {"tf": 1}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}}, "df": 20}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"tf": 1}}, "df": 2}}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.simulation.generate_sobol": {"tf": 1}, "nnetsauce.simulation.generate_uniform": {"tf": 1}, "nnetsauce.simulation.generate_hammersley": {"tf": 1}, "nnetsauce.simulation.generate_halton": {"tf": 1}}, "df": 4}}}}}}, "t": {"docs": {"nnetsauce.tests.tests_mts.TestMTS.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.simulation.getsims": {"tf": 1}, "nnetsauce.simulation.getsims.getsims": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.CustomRegressor.kernel": {"tf": 1}, "nnetsauce.MTS.kernel": {"tf": 1}, "nnetsauce.PredictionInterval.kernel": {"tf": 1}, "nnetsauce.custom.CustomRegressor.kernel": {"tf": 1}, "nnetsauce.mts.MTS.kernel": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.kernel": {"tf": 1}}, "df": 6}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.MTS.kde_": {"tf": 1}, "nnetsauce.PredictionInterval.kde_": {"tf": 1}, "nnetsauce.mts.MTS.kde_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.kde_": {"tf": 1}}, "df": 4}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.Downloader.url": {"tf": 1}, "nnetsauce.datasets.Downloader.url": {"tf": 1}}, "df": 2}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.MTS.upper_": {"tf": 1}, "nnetsauce.mts.MTS.upper_": {"tf": 1}}, "df": 2}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.simulation.generate_uniform": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_uniform": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.tests.tests_utils": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_crossprod": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_tcrossprod": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_cbind": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_rbind": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_psd_check": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_nearestPD": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1}, "nnetsauce.utils": {"tf": 1}, "nnetsauce.utils.beta_hat": {"tf": 1}, "nnetsauce.utils.inv_penalized_cov": {"tf": 1}, "nnetsauce.utils.cbind": {"tf": 1}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.rbind": {"tf": 1}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1}, "nnetsauce.utils.crossprod": {"tf": 1}, "nnetsauce.utils.tcrossprod": {"tf": 1}, "nnetsauce.utils.to_np_array": {"tf": 1}, "nnetsauce.utils.merge_two_dicts": {"tf": 1}, "nnetsauce.utils.is_factor": {"tf": 1}, "nnetsauce.utils.isPD": {"tf": 1}, "nnetsauce.utils.nearestPD": {"tf": 1}, "nnetsauce.utils.compute_output_dates": {"tf": 1}, "nnetsauce.utils.create_lags": {"tf": 1}, "nnetsauce.utils.create_train_inputs": {"tf": 1}, "nnetsauce.utils.reformat_response": {"tf": 1}, "nnetsauce.utils.tuple_map": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}, "nnetsauce.utils.Progbar.__init__": {"tf": 1}, "nnetsauce.utils.Progbar.target": {"tf": 1}, "nnetsauce.utils.Progbar.width": {"tf": 1}, "nnetsauce.utils.Progbar.verbose": {"tf": 1}, "nnetsauce.utils.Progbar.interval": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1}, "nnetsauce.utils.Progbar.add": {"tf": 1}, "nnetsauce.utils.winkler_score": {"tf": 1}}, "df": 47, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.tests.utilstests": {"tf": 1}, "nnetsauce.tests.utilstests.test_check": {"tf": 1}}, "df": 2}}}}}}}}}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyClassifier.n_jobs": {"tf": 1}, "nnetsauce.LazyRegressor.n_jobs": {"tf": 1}, "nnetsauce.LazyDeepClassifier.n_jobs": {"tf": 1}, "nnetsauce.LazyDeepRegressor.n_jobs": {"tf": 1}, "nnetsauce.RandomBagRegressor.n_jobs": {"tf": 1}, "nnetsauce.RandomBagClassifier.n_jobs": {"tf": 1}, "nnetsauce.SubSampler.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.n_jobs": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.n_jobs": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.n_jobs": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.n_jobs": {"tf": 1}, "nnetsauce.sampling.SubSampler.n_jobs": {"tf": 1}}, "df": 14}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.PredictionInterval.quantile_": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.quantile_": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 3}}}}}}}}}}}}}}}}}}}}, "annotation": {"root": {"docs": {}, "df": 0}}, "default_value": {"root": {"docs": {}, "df": 0}}, "signature": {"root": {"0": {"0": {"1": {"docs": {"nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "1": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 53}, "5": {"docs": {"nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.utils.Progbar.__init__": {"tf": 1}}, "df": 5}, "6": {"docs": {"nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 1}, "docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 2.23606797749979}, "nnetsauce.Base.__init__": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 2}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 2.449489742783178}, "nnetsauce.CustomClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.__init__": {"tf": 2.449489742783178}, "nnetsauce.GLMRegressor.__init__": {"tf": 2.449489742783178}, "nnetsauce.LazyClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.MTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer.__init__": {"tf": 2.23606797749979}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 2}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 2}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 2}, "nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 2.23606797749979}, "nnetsauce.custom.Custom.__init__": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 2.449489742783178}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 2}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 2}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 2.449489742783178}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}, "nnetsauce.utils.Progbar.__init__": {"tf": 1}}, "df": 56}, "1": {"0": {"0": {"docs": {"nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}, "nnetsauce.simulation.generate_hammersley": {"tf": 1}}, "df": 3}, "docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.simulation.generate_sobol": {"tf": 1}, "nnetsauce.simulation.generate_uniform": {"tf": 1}, "nnetsauce.simulation.generate_halton": {"tf": 1}}, "df": 9}, "2": {"3": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}, "nnetsauce.simulation.generate_uniform": {"tf": 1}}, "df": 56}, "docs": {}, "df": 0}, "docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 2.23606797749979}, "nnetsauce.Base.__init__": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer.__init__": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 2}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 2}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.__init__": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 2.23606797749979}, "nnetsauce.custom.Custom.__init__": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.utils.Progbar.__init__": {"tf": 1}}, "df": 50, "e": {"docs": {"nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 1}}, "2": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.simulation.generate_sobol": {"tf": 1}, "nnetsauce.simulation.generate_uniform": {"tf": 1}, "nnetsauce.simulation.generate_hammersley": {"tf": 1}, "nnetsauce.simulation.generate_halton": {"tf": 1}}, "df": 53}, "3": {"0": {"docs": {"nnetsauce.utils.Progbar.__init__": {"tf": 1}}, "df": 1}, "9": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 4}, "nnetsauce.Base.__init__": {"tf": 3.7416573867739413}, "nnetsauce.BaseRegressor.__init__": {"tf": 3.7416573867739413}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 3.7416573867739413}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 3.7416573867739413}, "nnetsauce.CustomClassifier.__init__": {"tf": 3.7416573867739413}, "nnetsauce.CustomRegressor.__init__": {"tf": 3.7416573867739413}, "nnetsauce.DeepClassifier.__init__": {"tf": 3.7416573867739413}, "nnetsauce.DeepRegressor.__init__": {"tf": 3.7416573867739413}, "nnetsauce.DeepMTS.__init__": {"tf": 4.242640687119285}, "nnetsauce.Downloader.download": {"tf": 2.449489742783178}, "nnetsauce.GLMClassifier.__init__": {"tf": 3.7416573867739413}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.__init__": {"tf": 3.7416573867739413}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.__init__": {"tf": 4.242640687119285}, "nnetsauce.LazyRegressor.__init__": {"tf": 4}, "nnetsauce.LazyMTS.__init__": {"tf": 4.47213595499958}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 4.242640687119285}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 4}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 4.47213595499958}, "nnetsauce.MTS.__init__": {"tf": 4.242640687119285}, "nnetsauce.MTS.plot": {"tf": 2}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 3.7416573867739413}, "nnetsauce.PredictionInterval.__init__": {"tf": 2.449489742783178}, "nnetsauce.Optimizer.__init__": {"tf": 2.449489742783178}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 3.7416573867739413}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 3.7416573867739413}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 3.7416573867739413}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 4}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 3.7416573867739413}, "nnetsauce.base.Base.__init__": {"tf": 3.7416573867739413}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 3.7416573867739413}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 4}, "nnetsauce.custom.Custom.__init__": {"tf": 3.7416573867739413}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 3.7416573867739413}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 3.7416573867739413}, "nnetsauce.datasets.Downloader.download": {"tf": 2.449489742783178}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 3.7416573867739413}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 3.7416573867739413}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 4.242640687119285}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 3.7416573867739413}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 3.7416573867739413}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 4.242640687119285}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 4}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 4.47213595499958}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 4.242640687119285}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 4}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 4.47213595499958}, "nnetsauce.mts.MTS.__init__": {"tf": 4.242640687119285}, "nnetsauce.mts.MTS.plot": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 3.7416573867739413}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 2.449489742783178}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 2.449489742783178}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 3.7416573867739413}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 3.7416573867739413}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 4}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 3.7416573867739413}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 3.7416573867739413}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 3.7416573867739413}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 3.7416573867739413}, "nnetsauce.utils.beta_hat": {"tf": 1.4142135623730951}, "nnetsauce.utils.inv_penalized_cov": {"tf": 1.4142135623730951}, "nnetsauce.utils.cbind": {"tf": 1.4142135623730951}, "nnetsauce.utils.rbind": {"tf": 1.4142135623730951}, "nnetsauce.utils.crossprod": {"tf": 1.4142135623730951}, "nnetsauce.utils.tcrossprod": {"tf": 1.4142135623730951}}, "df": 69}, "docs": {"nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 13}, "4": {"2": {"docs": {"nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}}, "df": 12}, "docs": {}, "df": 0}, "5": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 51}, "8": {"docs": {"nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}}, "df": 2}, "9": {"5": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.utils.winkler_score": {"tf": 1}}, "df": 7}, "docs": {"nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}}, "df": 2}, "docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 15.165750888103101}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 5.656854249492381}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 4.47213595499958}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 4.47213595499958}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.Base.__init__": {"tf": 13}, "nnetsauce.Base.encode_clusters": {"tf": 5.656854249492381}, "nnetsauce.Base.create_layer": {"tf": 4.69041575982343}, "nnetsauce.Base.cook_training_set": {"tf": 6.324555320336759}, "nnetsauce.Base.cook_test_set": {"tf": 4.47213595499958}, "nnetsauce.Base.score": {"tf": 5.656854249492381}, "nnetsauce.Base.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.BaseRegressor.__init__": {"tf": 13}, "nnetsauce.BaseRegressor.fit": {"tf": 4.898979485566356}, "nnetsauce.BaseRegressor.predict": {"tf": 4.47213595499958}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 13.341664064126334}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 4.898979485566356}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 5.291502622129181}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 13.674794331177344}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 4.898979485566356}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 5.291502622129181}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.CustomClassifier.__init__": {"tf": 13.19090595827292}, "nnetsauce.CustomClassifier.fit": {"tf": 5.656854249492381}, "nnetsauce.CustomClassifier.predict": {"tf": 4.47213595499958}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 4.47213595499958}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.CustomRegressor.__init__": {"tf": 14.177446878757825}, "nnetsauce.CustomRegressor.fit": {"tf": 5.656854249492381}, "nnetsauce.CustomRegressor.predict": {"tf": 6}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.DeepClassifier.__init__": {"tf": 13.856406460551018}, "nnetsauce.DeepClassifier.fit": {"tf": 4.242640687119285}, "nnetsauce.DeepClassifier.predict": {"tf": 3.7416573867739413}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 3.7416573867739413}, "nnetsauce.DeepClassifier.score": {"tf": 5.0990195135927845}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.DeepRegressor.__init__": {"tf": 13.856406460551018}, "nnetsauce.DeepRegressor.fit": {"tf": 4.242640687119285}, "nnetsauce.DeepRegressor.predict": {"tf": 4.47213595499958}, "nnetsauce.DeepRegressor.score": {"tf": 5.0990195135927845}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.DeepMTS.__init__": {"tf": 15.231546211727817}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.DeepMTS.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.Downloader.download": {"tf": 7.14142842854285}, "nnetsauce.GLMClassifier.__init__": {"tf": 14.594519519326424}, "nnetsauce.GLMClassifier.logit_loss": {"tf": 4.69041575982343}, "nnetsauce.GLMClassifier.expit_erf_loss": {"tf": 4.69041575982343}, "nnetsauce.GLMClassifier.loss_func": {"tf": 7.937253933193772}, "nnetsauce.GLMClassifier.fit": {"tf": 4.898979485566356}, "nnetsauce.GLMClassifier.predict": {"tf": 4.47213595499958}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 4.47213595499958}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.GLMRegressor.__init__": {"tf": 14.594519519326424}, "nnetsauce.GLMRegressor.gaussian_loss": {"tf": 4.69041575982343}, "nnetsauce.GLMRegressor.laplace_loss": {"tf": 4.69041575982343}, "nnetsauce.GLMRegressor.poisson_loss": {"tf": 4.69041575982343}, "nnetsauce.GLMRegressor.loss_func": {"tf": 7.615773105863909}, "nnetsauce.GLMRegressor.fit": {"tf": 4.898979485566356}, "nnetsauce.GLMRegressor.predict": {"tf": 4.47213595499958}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyClassifier.__init__": {"tf": 16.217274740226856}, "nnetsauce.LazyClassifier.fit": {"tf": 5.0990195135927845}, "nnetsauce.LazyClassifier.provide_models": {"tf": 5.0990195135927845}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyRegressor.__init__": {"tf": 15.874507866387544}, "nnetsauce.LazyRegressor.fit": {"tf": 5.0990195135927845}, "nnetsauce.LazyRegressor.provide_models": {"tf": 5.0990195135927845}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyMTS.__init__": {"tf": 16.822603841260722}, "nnetsauce.LazyMTS.fit": {"tf": 5.656854249492381}, "nnetsauce.LazyMTS.provide_models": {"tf": 4.242640687119285}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyMTS.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 16.492422502470642}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 5.0990195135927845}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 5.0990195135927845}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 16.15549442140351}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 5.0990195135927845}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 5.0990195135927845}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 17.08800749063506}, "nnetsauce.LazyDeepMTS.fit": {"tf": 5.656854249492381}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 4.242640687119285}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.MTS.__init__": {"tf": 14.933184523068078}, "nnetsauce.MTS.fit": {"tf": 5.291502622129181}, "nnetsauce.MTS.predict": {"tf": 5.656854249492381}, "nnetsauce.MTS.score": {"tf": 6}, "nnetsauce.MTS.plot": {"tf": 6.164414002968976}, "nnetsauce.MTS.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.MTS.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.MTS.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 13.19090595827292}, "nnetsauce.MultitaskClassifier.fit": {"tf": 5.656854249492381}, "nnetsauce.MultitaskClassifier.predict": {"tf": 4.47213595499958}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 4.47213595499958}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.PredictionInterval.__init__": {"tf": 8.831760866327848}, "nnetsauce.PredictionInterval.fit": {"tf": 4.242640687119285}, "nnetsauce.PredictionInterval.predict": {"tf": 4.69041575982343}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.SimpleMultitaskClassifier.__init__": {"tf": 2.8284271247461903}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 5.656854249492381}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 4.47213595499958}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 4.47213595499958}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.Optimizer.__init__": {"tf": 10}, "nnetsauce.Optimizer.fit": {"tf": 5.291502622129181}, "nnetsauce.Optimizer.one_hot_encode": {"tf": 4.242640687119285}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 14.177446878757825}, "nnetsauce.RandomBagRegressor.fit": {"tf": 4.898979485566356}, "nnetsauce.RandomBagRegressor.predict": {"tf": 5.291502622129181}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 14.177446878757825}, "nnetsauce.RandomBagClassifier.fit": {"tf": 4.898979485566356}, "nnetsauce.RandomBagClassifier.predict": {"tf": 5.291502622129181}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 5.291502622129181}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 3.1622776601683795}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 12.649110640673518}, "nnetsauce.Ridge2Regressor.fit": {"tf": 4.898979485566356}, "nnetsauce.Ridge2Regressor.predict": {"tf": 4.47213595499958}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 13.416407864998739}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 4.898979485566356}, "nnetsauce.Ridge2Classifier.fit": {"tf": 4.898979485566356}, "nnetsauce.Ridge2Classifier.predict": {"tf": 4.47213595499958}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 4.47213595499958}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 12.649110640673518}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 4.898979485566356}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 4.47213595499958}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 4.47213595499958}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.SubSampler.__init__": {"tf": 7.3484692283495345}, "nnetsauce.SubSampler.subsample": {"tf": 3.1622776601683795}, "nnetsauce.base.Base.__init__": {"tf": 13}, "nnetsauce.base.Base.encode_clusters": {"tf": 5.656854249492381}, "nnetsauce.base.Base.create_layer": {"tf": 4.69041575982343}, "nnetsauce.base.Base.cook_training_set": {"tf": 6.324555320336759}, "nnetsauce.base.Base.cook_test_set": {"tf": 4.47213595499958}, "nnetsauce.base.Base.score": {"tf": 5.656854249492381}, "nnetsauce.base.Base.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 13}, "nnetsauce.base.BaseRegressor.fit": {"tf": 4.898979485566356}, "nnetsauce.base.BaseRegressor.predict": {"tf": 4.47213595499958}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 15.165750888103101}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 5.656854249492381}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 4.47213595499958}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 4.47213595499958}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.custom.Custom.__init__": {"tf": 13.19090595827292}, "nnetsauce.custom.Custom.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 13.19090595827292}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 5.656854249492381}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 4.47213595499958}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 4.47213595499958}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 14.177446878757825}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 5.656854249492381}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 6}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.datasets.Downloader.download": {"tf": 7.14142842854285}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 13.856406460551018}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 4.242640687119285}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 3.7416573867739413}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 3.7416573867739413}, "nnetsauce.deep.DeepClassifier.score": {"tf": 5.0990195135927845}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 13.856406460551018}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 4.242640687119285}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 4.47213595499958}, "nnetsauce.deep.DeepRegressor.score": {"tf": 5.0990195135927845}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 15.231546211727817}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 14.594519519326424}, "nnetsauce.glm.GLMClassifier.logit_loss": {"tf": 4.69041575982343}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 4.69041575982343}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 7.937253933193772}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 4.898979485566356}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 4.47213595499958}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 4.47213595499958}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 14.594519519326424}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"tf": 4.69041575982343}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"tf": 4.69041575982343}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"tf": 4.69041575982343}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 7.615773105863909}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 4.898979485566356}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 4.47213595499958}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 16.217274740226856}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 5.0990195135927845}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 5.0990195135927845}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 15.874507866387544}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 5.0990195135927845}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 5.0990195135927845}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 16.822603841260722}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 5.656854249492381}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 4.242640687119285}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 16.492422502470642}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 5.0990195135927845}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 5.0990195135927845}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 16.15549442140351}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 5.0990195135927845}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 5.0990195135927845}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 17.08800749063506}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 5.656854249492381}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 4.242640687119285}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.mts.MTS.__init__": {"tf": 14.933184523068078}, "nnetsauce.mts.MTS.fit": {"tf": 5.291502622129181}, "nnetsauce.mts.MTS.predict": {"tf": 5.656854249492381}, "nnetsauce.mts.MTS.score": {"tf": 6}, "nnetsauce.mts.MTS.plot": {"tf": 6.164414002968976}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.mts.MTS.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 13.19090595827292}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 5.656854249492381}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 4.47213595499958}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 4.47213595499958}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.multitask.SimpleMultitaskClassifier.__init__": {"tf": 2.8284271247461903}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 5.656854249492381}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 4.47213595499958}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 4.47213595499958}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 4.242640687119285}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 4.242640687119285}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 4.242640687119285}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 4.242640687119285}, "nnetsauce.nonconformist.RegressorAdapter.__init__": {"tf": 4}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 7.280109889280518}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 5.0990195135927845}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.RegressorNormalizer.__init__": {"tf": 4}, "nnetsauce.nonconformist.RegressorNormalizer.fit": {"tf": 4.242640687119285}, "nnetsauce.nonconformist.RegressorNormalizer.score": {"tf": 4.69041575982343}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.IcpRegressor.__init__": {"tf": 4}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 4.69041575982343}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 10}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 5.291502622129181}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"tf": 4.242640687119285}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 8.831760866327848}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 4.242640687119285}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 4.69041575982343}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 14.177446878757825}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 4.898979485566356}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 5.291502622129181}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 5.291502622129181}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 3.1622776601683795}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 14.177446878757825}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 4.898979485566356}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 5.291502622129181}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 13.416407864998739}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 4.898979485566356}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 4.898979485566356}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 4.47213595499958}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 4.47213595499958}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 12.649110640673518}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 4.898979485566356}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 4.47213595499958}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 12.649110640673518}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 4.898979485566356}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 4.47213595499958}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 4.47213595499958}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 13.341664064126334}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 4.898979485566356}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 5.291502622129181}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 13.674794331177344}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 4.898979485566356}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 5.291502622129181}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 7.3484692283495345}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 3.1622776601683795}, "nnetsauce.simulation.generate_sobol": {"tf": 5.477225575051661}, "nnetsauce.simulation.generate_uniform": {"tf": 5.477225575051661}, "nnetsauce.simulation.generate_hammersley": {"tf": 6.164414002968976}, "nnetsauce.simulation.generate_halton": {"tf": 6.164414002968976}, "nnetsauce.simulation.getsims": {"tf": 3.7416573867739413}, "nnetsauce.simulation.getsims.getsims": {"tf": 3.7416573867739413}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_AdaBoost": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_score": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_base.TestBase.test_base": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_base.TestBase.test_score": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_custom.TestCustom.test_custom": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_custom.TestCustom.test_score": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_download.TestDownload.test_download": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom.test_custom": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_mtask.TestMultitask.test_Multitask": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_mtask.TestMultitask.test_score": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_mts.TestMTS.test_MTS": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_mts.TestMTS.test_get_set": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_mts.TestMTS.test_score": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_RandomBag": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_score": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_ridge.TestRidge.test_Ridge": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_ridge.TestRidge.test_score": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_rvfl": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_score": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_simulation.TestSimul.test_sobol": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_simulation.TestSimul.test_hammersley": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_simulation.TestSimul.test_halton": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_simulation.TestSimul.test_uniform": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit.test_TimeSeriesSplit": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_utils.TestUtils.test_crossprod": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_utils.TestUtils.test_tcrossprod": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_utils.TestUtils.test_cbind": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_utils.TestUtils.test_rbind": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_utils.TestUtils.test_psd_check": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_utils.TestUtils.test_nearestPD": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 3.1622776601683795}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 3.1622776601683795}, "nnetsauce.tests.utilstests.test_check": {"tf": 3.7416573867739413}, "nnetsauce.utils.beta_hat": {"tf": 5.656854249492381}, "nnetsauce.utils.inv_penalized_cov": {"tf": 5.291502622129181}, "nnetsauce.utils.cbind": {"tf": 4.898979485566356}, "nnetsauce.utils.delete_last_columns": {"tf": 4.69041575982343}, "nnetsauce.utils.rbind": {"tf": 4.898979485566356}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 3.1622776601683795}, "nnetsauce.utils.crossprod": {"tf": 5.291502622129181}, "nnetsauce.utils.tcrossprod": {"tf": 5.291502622129181}, "nnetsauce.utils.to_np_array": {"tf": 3.1622776601683795}, "nnetsauce.utils.merge_two_dicts": {"tf": 3.7416573867739413}, "nnetsauce.utils.is_factor": {"tf": 3.1622776601683795}, "nnetsauce.utils.isPD": {"tf": 3.1622776601683795}, "nnetsauce.utils.nearestPD": {"tf": 3.1622776601683795}, "nnetsauce.utils.compute_output_dates": {"tf": 3.7416573867739413}, "nnetsauce.utils.create_lags": {"tf": 4.69041575982343}, "nnetsauce.utils.create_train_inputs": {"tf": 3.7416573867739413}, "nnetsauce.utils.reformat_response": {"tf": 3.7416573867739413}, "nnetsauce.utils.tuple_map": {"tf": 3.7416573867739413}, "nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 4.47213595499958}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 7.810249675906654}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 3.1622776601683795}, "nnetsauce.utils.Progbar.__init__": {"tf": 6.324555320336759}, "nnetsauce.utils.Progbar.update": {"tf": 4.69041575982343}, "nnetsauce.utils.Progbar.add": {"tf": 4.69041575982343}, "nnetsauce.utils.winkler_score": {"tf": 4.69041575982343}}, "df": 416, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.utils.winkler_score": {"tf": 1}}, "df": 38, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 5}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.GLMClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1.7320508075688772}}, "df": 4, "s": {"docs": {"nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}}, "df": 4}}}}}}}}}}, "n": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.Base.__init__": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 2}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 2}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.MTS.__init__": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 2}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 2}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.SubSampler.__init__": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.__init__": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom.__init__": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.__init__": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1.4142135623730951}, "nnetsauce.simulation.generate_sobol": {"tf": 1.4142135623730951}, "nnetsauce.simulation.generate_uniform": {"tf": 1.4142135623730951}, "nnetsauce.simulation.generate_hammersley": {"tf": 1.4142135623730951}, "nnetsauce.simulation.generate_halton": {"tf": 1.4142135623730951}, "nnetsauce.utils.create_lags": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 1}, "nnetsauce.utils.Progbar.add": {"tf": 1}}, "df": 62, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 51}}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 51}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1.7320508075688772}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.__init__": {"tf": 2}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 2}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1.4142135623730951}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.score": {"tf": 1}, "nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.SubSampler.__init__": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.score": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.score": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.__init__": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1.4142135623730951}, "nnetsauce.simulation.generate_sobol": {"tf": 1}, "nnetsauce.simulation.generate_hammersley": {"tf": 1.4142135623730951}, "nnetsauce.simulation.generate_halton": {"tf": 1.4142135623730951}, "nnetsauce.utils.beta_hat": {"tf": 1}, "nnetsauce.utils.inv_penalized_cov": {"tf": 1}, "nnetsauce.utils.crossprod": {"tf": 1}, "nnetsauce.utils.tcrossprod": {"tf": 1}, "nnetsauce.utils.create_lags": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}, "nnetsauce.utils.Progbar.__init__": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1}, "nnetsauce.utils.Progbar.add": {"tf": 1}}, "df": 89}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.__init__": {"tf": 1}}, "df": 2}}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 5}}}}}}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}, "nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 3}}, "c": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.__init__": {"tf": 1}}, "df": 5}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}}, "df": 18}}}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 51}}}}}, "x": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.__init__": {"tf": 1}}, "df": 2}}}, "l": {"docs": {"nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Optimizer.__init__": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1.4142135623730951}}, "df": 4}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.utils.winkler_score": {"tf": 1}}, "df": 7}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.utils.beta_hat": {"tf": 1}, "nnetsauce.utils.inv_penalized_cov": {"tf": 1}}, "df": 2, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"1": {"docs": {"nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}}, "df": 10}, "2": {"docs": {"nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}}, "df": 10}, "docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}}, "df": 2}}}}, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}}, "df": 12}}}}, "g": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}}, "df": 8}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 47}}}, "t": {"docs": {"nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 5}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}}, "df": 6}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {"nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}}, "df": 4}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}}, "df": 12, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1.4142135623730951}}, "df": 2}, "l": {"docs": {}, "df": 0, "u": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 51}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}}, "df": 10}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}}, "df": 12}}}}}}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}}, "df": 45}}}, "h": {"docs": {"nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 51}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}}, "df": 2}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.utils.compute_output_dates": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 51}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 30}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}}, "df": 4}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}}, "df": 4, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.nonconformist.IcpRegressor.__init__": {"tf": 1}}, "df": 1}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.nonconformist.RegressorAdapter.__init__": {"tf": 1}}, "df": 1}, "x": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 1}}}}, "o": {"docs": {}, "df": 0, "o": {"docs": {"nnetsauce.utils.tuple_map": {"tf": 1}}, "df": 1}}}, "a": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 52, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"1": {"docs": {"nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}}, "df": 4}, "2": {"docs": {"nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}}, "df": 4}, "docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}}, "df": 2}}}, "l": {"docs": {"nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}}, "df": 12}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 51}}}}}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.utils.winkler_score": {"tf": 1}}, "df": 1}}}}, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}}, "df": 4}}}}}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}}, "df": 10}}, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1}}, "df": 2}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}, "s": {"1": {"docs": {"nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 2}, "2": {"docs": {"nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 2}, "docs": {"nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 51}, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 4}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 4}}}}}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 51}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}}, "df": 4}}, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}}, "df": 2}}}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 51}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.Base.score": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.MTS.score": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.mts.MTS.score": {"tf": 1}}, "df": 8}}}}}}, "t": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.Base.__init__": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 2}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 2}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.MTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.__init__": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom.__init__": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}}, "df": 55}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}}, "df": 12, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.utils.Progbar.__init__": {"tf": 1}}, "df": 1}}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}}, "df": 41, "s": {"docs": {"nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}, "nnetsauce.simulation.generate_sobol": {"tf": 1}, "nnetsauce.simulation.generate_uniform": {"tf": 1}, "nnetsauce.simulation.generate_hammersley": {"tf": 1}, "nnetsauce.simulation.generate_halton": {"tf": 1}}, "df": 59}}, "l": {"docs": {}, "df": 0, "f": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.fit": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.score": {"tf": 1}, "nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SubSampler.subsample": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.glm.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.score": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.score": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_AdaBoost": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_score": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase.test_base": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase.test_score": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom.test_custom": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom.test_score": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload.test_download": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom.test_custom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_Multitask": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask.test_score": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_MTS": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS.test_score": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_RandomBag": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_score": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge.test_Ridge": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge.test_score": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_rvfl": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_score": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_sobol": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_hammersley": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_halton": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul.test_uniform": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit.test_TimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_crossprod": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_tcrossprod": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_cbind": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_rbind": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_psd_check": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_nearestPD": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1}, "nnetsauce.utils.Progbar.add": {"tf": 1}}, "df": 212}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1}}, "df": 2}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}}, "df": 8}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}}, "df": 2}}}}}}}}}, "s": {"docs": {"nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}}, "df": 2}}}, "b": {"docs": {"nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.utils.isPD": {"tf": 1}}, "df": 3, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 51}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.utils.beta_hat": {"tf": 1}, "nnetsauce.utils.inv_penalized_cov": {"tf": 1}, "nnetsauce.utils.cbind": {"tf": 1}, "nnetsauce.utils.rbind": {"tf": 1}, "nnetsauce.utils.crossprod": {"tf": 1}, "nnetsauce.utils.tcrossprod": {"tf": 1}}, "df": 53}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.nonconformist.RegressorNormalizer.__init__": {"tf": 1}}, "df": 1}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 5}}}, "y": {"docs": {"nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}}, "df": 4}, "f": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}}, "df": 2}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.Base.__init__": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 2}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 2}, "nnetsauce.CustomClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS.__init__": {"tf": 2}, "nnetsauce.GLMClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.__init__": {"tf": 2}, "nnetsauce.LazyRegressor.__init__": {"tf": 2}, "nnetsauce.LazyMTS.__init__": {"tf": 2}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 2}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 2}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 2}, "nnetsauce.MTS.__init__": {"tf": 2}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.__init__": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.__init__": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 2}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 2}, "nnetsauce.mts.MTS.__init__": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 2}}, "df": 51}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 1}}, "df": 25, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.MTS.score": {"tf": 1}, "nnetsauce.mts.MTS.score": {"tf": 1}}, "df": 2}}}}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.Base.__init__": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.MTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.MTS.plot": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.__init__": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.__init__": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.plot": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1.4142135623730951}}, "df": 61}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}}, "df": 24, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.MTS.score": {"tf": 1}, "nnetsauce.mts.MTS.score": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}}, "df": 2}}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.utils.Progbar.__init__": {"tf": 1}}, "df": 1}}}}}}, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 51}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 47}}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.simulation.generate_sobol": {"tf": 1}, "nnetsauce.simulation.generate_uniform": {"tf": 1}, "nnetsauce.simulation.generate_hammersley": {"tf": 1}, "nnetsauce.simulation.generate_halton": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.simulation.getsims": {"tf": 1}, "nnetsauce.simulation.getsims.getsims": {"tf": 1}}, "df": 2, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "v": {"docs": {"nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}}, "df": 2}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}}, "df": 2}}}}, "f": {"docs": {"nnetsauce.utils.convert_df_to_numeric": {"tf": 1}, "nnetsauce.utils.compute_output_dates": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 51, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 51, "s": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 51}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}}, "df": 29, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 1}}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.nonconformist.IcpRegressor.__init__": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.utils.beta_hat": {"tf": 1}, "nnetsauce.utils.inv_penalized_cov": {"tf": 1}, "nnetsauce.utils.cbind": {"tf": 1}, "nnetsauce.utils.rbind": {"tf": 1}, "nnetsauce.utils.crossprod": {"tf": 1}, "nnetsauce.utils.tcrossprod": {"tf": 1}}, "df": 53}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}}, "df": 12}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 1}}}}}}}, "k": {"docs": {"nnetsauce.utils.create_lags": {"tf": 1}, "nnetsauce.utils.create_train_inputs": {"tf": 1}, "nnetsauce.utils.reformat_response": {"tf": 1}}, "df": 3, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.Base.__init__": {"tf": 1}, "nnetsauce.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1}, "nnetsauce.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.base.Base.__init__": {"tf": 1}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.Custom.__init__": {"tf": 1}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1}}, "df": 51}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.score": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.score": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}}, "df": 106}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}}, "df": 12}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}}, "df": 8}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}, "nnetsauce.utils.Progbar.__init__": {"tf": 1}}, "df": 31}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.utils.Progbar.update": {"tf": 1}, "nnetsauce.utils.Progbar.add": {"tf": 1}}, "df": 2}}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}}, "df": 8}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}}, "df": 12, "s": {"docs": {"nnetsauce.utils.Progbar.__init__": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}}, "df": 10}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}}, "df": 4}}, "x": {"docs": {"nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 1}}, "df": 1}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}}, "df": 2}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.nonconformist.RegressorAdapter.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.__init__": {"tf": 1.4142135623730951}}, "df": 3}}}}}, "x": {"0": {"docs": {"nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}}, "df": 2}, "docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.score": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.score": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.score": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.tests.utilstests.test_check": {"tf": 1}, "nnetsauce.utils.beta_hat": {"tf": 1}, "nnetsauce.utils.inv_penalized_cov": {"tf": 1}, "nnetsauce.utils.cbind": {"tf": 1}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.rbind": {"tf": 1}, "nnetsauce.utils.crossprod": {"tf": 1}, "nnetsauce.utils.tcrossprod": {"tf": 1}, "nnetsauce.utils.to_np_array": {"tf": 1}, "nnetsauce.utils.merge_two_dicts": {"tf": 1}, "nnetsauce.utils.create_lags": {"tf": 1}, "nnetsauce.utils.create_train_inputs": {"tf": 1}, "nnetsauce.utils.reformat_response": {"tf": 1}, "nnetsauce.utils.tuple_map": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 157, "b": {"docs": {"nnetsauce.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"tf": 1}}, "df": 10}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1}}, "df": 6}}}}, "y": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.glm.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.score": {"tf": 1}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}, "nnetsauce.tests.utilstests.test_check": {"tf": 1}, "nnetsauce.utils.beta_hat": {"tf": 1}, "nnetsauce.utils.cbind": {"tf": 1}, "nnetsauce.utils.rbind": {"tf": 1}, "nnetsauce.utils.crossprod": {"tf": 1}, "nnetsauce.utils.tcrossprod": {"tf": 1}, "nnetsauce.utils.merge_two_dicts": {"tf": 1}, "nnetsauce.utils.is_factor": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 93}, "w": {"docs": {"nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}}, "df": 10, "s": {"docs": {"nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}}, "df": 6}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}}, "df": 12}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.utils.Progbar.__init__": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}}}}}, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}}, "df": 2}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}}, "df": 12}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}}, "df": 12}}}}}}}}, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}}, "df": 8}}}}}, "p": {"docs": {"nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.simulation.generate_hammersley": {"tf": 1}, "nnetsauce.simulation.generate_halton": {"tf": 1}}, "df": 2}}}}}, "i": {"docs": {"nnetsauce.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.DeepMTS.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.MTS.__init__": {"tf": 1}, "nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.__init__": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 16}, "k": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}}, "df": 2}}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.nonconformist.RegressorAdapter.__init__": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.simulation.generate_sobol": {"tf": 1}, "nnetsauce.simulation.generate_uniform": {"tf": 1}, "nnetsauce.simulation.generate_hammersley": {"tf": 1}, "nnetsauce.simulation.generate_halton": {"tf": 1}}, "df": 4}}}}}}, "g": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1}}, "df": 5}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {"nnetsauce.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}}, "df": 4, "s": {"docs": {"nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1}}, "df": 4}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {"nnetsauce.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1.4142135623730951}, "nnetsauce.MTS.score": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.logit_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 1}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"tf": 1}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.score": {"tf": 1.4142135623730951}}, "df": 16}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.simulation.getsims": {"tf": 1}, "nnetsauce.simulation.getsims.getsims": {"tf": 1}}, "df": 2}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 1}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.utils.Progbar.__init__": {"tf": 1}}, "df": 1}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyMTS.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1}}, "df": 12}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Optimizer.__init__": {"tf": 1}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1}}, "df": 2}}}}, "x": {"docs": {"nnetsauce.simulation.getsims": {"tf": 1}, "nnetsauce.simulation.getsims.getsims": {"tf": 1}}, "df": 2}}, "j": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.SubSampler.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1}}, "df": 14}}}}}}, "bases": {"root": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 57}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 6}}}}}}}}}}}}, "c": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 4}}, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 2}, "nnetsauce.BayesianRVFLRegressor": {"tf": 2}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 2}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier": {"tf": 2}, "nnetsauce.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 2}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 2}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 2}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 2}}, "df": 51, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Base": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 4}}}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}}, "df": 1}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 1}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "p": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 4}}}, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit": {"tf": 1}}, "df": 47}}}}}}, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.utils.TimeSeriesSplit": {"tf": 1}}, "df": 1}}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.utils.TimeSeriesSplit": {"tf": 1}}, "df": 1}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 22}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.7320508075688772}}, "df": 16, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.DeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.DeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 23}}}}}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"2": {"docs": {"nnetsauce.Ridge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.7320508075688772}}, "df": 6}, "docs": {}, "df": 0}}}}}, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.7320508075688772}}, "df": 6}}, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.utils.TimeSeriesSplit": {"tf": 1}}, "df": 1}}}}}, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor": {"tf": 1.7320508075688772}}, "df": 4}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "p": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.utils.TimeSeriesSplit": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}}, "doc": {"root": {"0": {"1": {"1": {"2": {"6": {"3": {"4": {"3": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"nnetsauce.DeepMTS": {"tf": 3.1622776601683795}, "nnetsauce.MTS": {"tf": 3.1622776601683795}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 3.1622776601683795}, "nnetsauce.mts.MTS": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 10}, "2": {"docs": {"nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}}, "df": 2}, "3": {"6": {"2": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.6457513110645907}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 2.449489742783178}, "nnetsauce.RandomBagClassifier": {"tf": 2.449489742783178}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.6457513110645907}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 2.8284271247461903}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 2.8284271247461903}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.449489742783178}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2.449489742783178}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 64}, "1": {"0": {"0": {"docs": {"nnetsauce.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.MTS": {"tf": 2.23606797749979}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.mts.MTS": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}}, "df": 6}, "1": {"6": {"docs": {}, "df": 0, "/": {"0": {"0": {"2": {"4": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {"nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 11}, "1": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 3}, "2": {"3": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier": {"tf": 2}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 2}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 30}, "docs": {}, "df": 0}, "3": {"docs": {"nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 4}, "4": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}, "5": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}, "6": {"0": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}}, "df": 113}, "docs": {"nnetsauce.tests.tests_model_selection": {"tf": 1}}, "df": 1, ":": {"3": {"7": {"docs": {}, "df": 0, ":": {"4": {"2": {"docs": {"nnetsauce.tests.tests_model_selection": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "7": {"3": {"9": {"2": {"7": {"8": {"1": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "+": {"0": {"2": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "9": {"8": {"8": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 2.6457513110645907}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 2.6457513110645907}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 2}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 2}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.utils.nearestPD": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 138}, "2": {"0": {"0": {"1": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}, "2": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}, "3": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}, "4": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}, "5": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}, "docs": {}, "df": 0}, "1": {"9": {"docs": {"nnetsauce.tests.tests_model_selection": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "2": {"4": {"0": {"1": {"0": {"5": {"docs": {"nnetsauce.SubSampler.subsample": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}}, "df": 2}, "6": {"docs": {"nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "3": {"1": {"docs": {"nnetsauce.SubSampler.subsample": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}, "2": {"3": {"3": {"8": {"8": {"6": {"7": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "4": {"0": {"2": {"3": {"4": {"3": {"8": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "+": {"0": {"1": {"docs": {"nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "5": {"0": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}}, "df": 2}, "docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}, "7": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}, "9": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}, "docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 2.449489742783178}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 2.449489742783178}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 2.6457513110645907}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 2.6457513110645907}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 2}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.nearestPD": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 156}, "3": {"0": {"2": {"6": {"3": {"6": {"7": {"2": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "+": {"0": {"3": {"docs": {"nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}, "1": {"0": {"5": {"4": {"6": {"8": {"7": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 2}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}, "3": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}, "4": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}, "5": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}, "6": {"2": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}, "docs": {}, "df": 0}, "7": {"9": {"5": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "8": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}, "9": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2}, "nnetsauce.CustomClassifier": {"tf": 2.8284271247461903}, "nnetsauce.DeepMTS": {"tf": 4.47213595499958}, "nnetsauce.MTS": {"tf": 4.47213595499958}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2}, "nnetsauce.custom.CustomClassifier": {"tf": 2.8284271247461903}, "nnetsauce.deep.DeepMTS": {"tf": 4.47213595499958}, "nnetsauce.mts.MTS": {"tf": 4.47213595499958}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}}, "df": 10}, "docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 2.449489742783178}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 2.449489742783178}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 2}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 161, "d": {"docs": {"nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 2}}, "4": {"2": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 12}, "docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 8}, "5": {"0": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 2}, "docs": {"nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.MTS": {"tf": 2.6457513110645907}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.mts.MTS": {"tf": 2.6457513110645907}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 11}, "6": {"2": {"8": {"1": {"7": {"3": {"8": {"3": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "3": {"0": {"7": {"8": {"6": {"1": {"3": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 8}, "7": {"1": {"4": {"8": {"4": {"3": {"7": {"5": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "+": {"0": {"0": {"docs": {"nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "2": {"6": {"8": {"4": {"3": {"2": {"6": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 4}, "8": {"0": {"docs": {"nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}}, "df": 4}, "3": {"7": {"3": {"0": {"4": {"6": {"9": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "+": {"0": {"1": {"docs": {"nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "6": {"1": {"7": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}}, "df": 113}, "docs": {}, "df": 0}, "4": {"2": {"9": {"4": {"4": {"3": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "8": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}, "docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}, "9": {"0": {"1": {"8": {"5": {"5": {"7": {"8": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "+": {"0": {"4": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "2": {"2": {"3": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}}, "df": 4}, "5": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 12}, "9": {"docs": {"nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}}, "df": 2}, "docs": {"nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 8}, "docs": {"nnetsauce": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier": {"tf": 23.916521486202797}, "nnetsauce.AdaBoostClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.verbose": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.method": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.reg_lambda": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.reg_alpha": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.alpha_": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.base_learners_": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 4.242640687119285}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 4.123105625617661}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 9}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 9}, "nnetsauce.Base": {"tf": 3.605551275463989}, "nnetsauce.Base.__init__": {"tf": 1.7320508075688772}, "nnetsauce.Base.n_hidden_features": {"tf": 1.7320508075688772}, "nnetsauce.Base.activation_name": {"tf": 1.7320508075688772}, "nnetsauce.Base.a": {"tf": 1.7320508075688772}, "nnetsauce.Base.nodes_sim": {"tf": 1.7320508075688772}, "nnetsauce.Base.bias": {"tf": 1.7320508075688772}, "nnetsauce.Base.seed": {"tf": 1.7320508075688772}, "nnetsauce.Base.backend": {"tf": 1.7320508075688772}, "nnetsauce.Base.dropout": {"tf": 1.7320508075688772}, "nnetsauce.Base.direct_link": {"tf": 1.7320508075688772}, "nnetsauce.Base.cluster_encode": {"tf": 1.7320508075688772}, "nnetsauce.Base.type_clust": {"tf": 1.7320508075688772}, "nnetsauce.Base.type_scaling": {"tf": 1.7320508075688772}, "nnetsauce.Base.col_sample": {"tf": 1.7320508075688772}, "nnetsauce.Base.row_sample": {"tf": 1.7320508075688772}, "nnetsauce.Base.n_clusters": {"tf": 1.7320508075688772}, "nnetsauce.Base.subsampler_": {"tf": 1.7320508075688772}, "nnetsauce.Base.index_col_": {"tf": 1.7320508075688772}, "nnetsauce.Base.index_row_": {"tf": 1.7320508075688772}, "nnetsauce.Base.clustering_obj_": {"tf": 1.7320508075688772}, "nnetsauce.Base.clustering_scaler_": {"tf": 1.7320508075688772}, "nnetsauce.Base.nn_scaler_": {"tf": 1.7320508075688772}, "nnetsauce.Base.scaler_": {"tf": 1.7320508075688772}, "nnetsauce.Base.encoder_": {"tf": 1.7320508075688772}, "nnetsauce.Base.W_": {"tf": 1.7320508075688772}, "nnetsauce.Base.X_": {"tf": 1.7320508075688772}, "nnetsauce.Base.y_": {"tf": 1.7320508075688772}, "nnetsauce.Base.y_mean_": {"tf": 1.7320508075688772}, "nnetsauce.Base.beta_": {"tf": 1.7320508075688772}, "nnetsauce.Base.activation_func": {"tf": 1.7320508075688772}, "nnetsauce.Base.encode_clusters": {"tf": 4}, "nnetsauce.Base.create_layer": {"tf": 4.123105625617661}, "nnetsauce.Base.cook_training_set": {"tf": 4.47213595499958}, "nnetsauce.Base.cook_test_set": {"tf": 4.242640687119285}, "nnetsauce.Base.score": {"tf": 3.7416573867739413}, "nnetsauce.Base.set_score_request": {"tf": 9}, "nnetsauce.BaseRegressor": {"tf": 4.242640687119285}, "nnetsauce.BaseRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor.fit": {"tf": 4.123105625617661}, "nnetsauce.BaseRegressor.predict": {"tf": 4.123105625617661}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 9}, "nnetsauce.BayesianRVFLRegressor": {"tf": 5.916079783099616}, "nnetsauce.BayesianRVFLRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.s": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.sigma": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.beta_": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.Sigma_": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.GCV_": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.return_std": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 4.123105625617661}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 4.123105625617661}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 9}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 9}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 5.916079783099616}, "nnetsauce.BayesianRVFL2Regressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.s1": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.s2": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.sigma": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.beta_": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.Sigma_": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.GCV_": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.return_std": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 4.123105625617661}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 4.123105625617661}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 9}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 9}, "nnetsauce.CustomClassifier": {"tf": 23.706539182259394}, "nnetsauce.CustomClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.fit": {"tf": 4.123105625617661}, "nnetsauce.CustomClassifier.predict": {"tf": 4.123105625617661}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 9}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 9}, "nnetsauce.CustomRegressor": {"tf": 4.58257569495584}, "nnetsauce.CustomRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.type_pi": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.replications": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.kernel": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.fit": {"tf": 4.123105625617661}, "nnetsauce.CustomRegressor.predict": {"tf": 4.242640687119285}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 9}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 9}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 9}, "nnetsauce.DeepClassifier": {"tf": 14.866068747318506}, "nnetsauce.DeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.stacked_obj": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.verbose": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.n_layers": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.fit": {"tf": 3.7416573867739413}, "nnetsauce.DeepClassifier.predict": {"tf": 4.123105625617661}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.DeepClassifier.score": {"tf": 3.7416573867739413}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 9}, "nnetsauce.DeepRegressor": {"tf": 14.866068747318506}, "nnetsauce.DeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.stacked_obj": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.verbose": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.n_layers": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.fit": {"tf": 3.7416573867739413}, "nnetsauce.DeepRegressor.predict": {"tf": 4.242640687119285}, "nnetsauce.DeepRegressor.score": {"tf": 3.7416573867739413}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 9}, "nnetsauce.DeepMTS": {"tf": 26.60826939130014}, "nnetsauce.DeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS.n_layers": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS.obj": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 9}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 9}, "nnetsauce.DeepMTS.set_score_request": {"tf": 9}, "nnetsauce.Downloader": {"tf": 1.7320508075688772}, "nnetsauce.Downloader.pkgname": {"tf": 1.7320508075688772}, "nnetsauce.Downloader.dataset": {"tf": 1.7320508075688772}, "nnetsauce.Downloader.source": {"tf": 1.7320508075688772}, "nnetsauce.Downloader.url": {"tf": 1.7320508075688772}, "nnetsauce.Downloader.request": {"tf": 1.7320508075688772}, "nnetsauce.Downloader.download": {"tf": 8.660254037844387}, "nnetsauce.GLMClassifier": {"tf": 4.898979485566356}, "nnetsauce.GLMClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.family": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.logit_loss": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.expit_erf_loss": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.loss_func": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.fit": {"tf": 4.123105625617661}, "nnetsauce.GLMClassifier.predict": {"tf": 4.123105625617661}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 9}, "nnetsauce.GLMRegressor": {"tf": 4.898979485566356}, "nnetsauce.GLMRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.family": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.gaussian_loss": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.laplace_loss": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.poisson_loss": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.loss_func": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.fit": {"tf": 4.123105625617661}, "nnetsauce.GLMRegressor.predict": {"tf": 4.123105625617661}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 9}, "nnetsauce.LazyClassifier": {"tf": 15.684387141358123}, "nnetsauce.LazyClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.verbose": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.ignore_warnings": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.custom_metric": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.predictions": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.sort_by": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.models": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.random_state": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.estimators": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.preprocess": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.n_jobs": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.fit": {"tf": 4.123105625617661}, "nnetsauce.LazyClassifier.provide_models": {"tf": 4.898979485566356}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 9}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 9}, "nnetsauce.LazyRegressor": {"tf": 15.684387141358123}, "nnetsauce.LazyRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.verbose": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.ignore_warnings": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.custom_metric": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.predictions": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.models": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.random_state": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.estimators": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.preprocess": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.n_jobs": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.fit": {"tf": 4.898979485566356}, "nnetsauce.LazyRegressor.provide_models": {"tf": 4.123105625617661}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 9}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 9}, "nnetsauce.LazyMTS": {"tf": 4.242640687119285}, "nnetsauce.LazyMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.verbose": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.ignore_warnings": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.custom_metric": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.predictions": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.models": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.random_state": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.estimators": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.preprocess": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.fit": {"tf": 4.123105625617661}, "nnetsauce.LazyMTS.provide_models": {"tf": 4.358898943540674}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 9}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 9}, "nnetsauce.LazyMTS.set_score_request": {"tf": 9}, "nnetsauce.LazyDeepClassifier": {"tf": 15.968719422671311}, "nnetsauce.LazyDeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.verbose": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.ignore_warnings": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.custom_metric": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.predictions": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.sort_by": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.models": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.random_state": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.estimators": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.preprocess": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.n_layers": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.n_jobs": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 4.123105625617661}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 4.898979485566356}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 9}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 9}, "nnetsauce.LazyDeepRegressor": {"tf": 4.358898943540674}, "nnetsauce.LazyDeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.verbose": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.ignore_warnings": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.custom_metric": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.predictions": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.models": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.random_state": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.estimators": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.preprocess": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.n_layers": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.n_jobs": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 4.795831523312719}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 4.58257569495584}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 9}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 9}, "nnetsauce.LazyDeepMTS": {"tf": 4.242640687119285}, "nnetsauce.LazyDeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.verbose": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.ignore_warnings": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.custom_metric": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.predictions": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.models": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.random_state": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.estimators": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.preprocess": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.n_layers": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.fit": {"tf": 4.58257569495584}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 4.358898943540674}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 9}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 9}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 9}, "nnetsauce.MTS": {"tf": 26.43860813280457}, "nnetsauce.MTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.MTS.obj": {"tf": 1.7320508075688772}, "nnetsauce.MTS.n_series": {"tf": 1.7320508075688772}, "nnetsauce.MTS.lags": {"tf": 1.7320508075688772}, "nnetsauce.MTS.type_pi": {"tf": 1.7320508075688772}, "nnetsauce.MTS.replications": {"tf": 1.7320508075688772}, "nnetsauce.MTS.kernel": {"tf": 1.7320508075688772}, "nnetsauce.MTS.agg": {"tf": 1.7320508075688772}, "nnetsauce.MTS.verbose": {"tf": 1.7320508075688772}, "nnetsauce.MTS.show_progress": {"tf": 1.7320508075688772}, "nnetsauce.MTS.series_names": {"tf": 1.7320508075688772}, "nnetsauce.MTS.input_dates": {"tf": 1.7320508075688772}, "nnetsauce.MTS.fit_objs_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.y_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.X_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.xreg_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.y_means_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.mean_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.upper_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.lower_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.output_dates_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.preds_std_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.alpha_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.return_std_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.df_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.residuals_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.residuals_sims_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.kde_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.sims_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.residuals_std_dev_": {"tf": 1.7320508075688772}, "nnetsauce.MTS.n_obs": {"tf": 1.7320508075688772}, "nnetsauce.MTS.level": {"tf": 1.7320508075688772}, "nnetsauce.MTS.fit": {"tf": 4}, "nnetsauce.MTS.predict": {"tf": 4}, "nnetsauce.MTS.score": {"tf": 1.7320508075688772}, "nnetsauce.MTS.plot": {"tf": 3}, "nnetsauce.MTS.set_fit_request": {"tf": 9}, "nnetsauce.MTS.set_predict_request": {"tf": 9}, "nnetsauce.MTS.set_score_request": {"tf": 9}, "nnetsauce.MultitaskClassifier": {"tf": 21.18962010041709}, "nnetsauce.MultitaskClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.obj": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.fit_objs_": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.fit": {"tf": 4.123105625617661}, "nnetsauce.MultitaskClassifier.predict": {"tf": 4.123105625617661}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 9}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 9}, "nnetsauce.PredictionInterval": {"tf": 3.3166247903554}, "nnetsauce.PredictionInterval.__init__": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.obj": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.method": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.level": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.type_pi": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.replications": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.kernel": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.agg": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.seed": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.alpha_": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.quantile_": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.icp_": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.calibrated_residuals_": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.kde_": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.fit": {"tf": 3.605551275463989}, "nnetsauce.PredictionInterval.predict": {"tf": 3.1622776601683795}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 9}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 9}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 20.396078054371138}, "nnetsauce.SimpleMultitaskClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.obj": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.fit_objs_": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.X_scaler_": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.scaled_X_": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 4.123105625617661}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 4.123105625617661}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 9}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 9}, "nnetsauce.Optimizer": {"tf": 3.3166247903554}, "nnetsauce.Optimizer.__init__": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.type_optim": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.num_iters": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.learning_rate": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.batch_prop": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.learning_method": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.randomization": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.mass": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.decay": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.tolerance": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.verbose": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.opt": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.fit": {"tf": 4.123105625617661}, "nnetsauce.Optimizer.one_hot_encode": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor": {"tf": 18.083141320025124}, "nnetsauce.RandomBagRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.verbose": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.n_jobs": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.voter_": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.fit": {"tf": 4.123105625617661}, "nnetsauce.RandomBagRegressor.predict": {"tf": 4.123105625617661}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 9}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 9}, "nnetsauce.RandomBagClassifier": {"tf": 22.40535650240808}, "nnetsauce.RandomBagClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.verbose": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.n_jobs": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.voter_": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.fit": {"tf": 4.123105625617661}, "nnetsauce.RandomBagClassifier.predict": {"tf": 4.123105625617661}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 9}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 9}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 9}, "nnetsauce.Ridge2Regressor": {"tf": 4.242640687119285}, "nnetsauce.Ridge2Regressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor.fit": {"tf": 4.123105625617661}, "nnetsauce.Ridge2Regressor.predict": {"tf": 4.123105625617661}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 9}, "nnetsauce.Ridge2Classifier": {"tf": 20.663978319771825}, "nnetsauce.Ridge2Classifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.solver": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.beta_": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.classes_": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.minloglik_": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 3.4641016151377544}, "nnetsauce.Ridge2Classifier.fit": {"tf": 4.47213595499958}, "nnetsauce.Ridge2Classifier.predict": {"tf": 4.123105625617661}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 9}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 21.142374511865974}, "nnetsauce.Ridge2MultitaskClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 4.123105625617661}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 4.123105625617661}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 9}, "nnetsauce.SubSampler": {"tf": 4.358898943540674}, "nnetsauce.SubSampler.__init__": {"tf": 1.7320508075688772}, "nnetsauce.SubSampler.y": {"tf": 1.7320508075688772}, "nnetsauce.SubSampler.n_samples": {"tf": 1.7320508075688772}, "nnetsauce.SubSampler.seed": {"tf": 1.7320508075688772}, "nnetsauce.SubSampler.indices": {"tf": 1.7320508075688772}, "nnetsauce.SubSampler.n_jobs": {"tf": 1.7320508075688772}, "nnetsauce.SubSampler.verbose": {"tf": 1.7320508075688772}, "nnetsauce.SubSampler.subsample": {"tf": 4.58257569495584}, "nnetsauce.base": {"tf": 1.7320508075688772}, "nnetsauce.base.Base": {"tf": 3.605551275463989}, "nnetsauce.base.Base.__init__": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.n_hidden_features": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.activation_name": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.a": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.nodes_sim": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.bias": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.seed": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.backend": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.dropout": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.direct_link": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.cluster_encode": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.type_clust": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.type_scaling": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.col_sample": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.row_sample": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.n_clusters": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.subsampler_": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.index_col_": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.index_row_": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.clustering_obj_": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.clustering_scaler_": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.nn_scaler_": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.scaler_": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.encoder_": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.W_": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.X_": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.y_": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.y_mean_": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.beta_": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.activation_func": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.encode_clusters": {"tf": 4}, "nnetsauce.base.Base.create_layer": {"tf": 4.123105625617661}, "nnetsauce.base.Base.cook_training_set": {"tf": 4.47213595499958}, "nnetsauce.base.Base.cook_test_set": {"tf": 4.242640687119285}, "nnetsauce.base.Base.score": {"tf": 3.7416573867739413}, "nnetsauce.base.Base.set_score_request": {"tf": 9}, "nnetsauce.base.BaseRegressor": {"tf": 4.242640687119285}, "nnetsauce.base.BaseRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor.fit": {"tf": 4.123105625617661}, "nnetsauce.base.BaseRegressor.predict": {"tf": 4.123105625617661}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 9}, "nnetsauce.boosting": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 23.916521486202797}, "nnetsauce.boosting.AdaBoostClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.verbose": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.method": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.reg_lambda": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.reg_alpha": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.alpha_": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.base_learners_": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 4.242640687119285}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 4.123105625617661}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 9}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 9}, "nnetsauce.custom": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom": {"tf": 3.4641016151377544}, "nnetsauce.custom.Custom.__init__": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom.obj": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom.set_score_request": {"tf": 9}, "nnetsauce.custom.CustomClassifier": {"tf": 23.706539182259394}, "nnetsauce.custom.CustomClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 4.123105625617661}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 4.123105625617661}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 9}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 9}, "nnetsauce.custom.CustomRegressor": {"tf": 4.58257569495584}, "nnetsauce.custom.CustomRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.type_pi": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.replications": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.kernel": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 4.123105625617661}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 4.242640687119285}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 9}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 9}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 9}, "nnetsauce.datasets": {"tf": 1.7320508075688772}, "nnetsauce.datasets.Downloader": {"tf": 1.7320508075688772}, "nnetsauce.datasets.Downloader.pkgname": {"tf": 1.7320508075688772}, "nnetsauce.datasets.Downloader.dataset": {"tf": 1.7320508075688772}, "nnetsauce.datasets.Downloader.source": {"tf": 1.7320508075688772}, "nnetsauce.datasets.Downloader.url": {"tf": 1.7320508075688772}, "nnetsauce.datasets.Downloader.request": {"tf": 1.7320508075688772}, "nnetsauce.datasets.Downloader.download": {"tf": 8.660254037844387}, "nnetsauce.deep": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier": {"tf": 14.866068747318506}, "nnetsauce.deep.DeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.stacked_obj": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.verbose": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.n_layers": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 3.7416573867739413}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 4.123105625617661}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.deep.DeepClassifier.score": {"tf": 3.7416573867739413}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 9}, "nnetsauce.deep.DeepRegressor": {"tf": 14.866068747318506}, "nnetsauce.deep.DeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.stacked_obj": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.verbose": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.n_layers": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 3.7416573867739413}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 4.242640687119285}, "nnetsauce.deep.DeepRegressor.score": {"tf": 3.7416573867739413}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 9}, "nnetsauce.deep.DeepMTS": {"tf": 26.60826939130014}, "nnetsauce.deep.DeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS.n_layers": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS.obj": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 9}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 9}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 9}, "nnetsauce.demo": {"tf": 1.7320508075688772}, "nnetsauce.glm": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier": {"tf": 4.898979485566356}, "nnetsauce.glm.GLMClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.family": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.logit_loss": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.expit_erf_loss": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.loss_func": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 4.123105625617661}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 4.123105625617661}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 9}, "nnetsauce.glm.GLMRegressor": {"tf": 4.898979485566356}, "nnetsauce.glm.GLMRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.family": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.gaussian_loss": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.laplace_loss": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.poisson_loss": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.loss_func": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 4.123105625617661}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 4.123105625617661}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 9}, "nnetsauce.lazypredict": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 15.684387141358123}, "nnetsauce.lazypredict.LazyClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.verbose": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.ignore_warnings": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.custom_metric": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.predictions": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.sort_by": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.random_state": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.estimators": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.preprocess": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.n_jobs": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 4.123105625617661}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 4.898979485566356}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 9}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 9}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 15.684387141358123}, "nnetsauce.lazypredict.LazyRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.verbose": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.ignore_warnings": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.custom_metric": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.predictions": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.random_state": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.estimators": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.preprocess": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.n_jobs": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 4.898979485566356}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 4.123105625617661}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 9}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 9}, "nnetsauce.lazypredict.LazyMTS": {"tf": 4.242640687119285}, "nnetsauce.lazypredict.LazyMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.verbose": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.ignore_warnings": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.custom_metric": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.predictions": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.random_state": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.estimators": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.preprocess": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 4.123105625617661}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 4.358898943540674}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 9}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 9}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 9}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 15.968719422671311}, "nnetsauce.lazypredict.LazyDeepClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.verbose": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.ignore_warnings": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.custom_metric": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.predictions": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.sort_by": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.random_state": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.estimators": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.preprocess": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.n_layers": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.n_jobs": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 4.123105625617661}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 4.898979485566356}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 9}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 9}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 4.358898943540674}, "nnetsauce.lazypredict.LazyDeepRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.verbose": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.ignore_warnings": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.custom_metric": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.predictions": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.random_state": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.estimators": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.preprocess": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.n_layers": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.n_jobs": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 4.795831523312719}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 4.58257569495584}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 9}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 9}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 4.242640687119285}, "nnetsauce.lazypredict.LazyDeepMTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.verbose": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.ignore_warnings": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.custom_metric": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.predictions": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.random_state": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.estimators": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.preprocess": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.n_layers": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 4.58257569495584}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 4.358898943540674}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 9}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 9}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 9}, "nnetsauce.mts": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 26.43860813280457}, "nnetsauce.mts.MTS.__init__": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.obj": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.n_series": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.lags": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.type_pi": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.replications": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.kernel": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.agg": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.verbose": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.show_progress": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.series_names": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.input_dates": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.fit_objs_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.y_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.X_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.xreg_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.y_means_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.mean_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.upper_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.lower_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.output_dates_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.preds_std_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.alpha_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.return_std_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.df_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.residuals_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.residuals_sims_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.kde_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.sims_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.residuals_std_dev_": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.n_obs": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.level": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.fit": {"tf": 4}, "nnetsauce.mts.MTS.predict": {"tf": 4}, "nnetsauce.mts.MTS.score": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.plot": {"tf": 3}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 9}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 9}, "nnetsauce.mts.MTS.set_score_request": {"tf": 9}, "nnetsauce.multitask": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 21.18962010041709}, "nnetsauce.multitask.MultitaskClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.obj": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.fit_objs_": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 4.123105625617661}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 4.123105625617661}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 9}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 9}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 20.396078054371138}, "nnetsauce.multitask.SimpleMultitaskClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.obj": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit_objs_": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.X_scaler_": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.scaled_X_": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 4.123105625617661}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 4.123105625617661}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 9}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 9}, "nnetsauce.nonconformist": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 3.3166247903554}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 4.358898943540674}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 4.358898943540674}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 3}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 4.358898943540674}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 4.358898943540674}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 21.61018278497431}, "nnetsauce.nonconformist.RegressorAdapter.__init__": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 9}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 9}, "nnetsauce.nonconformist.RegressorNc": {"tf": 5.916079783099616}, "nnetsauce.nonconformist.RegressorNc.__init__": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 5.0990195135927845}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 9}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 9}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 9}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 21.61018278497431}, "nnetsauce.nonconformist.RegressorNormalizer.__init__": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer.base_model": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer.normalizer_model": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer.err_func": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer.fit": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer.score": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 9}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 9}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 22.360679774997898}, "nnetsauce.nonconformist.IcpRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 4.795831523312719}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 9}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 9}, "nnetsauce.optimizers": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer": {"tf": 3.3166247903554}, "nnetsauce.optimizers.Optimizer.__init__": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.type_optim": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.num_iters": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.learning_rate": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.batch_prop": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.learning_method": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.randomization": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.mass": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.decay": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.tolerance": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.verbose": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.opt": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 4.123105625617661}, "nnetsauce.optimizers.Optimizer.one_hot_encode": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 3.3166247903554}, "nnetsauce.predictioninterval.PredictionInterval.__init__": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.obj": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.method": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.level": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.type_pi": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.replications": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.kernel": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.agg": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.seed": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.alpha_": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.quantile_": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.icp_": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.scaled_calibrated_residuals_": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.calibrated_residuals_scaler_": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.kde_": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 3.605551275463989}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 3.1622776601683795}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 9}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 9}, "nnetsauce.randombag": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 22.40535650240808}, "nnetsauce.randombag.RandomBagClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.verbose": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.n_jobs": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.voter_": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 4.123105625617661}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 4.123105625617661}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 9}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 9}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 9}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 18.083141320025124}, "nnetsauce.randombag.RandomBagRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.verbose": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.n_jobs": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.voter_": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 4.123105625617661}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 4.123105625617661}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 9}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 9}, "nnetsauce.ridge2": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 20.663978319771825}, "nnetsauce.ridge2.Ridge2Classifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.solver": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.beta_": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.classes_": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.minloglik_": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 3.4641016151377544}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 4.47213595499958}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 4.123105625617661}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 9}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 4.242640687119285}, "nnetsauce.ridge2.Ridge2Regressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 4.123105625617661}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 4.123105625617661}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 9}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 21.142374511865974}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.type_fit": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 4.123105625617661}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 4.123105625617661}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 4.123105625617661}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 9}, "nnetsauce.rvfl": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 5.916079783099616}, "nnetsauce.rvfl.BayesianRVFLRegressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.s": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.sigma": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.beta_": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.Sigma_": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.GCV_": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.return_std": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 4.123105625617661}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 4.123105625617661}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 9}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 9}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 5.916079783099616}, "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s1": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.s2": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.sigma": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.beta_": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.Sigma_": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.GCV_": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.return_std": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 4.123105625617661}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 4.123105625617661}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 9}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 9}, "nnetsauce.sampling": {"tf": 1.7320508075688772}, "nnetsauce.sampling.SubSampler": {"tf": 4.358898943540674}, "nnetsauce.sampling.SubSampler.__init__": {"tf": 1.7320508075688772}, "nnetsauce.sampling.SubSampler.y": {"tf": 1.7320508075688772}, "nnetsauce.sampling.SubSampler.n_samples": {"tf": 1.7320508075688772}, "nnetsauce.sampling.SubSampler.seed": {"tf": 1.7320508075688772}, "nnetsauce.sampling.SubSampler.indices": {"tf": 1.7320508075688772}, "nnetsauce.sampling.SubSampler.n_jobs": {"tf": 1.7320508075688772}, "nnetsauce.sampling.SubSampler.verbose": {"tf": 1.7320508075688772}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 4.58257569495584}, "nnetsauce.simulation": {"tf": 1.7320508075688772}, "nnetsauce.simulation.generate_sobol": {"tf": 1.7320508075688772}, "nnetsauce.simulation.generate_uniform": {"tf": 1.7320508075688772}, "nnetsauce.simulation.generate_hammersley": {"tf": 1.7320508075688772}, "nnetsauce.simulation.generate_halton": {"tf": 1.7320508075688772}, "nnetsauce.simulation.getsims": {"tf": 1.7320508075688772}, "nnetsauce.simulation.getsims.getsims": {"tf": 1.7320508075688772}, "nnetsauce.tests": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_adaboost": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 5.656854249492381}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_AdaBoost": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_score": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_base": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_base.TestBase": {"tf": 5.656854249492381}, "nnetsauce.tests.tests_base.TestBase.test_base": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_base.TestBase.test_score": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_custom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 5.656854249492381}, "nnetsauce.tests.tests_custom.TestCustom.test_custom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_custom.TestCustom.test_score": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_download": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 5.656854249492381}, "nnetsauce.tests.tests_download.TestDownload.test_download": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_lazy_custom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 5.656854249492381}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom.test_custom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_model_selection": {"tf": 2}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 5.656854249492381}, "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mtask": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 5.656854249492381}, "nnetsauce.tests.tests_mtask.TestMultitask.test_Multitask": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mtask.TestMultitask.test_score": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mts": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 5.656854249492381}, "nnetsauce.tests.tests_mts.TestMTS.test_MTS": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mts.TestMTS.test_get_set": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mts.TestMTS.test_score": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_randombag": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 5.656854249492381}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_RandomBag": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_randombag.TestRandomBag.test_score": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 5.656854249492381}, "nnetsauce.tests.tests_ridge.TestRidge.test_Ridge": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge.TestRidge.test_score": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge_regression": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 5.656854249492381}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_rvfl": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 5.656854249492381}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_rvfl": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_rvfl.TestRVFL.test_score": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_simulation": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 5.656854249492381}, "nnetsauce.tests.tests_simulation.TestSimul.test_sobol": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_simulation.TestSimul.test_hammersley": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_simulation.TestSimul.test_halton": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_simulation.TestSimul.test_uniform": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_tssplit": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 5.656854249492381}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit.test_TimeSeriesSplit": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 5.656854249492381}, "nnetsauce.tests.tests_utils.TestUtils.test_crossprod": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils.test_tcrossprod": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils.test_cbind": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils.test_rbind": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils.test_psd_check": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils.test_nearestPD": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2": {"tf": 1.7320508075688772}, "nnetsauce.tests.utilstests": {"tf": 1.7320508075688772}, "nnetsauce.tests.utilstests.test_check": {"tf": 1.7320508075688772}, "nnetsauce.utils": {"tf": 1.7320508075688772}, "nnetsauce.utils.beta_hat": {"tf": 1.7320508075688772}, "nnetsauce.utils.inv_penalized_cov": {"tf": 1.7320508075688772}, "nnetsauce.utils.cbind": {"tf": 1.7320508075688772}, "nnetsauce.utils.delete_last_columns": {"tf": 3.3166247903554}, "nnetsauce.utils.rbind": {"tf": 1.7320508075688772}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 3.1622776601683795}, "nnetsauce.utils.crossprod": {"tf": 1.7320508075688772}, "nnetsauce.utils.tcrossprod": {"tf": 1.7320508075688772}, "nnetsauce.utils.to_np_array": {"tf": 1.7320508075688772}, "nnetsauce.utils.merge_two_dicts": {"tf": 1.7320508075688772}, "nnetsauce.utils.is_factor": {"tf": 1.7320508075688772}, "nnetsauce.utils.isPD": {"tf": 1.4142135623730951}, "nnetsauce.utils.nearestPD": {"tf": 4}, "nnetsauce.utils.compute_output_dates": {"tf": 1.7320508075688772}, "nnetsauce.utils.create_lags": {"tf": 1.7320508075688772}, "nnetsauce.utils.create_train_inputs": {"tf": 1.7320508075688772}, "nnetsauce.utils.reformat_response": {"tf": 1.7320508075688772}, "nnetsauce.utils.tuple_map": {"tf": 1.7320508075688772}, "nnetsauce.utils.TimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.__init__": {"tf": 1.7320508075688772}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 6}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 9}, "nnetsauce.utils.Progbar": {"tf": 3.1622776601683795}, "nnetsauce.utils.Progbar.__init__": {"tf": 1.7320508075688772}, "nnetsauce.utils.Progbar.target": {"tf": 1.7320508075688772}, "nnetsauce.utils.Progbar.width": {"tf": 1.7320508075688772}, "nnetsauce.utils.Progbar.verbose": {"tf": 1.7320508075688772}, "nnetsauce.utils.Progbar.interval": {"tf": 1.7320508075688772}, "nnetsauce.utils.Progbar.update": {"tf": 3.4641016151377544}, "nnetsauce.utils.Progbar.add": {"tf": 1.7320508075688772}, "nnetsauce.utils.winkler_score": {"tf": 1.7320508075688772}}, "df": 969, "a": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.6457513110645907}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.Base": {"tf": 1.7320508075688772}, "nnetsauce.Base.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.CustomClassifier": {"tf": 2.23606797749979}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.CustomRegressor": {"tf": 2.23606797749979}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.DeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.DeepMTS.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.LazyRegressor": {"tf": 2}, "nnetsauce.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.LazyMTS.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.MTS": {"tf": 2.6457513110645907}, "nnetsauce.MTS.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.MTS.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.MTS.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.PredictionInterval": {"tf": 2.23606797749979}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 2.23606797749979}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.RandomBagClassifier": {"tf": 2.23606797749979}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 2.23606797749979}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.base.Base": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.base.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.6457513110645907}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.custom.Custom": {"tf": 2.23606797749979}, "nnetsauce.custom.Custom.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomClassifier": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomRegressor": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.glm.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.glm.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.mts.MTS": {"tf": 2.6457513110645907}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.mts.MTS.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 2}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 2.23606797749979}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 2}, "nnetsauce.tests.tests_base.TestBase": {"tf": 2}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 2}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 2}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 2}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 2}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 2}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 2}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 2}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 2}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 2}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 2}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 2}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 2}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 2}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.nearestPD": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 2.23606797749979}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 221, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}}, "df": 2, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}}, "df": 104}}}}}}}}, "j": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}}, "df": 12}}}}}}}, "n": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 25, "y": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 46}, "d": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base": {"tf": 1.7320508075688772}, "nnetsauce.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 2.6457513110645907}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 2}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 2}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.fit": {"tf": 2.449489742783178}, "nnetsauce.LazyClassifier.provide_models": {"tf": 2.23606797749979}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.fit": {"tf": 2.449489742783178}, "nnetsauce.LazyRegressor.provide_models": {"tf": 2.23606797749979}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2.449489742783178}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2.449489742783178}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 2}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 2.6457513110645907}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 2}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 2}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 2}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 2.449489742783178}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 2}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 325}}, "l": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"1": {"docs": {"nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}}, "df": 4}, "2": {"docs": {"nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}}, "df": 4}, "docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "o": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 12}}, "l": {"docs": {"nnetsauce.Base": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 2.449489742783178}, "nnetsauce.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 2.23606797749979}, "nnetsauce.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 2.449489742783178}, "nnetsauce.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 2.449489742783178}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 2.449489742783178}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 2.449489742783178}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 51, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 2}}}}}, "g": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.fit": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}}, "df": 22}}}}, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 10}}}}}}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 10}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}}, "df": 8}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}}, "df": 16}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Base": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier": {"tf": 2.23606797749979}, "nnetsauce.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.base.Base": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}}, "df": 35}}}}}}}, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}}, "s": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 12}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 2.23606797749979}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 2.449489742783178}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 2.449489742783178}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 2.449489742783178}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 2.449489742783178}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 2.449489742783178}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.7320508075688772}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 181, "a": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.Base.create_layer": {"tf": 1.7320508075688772}, "nnetsauce.Base.cook_training_set": {"tf": 1.7320508075688772}, "nnetsauce.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.Base.score": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.score": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.score": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.fit": {"tf": 2}, "nnetsauce.LazyClassifier.provide_models": {"tf": 2}, "nnetsauce.LazyRegressor.fit": {"tf": 2}, "nnetsauce.LazyRegressor.provide_models": {"tf": 2}, "nnetsauce.LazyMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 2}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 2}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 2.23606797749979}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.create_layer": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.cook_training_set": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 2.23606797749979}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 2}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 2}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.7320508075688772}}, "df": 162}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 8}}}}, "g": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}}, "df": 62}, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 19}}}}}}}, "d": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}}, "df": 4}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 47}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 7, "d": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "t": {"docs": {"nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 7, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 55}}}}}}}}}, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 2}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.7320508075688772}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 188, "t": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}}, "df": 15, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 20}, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}}, "df": 3, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.tests.tests_model_selection": {"tf": 1}}, "df": 1, "s": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}}, "df": 7}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 10}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}}}}}}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}}, "df": 2}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}, "s": {"docs": {"nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}}, "df": 1}}}, "y": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 4}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1}}, "df": 1}}}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 2}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 2}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 151, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.7320508075688772}}, "df": 22}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}}, "df": 6, "s": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1}}, "df": 8}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Base": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 29}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 37, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2}, "nnetsauce.Base": {"tf": 1.7320508075688772}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier": {"tf": 2.23606797749979}, "nnetsauce.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier": {"tf": 2}, "nnetsauce.RandomBagRegressor": {"tf": 2}, "nnetsauce.RandomBagClassifier": {"tf": 2}, "nnetsauce.Ridge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier": {"tf": 2}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.base.Base": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2}, "nnetsauce.custom.Custom": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}}, "df": 37}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2}, "nnetsauce.Base": {"tf": 2.23606797749979}, "nnetsauce.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFLRegressor": {"tf": 2}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 2}, "nnetsauce.CustomClassifier": {"tf": 2}, "nnetsauce.CustomRegressor": {"tf": 2}, "nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.GLMClassifier": {"tf": 2}, "nnetsauce.GLMRegressor": {"tf": 2}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MultitaskClassifier": {"tf": 2}, "nnetsauce.RandomBagRegressor": {"tf": 2}, "nnetsauce.RandomBagClassifier": {"tf": 2}, "nnetsauce.Ridge2Regressor": {"tf": 2}, "nnetsauce.Ridge2Classifier": {"tf": 2}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.base.Base": {"tf": 2.23606797749979}, "nnetsauce.base.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 2.23606797749979}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2}, "nnetsauce.custom.Custom": {"tf": 2}, "nnetsauce.custom.CustomClassifier": {"tf": 2}, "nnetsauce.custom.CustomRegressor": {"tf": 2}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.glm.GLMClassifier": {"tf": 2}, "nnetsauce.glm.GLMRegressor": {"tf": 2}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 2}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 2}}, "df": 37}}}}}}}}, "f": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier": {"tf": 2}, "nnetsauce.DeepRegressor": {"tf": 2}, "nnetsauce.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier": {"tf": 2}, "nnetsauce.deep.DeepRegressor": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}}, "df": 14}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 41}}}, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 37}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 8}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}}, "df": 5}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}}, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": null}, "nnetsauce.tests.tests_base.TestBase": {"tf": null}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": null}, "nnetsauce.tests.tests_download.TestDownload": {"tf": null}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": null}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": null}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": null}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": null}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": null}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": null}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": null}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": null}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": null}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": null}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": null}}, "df": 15}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 8}}}}}, "g": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.MTS": {"tf": 2.449489742783178}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2.449489742783178}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 11, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 1}}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {"nnetsauce.utils.convert_df_to_numeric": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.utils.convert_df_to_numeric": {"tf": 1}}, "df": 1}}}}}}}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}}, "df": 6}}}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}}, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}}, "df": 2}}}}}}}}, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}}, "df": 4}}}, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {"nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "/": {"4": {"2": {"8": {"8": {"5": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}, "l": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}}, "df": 17, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.fit": {"tf": 2}, "nnetsauce.LazyClassifier.provide_models": {"tf": 2}, "nnetsauce.LazyRegressor.fit": {"tf": 2}, "nnetsauce.LazyRegressor.provide_models": {"tf": 2}, "nnetsauce.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 2}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 2}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.utils.delete_last_columns": {"tf": 2}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1.4142135623730951}}, "df": 30}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}}, "df": 2}}}}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}}, "df": 19}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 4}}}}}}}}, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 2.23606797749979}, "nnetsauce.GLMRegressor": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 2.23606797749979}, "nnetsauce.glm.GLMRegressor": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 18}}}}}}}, "s": {"docs": {"nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}}, "df": 78}, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}}}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 2}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 16}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 1, "l": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 2}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 2}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}}, "df": 39}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 2}, "nnetsauce.LazyRegressor": {"tf": 2}, "nnetsauce.LazyMTS": {"tf": 2}, "nnetsauce.LazyDeepClassifier": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepRegressor": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepMTS": {"tf": 2}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 2}}, "df": 21, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}}, "df": 2}}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 8, "s": {"docs": {"nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 8}}}}}}}}}}}}}}}, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}}, "df": 19}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.utils.isPD": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 31}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.7320508075688772}}, "df": 19, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.23606797749979}, "nnetsauce.DeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.RandomBagClassifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.23606797749979}}, "df": 18}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4, "s": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}}, "df": 15}}}, "l": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 2.6457513110645907}}, "df": 1, "l": {"docs": {"nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}}, "df": 8, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 27}}}, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1, "d": {"docs": {"nnetsauce.MTS": {"tf": 2.449489742783178}, "nnetsauce.mts.MTS": {"tf": 2.449489742783178}}, "df": 2}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 5}}}}}}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "c": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 136, "d": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}}, "df": 114}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}}, "df": 4}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit": {"tf": 1}}, "df": 7}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}}, "df": 2}}}}}}}, "g": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}}, "df": 2}}, "s": {"1": {"docs": {"nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 2}, "2": {"docs": {"nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 2}, "docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}, "nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 65, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.23606797749979}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.23606797749979}}, "df": 2}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 2}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 2}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 137, "s": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 2}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.Base.encode_clusters": {"tf": 1.7320508075688772}, "nnetsauce.Base.create_layer": {"tf": 1.7320508075688772}, "nnetsauce.Base.cook_training_set": {"tf": 2}, "nnetsauce.Base.cook_test_set": {"tf": 1.7320508075688772}, "nnetsauce.Base.score": {"tf": 2}, "nnetsauce.BaseRegressor.fit": {"tf": 2}, "nnetsauce.BaseRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 2}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 2}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.fit": {"tf": 2}, "nnetsauce.CustomClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.fit": {"tf": 2}, "nnetsauce.CustomRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.score": {"tf": 2}, "nnetsauce.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.score": {"tf": 2}, "nnetsauce.GLMClassifier.fit": {"tf": 2}, "nnetsauce.GLMClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.fit": {"tf": 2}, "nnetsauce.GLMRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.fit": {"tf": 2}, "nnetsauce.LazyClassifier.provide_models": {"tf": 2}, "nnetsauce.LazyRegressor.fit": {"tf": 2}, "nnetsauce.LazyRegressor.provide_models": {"tf": 2}, "nnetsauce.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 2}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 2}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.MTS.fit": {"tf": 2}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 2}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.fit": {"tf": 2}, "nnetsauce.PredictionInterval.predict": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 2}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 2}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.fit": {"tf": 2}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor.fit": {"tf": 2}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 2}, "nnetsauce.Ridge2Classifier.fit": {"tf": 2}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 2}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.SubSampler": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.encode_clusters": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.create_layer": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.cook_training_set": {"tf": 2}, "nnetsauce.base.Base.cook_test_set": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.score": {"tf": 2}, "nnetsauce.base.BaseRegressor.fit": {"tf": 2}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 2}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 2}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 2}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.score": {"tf": 2}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.score": {"tf": 2}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 2}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 2}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.fit": {"tf": 2}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 2}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 2}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 2}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 2}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 2}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 2}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 2}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.sampling.SubSampler": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 2.449489742783178}}, "df": 145}}}}, "e": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 12}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.23606797749979}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 2}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 2}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 2}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 2}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 2}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 2.6457513110645907}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 2.449489742783178}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 2}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 2.6457513110645907}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 2}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor": {"tf": 2}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 2}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 2}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 2}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 2}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.23606797749979}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 2}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 2}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 2.6457513110645907}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 2.449489742783178}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 2}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 2.6457513110645907}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 2}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}}, "df": 160, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 17, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 148}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 19}}}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}}, "df": 14, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}}, "df": 28, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 2}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 2}, "nnetsauce.RandomBagClassifier": {"tf": 2}, "nnetsauce.Ridge2Classifier": {"tf": 2}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 2}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 15}}}, "d": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 2}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 2.6457513110645907}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2.6457513110645907}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}}, "df": 45}, "e": {"docs": {}, "df": 0, "p": {"docs": {"nnetsauce.Optimizer": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer": {"tf": 1.7320508075688772}, "nnetsauce.utils.Progbar.update": {"tf": 1.7320508075688772}}, "df": 3, "s": {"docs": {"nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 3}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}, "a": {"docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}}, "df": 4}}, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 128}}}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 2.6457513110645907}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 2.6457513110645907}}, "df": 5}}}}}}}}}}, "m": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 2}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 2}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}}, "df": 35, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 2.23606797749979}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2.23606797749979}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35, "s": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}}, "df": 4}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}}}}, "z": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 2.23606797749979}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 29}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}, "l": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 4}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Downloader": {"tf": 1}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.datasets.Downloader": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}}, "df": 4}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}}, "df": 12}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Base": {"tf": 2}, "nnetsauce.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.base.Base": {"tf": 2}, "nnetsauce.base.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}}, "df": 35}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.fit": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS.score": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.score": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}}, "df": 48, "s": {"docs": {"nnetsauce.Base.score": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1}, "nnetsauce.LazyRegressor.fit": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 34}, "r": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 18}}}}}, "p": {"2": {"docs": {"nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}}, "df": 2}, "docs": {"nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}}, "df": 2}, "d": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2}}, "k": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}}, "df": 1}}}}}, "e": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 24, "d": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 2}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.SubSampler": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 2}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.sampling.SubSampler": {"tf": 1.4142135623730951}}, "df": 53}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 26}}}}}}, "f": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 2.6457513110645907}, "nnetsauce.CustomRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 2.6457513110645907}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 2.6457513110645907}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 2.6457513110645907}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}}, "df": 96}}, "t": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 2.23606797749979}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}}, "df": 248, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}, "s": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"1": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}, "2": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}, "3": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}, "docs": {"nnetsauce.DeepMTS": {"tf": 2.449489742783178}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 2.449489742783178}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.plot": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2.449489742783178}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit": {"tf": 1}}, "df": 19}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}}, "df": 1, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}}}}}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}}, "df": 1}}}}}}, "k": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 2}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 2}, "nnetsauce.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier": {"tf": 2}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 2}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.7320508075688772}}, "df": 41}}}}}, "i": {"docs": {}, "df": 0, "p": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 2.449489742783178}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 2.449489742783178}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.7320508075688772}}, "df": 31, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 8}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 21}}}}}}, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.create_layer": {"tf": 1.4142135623730951}, "nnetsauce.Base.cook_training_set": {"tf": 1.7320508075688772}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.cook_training_set": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.7320508075688772}}, "df": 122, "[": {"0": {"docs": {"nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}}, "df": 4}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.7320508075688772}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 134}}}, "w": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}}, "df": 2}}}}}}}, "u": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 4}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}}, "df": 10}, "s": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 6}}}}}}}, "h": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}, "p": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 12}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}}, "df": 2}}}}}}}}, "b": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1.7320508075688772}, "nnetsauce.SubSampler.subsample": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1.7320508075688772}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1.4142135623730951}}, "df": 8}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.SubSampler.subsample": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}}, "df": 2}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}}, "df": 15, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}}}}}, "g": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}}, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1}}, "df": 1}}}}}}}}, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}}}}}}}}}, "m": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.MTS": {"tf": 2.6457513110645907}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.mts.MTS": {"tf": 2.6457513110645907}}, "df": 6, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}}, "df": 1, "l": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.23606797749979}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.Base": {"tf": 1.7320508075688772}, "nnetsauce.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 2}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 2}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 2.6457513110645907}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 2}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 2}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 2}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.23606797749979}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 2}, "nnetsauce.custom.CustomClassifier": {"tf": 2}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 2}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 2.6457513110645907}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 2}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 2.449489742783178}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}}, "df": 126, "s": {"docs": {"nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 2.8284271247461903}, "nnetsauce.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 3}, "nnetsauce.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS": {"tf": 2.23606797749979}, "nnetsauce.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier": {"tf": 2.8284271247461903}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 2.6457513110645907}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 3}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2.6457513110645907}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}}, "df": 44}}}, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 1}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Base": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}}, "df": 14}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}}, "df": 4}}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.Optimizer": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer": {"tf": 1.7320508075688772}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {"nnetsauce.tests.tests_model_selection": {"tf": 1}}, "df": 1}}}}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor": {"tf": 2}, "nnetsauce.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.MTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.MTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer": {"tf": 2}, "nnetsauce.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor": {"tf": 2}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer": {"tf": 2}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_base.TestBase": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 2.23606797749979}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.7320508075688772}}, "df": 177, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_base.TestBase": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 2.449489742783178}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 165}}}}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.LazyClassifier": {"tf": 2.23606797749979}, "nnetsauce.LazyRegressor": {"tf": 2.23606797749979}, "nnetsauce.LazyMTS": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepClassifier": {"tf": 2.449489742783178}, "nnetsauce.LazyDeepRegressor": {"tf": 2.449489742783178}, "nnetsauce.LazyDeepMTS": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyMTS": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 2.23606797749979}, "nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 13, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.fit": {"tf": 1}, "nnetsauce.LazyRegressor.fit": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.utils.Progbar": {"tf": 1.7320508075688772}, "nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 24}}}}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}}}}}}, "a": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Base.score": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 20, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Base.score": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 10}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15, "s": {"docs": {"nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}}, "df": 17}}}}}}}, "i": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.utils.convert_df_to_numeric": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "x": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}}, "df": 35}}}, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2}}}, "u": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 7}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}}}}}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}}, "df": 2, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 8}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 6, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Base.score": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 33}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "x": {"docs": {"nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.utils.nearestPD": {"tf": 1.4142135623730951}}, "df": 9}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}}}, "h": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}}}}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}}, "df": 4}}, "e": {"docs": {"nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 4}, "p": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 4}}, "x": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 19}}}}, "{": {"docs": {}, "df": 0, "\\": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "{": {"docs": {}, "df": 0, "q": {"docs": {"nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 1}}}}}}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}, "y": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 16}, "n": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}}, "df": 15}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 4}, "e": {"docs": {"nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 4}}, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 3.872983346207417}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 3.872983346207417}, "nnetsauce.mts.MTS.fit": {"tf": 1}}, "df": 8}}, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}, "d": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}}, "df": 5}}}}}, "f": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.7320508075688772}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}, "d": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.isPD": {"tf": 1}, "nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 2}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 2.8284271247461903}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 3}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 3}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 3}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 3}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 3}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 2}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 2}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 3}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 3}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 3}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 3}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 3}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 2}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 194}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}}, "df": 113}}}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Optimizer": {"tf": 2}, "nnetsauce.optimizers.Optimizer": {"tf": 2}}, "df": 2}}}}}, "v": {"docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}}, "df": 10}}}}}}}, "e": {"docs": {}, "df": 0, "p": {"docs": {"nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}}, "df": 4, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}}, "df": 4}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}}, "df": 2}}}}}}}}}, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.DeepMTS": {"tf": 3.872983346207417}, "nnetsauce.deep.DeepMTS": {"tf": 3.872983346207417}}, "df": 2}}}}, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.mts.MTS.fit": {"tf": 1}}, "df": 8}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}}, "df": 15}}}}}}}}, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}}, "df": 2}}}, "e": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}}, "df": 2, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}}, "df": 3}}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 4}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.delete_last_columns": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 37, "l": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}}, "df": 2}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}}, "df": 2}}}}}, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 4}}}}}}}}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 4}}, "s": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}}, "df": 1}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 26, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 28}}}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.CustomClassifier": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomClassifier": {"tf": 2.23606797749979}}, "df": 2}}}}, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.DeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 2}, "nnetsauce.deep.DeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2}}, "df": 6}}}}}}, "f": {"docs": {}, "df": 0, "f": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 2}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor": {"tf": 2}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.Downloader": {"tf": 1}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 2.23606797749979}, "nnetsauce.LazyRegressor": {"tf": 2}, "nnetsauce.LazyDeepClassifier": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.SubSampler.subsample": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.datasets.Downloader": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 2}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor": {"tf": 2}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}}, "df": 143, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}}, "df": 6, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.Downloader": {"tf": 1}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.datasets.Downloader": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 33}}}}, "f": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 2}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.fit": {"tf": 2}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 2}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 2}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 2}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.utils.delete_last_columns": {"tf": 2.23606797749979}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 2.23606797749979}}, "df": 26, "s": {"docs": {"nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 1}}}}}}}, "e": {"docs": {"nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}}, "df": 4}}}, "f": {"docs": {"nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1}}, "df": 7}, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Downloader": {"tf": 1}, "nnetsauce.Downloader.download": {"tf": 1.4142135623730951}, "nnetsauce.datasets.Downloader": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1.4142135623730951}}, "df": 4, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Downloader.download": {"tf": 1.7320508075688772}, "nnetsauce.datasets.Downloader.download": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 12}}, "u": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.nonconformist": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}}}}}, "f": {"1": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}}, "df": 8}, "docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}}, "df": 14, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 2}, "nnetsauce.DeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.Downloader": {"tf": 1}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 2}, "nnetsauce.datasets.Downloader": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.utils.delete_last_columns": {"tf": 1.4142135623730951}}, "df": 51}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 12, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.8284271247461903}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.Base.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier": {"tf": 2.23606797749979}, "nnetsauce.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 2.449489742783178}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.fit": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.MTS": {"tf": 2.449489742783178}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.MTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.MTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier": {"tf": 3}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 3}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier": {"tf": 2.8284271247461903}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier": {"tf": 2.449489742783178}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.8284271247461903}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 2.449489742783178}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 2.449489742783178}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 3}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 3}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.8284271247461903}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.449489742783178}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.7320508075688772}}, "df": 219, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 49}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 16}}}}, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}}, "df": 15}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"3": {"2": {"docs": {"nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0}, "docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.6457513110645907}, "nnetsauce.Base": {"tf": 2}, "nnetsauce.BaseRegressor": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFLRegressor": {"tf": 2.449489742783178}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 2.6457513110645907}, "nnetsauce.CustomClassifier": {"tf": 2}, "nnetsauce.CustomRegressor": {"tf": 2}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 2.449489742783178}, "nnetsauce.GLMRegressor": {"tf": 2.449489742783178}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 2}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 2.23606797749979}, "nnetsauce.RandomBagRegressor": {"tf": 2}, "nnetsauce.RandomBagClassifier": {"tf": 2}, "nnetsauce.Ridge2Regressor": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.base.Base": {"tf": 2}, "nnetsauce.base.BaseRegressor": {"tf": 2.23606797749979}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.6457513110645907}, "nnetsauce.custom.Custom": {"tf": 2}, "nnetsauce.custom.CustomClassifier": {"tf": 2}, "nnetsauce.custom.CustomRegressor": {"tf": 2}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 2.449489742783178}, "nnetsauce.glm.GLMRegressor": {"tf": 2.449489742783178}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer": {"tf": 2.23606797749979}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 2.449489742783178}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 2.6457513110645907}}, "df": 44}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.Base": {"tf": 1.7320508075688772}, "nnetsauce.Base.encode_clusters": {"tf": 1.7320508075688772}, "nnetsauce.Base.create_layer": {"tf": 2.23606797749979}, "nnetsauce.Base.cook_training_set": {"tf": 2.449489742783178}, "nnetsauce.Base.cook_test_set": {"tf": 1.7320508075688772}, "nnetsauce.Base.score": {"tf": 2}, "nnetsauce.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.score": {"tf": 2}, "nnetsauce.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.score": {"tf": 2}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier": {"tf": 2.23606797749979}, "nnetsauce.GLMClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor": {"tf": 2.23606797749979}, "nnetsauce.GLMRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.fit": {"tf": 2}, "nnetsauce.LazyClassifier.provide_models": {"tf": 2}, "nnetsauce.LazyRegressor.fit": {"tf": 2}, "nnetsauce.LazyRegressor.provide_models": {"tf": 2}, "nnetsauce.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 2}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 2}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MTS.fit": {"tf": 2}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.fit": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.predict": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.base.Base": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.encode_clusters": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.create_layer": {"tf": 2.23606797749979}, "nnetsauce.base.Base.cook_training_set": {"tf": 2.449489742783178}, "nnetsauce.base.Base.cook_test_set": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.score": {"tf": 2}, "nnetsauce.base.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.score": {"tf": 2}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.score": {"tf": 2}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier": {"tf": 2.23606797749979}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor": {"tf": 2.23606797749979}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.fit": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.7320508075688772}}, "df": 173}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}}, "df": 2}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 3.1622776601683795}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 2.6457513110645907}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 2.6457513110645907}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 2.6457513110645907}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 3.4641016151377544}, "nnetsauce.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 3.1622776601683795}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Downloader": {"tf": 1}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 2.6457513110645907}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 2.8284271247461903}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 3.1622776601683795}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 2.8284271247461903}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 2.6457513110645907}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 2.6457513110645907}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 2.449489742783178}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 2.6457513110645907}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 2.6457513110645907}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 3.1622776601683795}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 2.6457513110645907}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 2.6457513110645907}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 3.4641016151377544}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.datasets.Downloader": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 3.1622776601683795}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 2.6457513110645907}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 2.8284271247461903}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 3.1622776601683795}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.8284271247461903}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 2.449489742783178}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.6457513110645907}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2.6457513110645907}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.449489742783178}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 2}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}, "nnetsauce.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 236, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1}}, "df": 4, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}}, "df": 6}}}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}}, "df": 3, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 2}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 2}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 2}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 2}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 2}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 2}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 2}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 2}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 2}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 2}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 2}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 2}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 2}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 2}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 2}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 2}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 2}, "nnetsauce.DeepMTS.set_score_request": {"tf": 2}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 2}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 2}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 2}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 2}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 2}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 2}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 2}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 2}, "nnetsauce.LazyMTS.set_score_request": {"tf": 2}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 2}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 2}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 2}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 2}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 2}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 2}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 2}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 2}, "nnetsauce.MTS.set_predict_request": {"tf": 2}, "nnetsauce.MTS.set_score_request": {"tf": 2}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 2}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 2}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 2}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 2}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 2}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 2}, "nnetsauce.Optimizer": {"tf": 2}, "nnetsauce.Optimizer.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 2}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 2}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 2}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 2}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 2}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 2}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 2}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 2}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 2}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 2}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 2}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 2}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 2}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 2}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 2}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 2}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 2}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 2}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 2}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 2}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 2}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 2}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 2}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 2}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 2}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 2}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 2}, "nnetsauce.mts.MTS.set_score_request": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 2}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 2}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 2}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 2}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 2}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 2}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 2}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 2}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 2}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 2}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 2}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 2}, "nnetsauce.optimizers.Optimizer": {"tf": 2}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 2}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 2}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 2}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 2}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 2}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 2}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 2}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 2}}, "df": 179, "s": {"docs": {"nnetsauce.Base.score": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}}, "df": 6}, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 6}}}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 2}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Base": {"tf": 1.7320508075688772}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 2.23606797749979}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.glm.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.utils.delete_last_columns": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 53}}}, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}}, "df": 15, "e": {"docs": {}, "df": 0, "x": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}, "b": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}}, "df": 2, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 8}}}}}, "l": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 163, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 44}}}}, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 3.605551275463989}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 3.605551275463989}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 8, "p": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 17}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 3}}, "df": 3}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 2}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}}, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 2}, "nnetsauce.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 2}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 3}, "nnetsauce.tests.tests_base.TestBase": {"tf": 3}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 3}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 3}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 3}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 3}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 3}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 3}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 3}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 3}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 3}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 3}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 3}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 3}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 3}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1.7320508075688772}, "nnetsauce.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 277, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 10}}}}, "a": {"1": {"1": {"docs": {"nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0, "p": {"docs": {"nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}}, "df": 2}}, "docs": {"nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 19, "k": {"1": {"docs": {"nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}}, "df": 2}, "docs": {}, "df": 0, "p": {"docs": {"nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}}, "df": 2}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}}, "df": 2}}}}, "e": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}}, "df": 4}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}}, "df": 1}}}}}, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 2}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 2}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}}, "df": 35}}}, "y": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 2.23606797749979}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 2.23606797749979}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 2.23606797749979}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_base.TestBase": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 2.23606797749979}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 162}, "a": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1.4142135623730951}, "nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 10, "s": {"docs": {"nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}}, "df": 2}}, "c": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 31}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 29, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}}, "df": 2}}}}}}}}}, "d": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}}, "df": 18}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}}, "df": 2}}}, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 2}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 2}}, "df": 10, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "l": {"2": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}}, "df": 2}}}}}}}}}}, "docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}}, "df": 8}}}}}}}}}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}}, "df": 8}}}}}}, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}}}, "g": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}}, "df": 8}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.23606797749979}, "nnetsauce.DeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.RandomBagClassifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.23606797749979}}, "df": 18}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.MTS": {"tf": 2.449489742783178}, "nnetsauce.mts.MTS": {"tf": 2.449489742783178}}, "df": 2}}}}, "f": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}}, "df": 2}}}}, "p": {"docs": {"nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}}, "df": 4, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 2.6457513110645907}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 2.6457513110645907}}, "df": 2, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 38, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 2}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 2}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 2}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 2}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 2}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 2}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 2}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 2}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 2}, "nnetsauce.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 2}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 2}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 2}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 2}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 2}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 2}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 2}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 2}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 2}, "nnetsauce.DeepMTS.set_score_request": {"tf": 2}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 2}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 2}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.fit": {"tf": 1}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 2}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 2}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.fit": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 2}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 2}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 2}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 2}, "nnetsauce.LazyMTS.set_score_request": {"tf": 2}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 2}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 2}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 2}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 2}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 2}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 2}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 2}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 2}, "nnetsauce.MTS.set_predict_request": {"tf": 2}, "nnetsauce.MTS.set_score_request": {"tf": 2}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 2}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 2}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 2}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 2}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 2}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 2}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 2}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 2}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 2}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 2}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 2}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 2}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 2}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 2}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 2}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 2}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 2}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 2}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 2}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 2}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 2}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 2}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 2}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 2}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 2}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 2}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 2}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 2}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 2}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 2}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 2}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.plot": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 2}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 2}, "nnetsauce.mts.MTS.set_score_request": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 2}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 2}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 2}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 2}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 2}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 2}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 2}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 2}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 2}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 2}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 2}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 2}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 2}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 2}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 2}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 2}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 2}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 2}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 2}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 2}}, "df": 309}}}}}, "s": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}}, "df": 2}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}}, "df": 14}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}}, "df": 1}}}, "s": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 111}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyClassifier.fit": {"tf": 2}, "nnetsauce.LazyRegressor.fit": {"tf": 2}, "nnetsauce.LazyMTS.fit": {"tf": 2}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.LazyDeepMTS.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 2}, "nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 13}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}}, "df": 3}}, "s": {"docs": {"nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 2}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 2.23606797749979}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 3}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1}, "nnetsauce.LazyRegressor.fit": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS": {"tf": 3}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 3}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 3}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}}, "df": 100, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 23}}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 2}, "nnetsauce.DeepRegressor.predict": {"tf": 2}, "nnetsauce.MTS": {"tf": 2.6457513110645907}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 2}, "nnetsauce.PredictionInterval.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 2}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 2}, "nnetsauce.mts.MTS": {"tf": 2.6457513110645907}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 2}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 2}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1.4142135623730951}}, "df": 20, "s": {"docs": {"nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}}, "df": 70}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}}}}}}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}}, "df": 6}}}, "s": {"docs": {"nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}}, "df": 14}}, "l": {"docs": {}, "df": 0, "u": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}}, "df": 35}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 12, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 12, "/": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Base": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}}, "df": 2}}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}}, "df": 4}}}}, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1.7320508075688772}, "nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 16}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}}, "df": 18}}}, "y": {"docs": {"nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}}, "df": 20}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1}}, "df": 1}}}}}}}}}}}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}}, "df": 6, "d": {"docs": {"nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}}, "df": 22}, "s": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.23606797749979}, "nnetsauce.CustomClassifier": {"tf": 2}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 2.8284271247461903}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 2.8284271247461903}, "nnetsauce.MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Classifier": {"tf": 2}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomClassifier": {"tf": 2}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2.8284271247461903}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.sampling.SubSampler": {"tf": 1}}, "df": 34, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Optimizer": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 17}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 2}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Base": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}}}}}}}, "p": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}}, "y": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 14, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}}, "df": 113, "/": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}}}}}}}}}}}, "i": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 12, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}}, "df": 12}}}}}}}, "d": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1.4142135623730951}}, "df": 5}, "k": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}}, "df": 2}}}}}}, "o": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.utils.isPD": {"tf": 1}, "nnetsauce.utils.nearestPD": {"tf": 1.4142135623730951}}, "df": 14}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 12}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}}, "df": 2}}}}}}}, "l": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}}, "df": 2, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}}}}}}}}, "r": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1}}, "df": 2}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 1, "d": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "j": {"2": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.7320508075688772}}, "df": 2}, "docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.8284271247461903}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 2.23606797749979}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 3.605551275463989}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS": {"tf": 3.605551275463989}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 2.8284271247461903}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 2.8284271247461903}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 2.449489742783178}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 2.8284271247461903}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 2}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.8284271247461903}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 3.605551275463989}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 3.605551275463989}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.8284271247461903}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 2.8284271247461903}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.8284271247461903}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2.449489742783178}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}}, "df": 67, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}}, "df": 77, "s": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 35}}}}, "s": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}}, "df": 8}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}}, "df": 12}}}}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 4, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 2}}}}}}}, "f": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 3.605551275463989}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.Base": {"tf": 3}, "nnetsauce.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.Base.create_layer": {"tf": 1.4142135623730951}, "nnetsauce.Base.cook_training_set": {"tf": 1.4142135623730951}, "nnetsauce.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.BaseRegressor": {"tf": 3}, "nnetsauce.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFLRegressor": {"tf": 3.3166247903554}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 3.4641016151377544}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.CustomClassifier": {"tf": 3}, "nnetsauce.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.CustomRegressor": {"tf": 3.3166247903554}, "nnetsauce.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.DeepClassifier.fit": {"tf": 2}, "nnetsauce.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.DeepRegressor.fit": {"tf": 2}, "nnetsauce.DeepRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.DeepMTS": {"tf": 3.4641016151377544}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.DeepMTS.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.GLMClassifier": {"tf": 3}, "nnetsauce.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.GLMRegressor": {"tf": 3}, "nnetsauce.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.fit": {"tf": 3.1622776601683795}, "nnetsauce.LazyClassifier.provide_models": {"tf": 3}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.LazyRegressor": {"tf": 2.23606797749979}, "nnetsauce.LazyRegressor.fit": {"tf": 3.1622776601683795}, "nnetsauce.LazyRegressor.provide_models": {"tf": 3}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.LazyMTS": {"tf": 2.23606797749979}, "nnetsauce.LazyMTS.fit": {"tf": 2.449489742783178}, "nnetsauce.LazyMTS.provide_models": {"tf": 2.23606797749979}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.LazyMTS.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepClassifier": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 3}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepRegressor": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 3}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepMTS": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepMTS.fit": {"tf": 2.449489742783178}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.MTS": {"tf": 4.58257569495584}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.MTS.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.MTS.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.MultitaskClassifier": {"tf": 3.1622776601683795}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.PredictionInterval": {"tf": 2}, "nnetsauce.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.predict": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.Optimizer": {"tf": 3.605551275463989}, "nnetsauce.RandomBagRegressor": {"tf": 3.1622776601683795}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.RandomBagClassifier": {"tf": 3.1622776601683795}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 2.23606797749979}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Regressor": {"tf": 2.6457513110645907}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Classifier": {"tf": 2.8284271247461903}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.6457513110645907}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.SubSampler": {"tf": 1.4142135623730951}, "nnetsauce.SubSampler.subsample": {"tf": 1}, "nnetsauce.base.Base": {"tf": 3}, "nnetsauce.base.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.create_layer": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.cook_training_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.base.BaseRegressor": {"tf": 3}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 3.605551275463989}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.custom.Custom": {"tf": 3}, "nnetsauce.custom.Custom.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomClassifier": {"tf": 3}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomRegressor": {"tf": 3.3166247903554}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 2}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 2}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepMTS": {"tf": 3.4641016151377544}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.glm.GLMClassifier": {"tf": 3}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.glm.GLMRegressor": {"tf": 3}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 3}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 3}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyMTS": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 3}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 3}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.mts.MTS": {"tf": 4.58257569495584}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.mts.MTS.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 3.1622776601683795}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 2.6457513110645907}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 2.449489742783178}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.optimizers.Optimizer": {"tf": 3.605551275463989}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 2}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 3.1622776601683795}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 3.1622776601683795}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.8284271247461903}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 2.6457513110645907}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.6457513110645907}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 3.3166247903554}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 3.4641016151377544}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 2.23606797749979}, "nnetsauce.sampling.SubSampler": {"tf": 1.4142135623730951}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 2.6457513110645907}, "nnetsauce.tests.tests_base.TestBase": {"tf": 2.6457513110645907}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 2.6457513110645907}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 2.6457513110645907}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 2.6457513110645907}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 2.6457513110645907}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 2.6457513110645907}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 2.6457513110645907}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 2.6457513110645907}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 2.6457513110645907}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 2.6457513110645907}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 2.6457513110645907}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 2.6457513110645907}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 2.6457513110645907}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 2.6457513110645907}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1}, "nnetsauce.utils.nearestPD": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 2}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 2.23606797749979}, "nnetsauce.utils.Progbar": {"tf": 1.7320508075688772}, "nnetsauce.utils.Progbar.update": {"tf": 1.7320508075688772}}, "df": 334, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 3.1622776601683795}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.Base": {"tf": 3.1622776601683795}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 3}, "nnetsauce.BayesianRVFLRegressor": {"tf": 3}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 3}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 3.1622776601683795}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 3.3166247903554}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 2}, "nnetsauce.DeepRegressor.predict": {"tf": 2}, "nnetsauce.DeepMTS": {"tf": 3.605551275463989}, "nnetsauce.GLMClassifier": {"tf": 2.6457513110645907}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 2.8284271247461903}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 3.605551275463989}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.plot": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 3}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 3}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 3}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 2.8284271247461903}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 3.1622776601683795}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.8284271247461903}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.base.Base": {"tf": 3.1622776601683795}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 3}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 3.1622776601683795}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 3}, "nnetsauce.custom.CustomClassifier": {"tf": 3.1622776601683795}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 3.3166247903554}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 2}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 2}, "nnetsauce.deep.DeepMTS": {"tf": 3.605551275463989}, "nnetsauce.glm.GLMClassifier": {"tf": 2.6457513110645907}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 2.8284271247461903}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 3.605551275463989}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 3}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 3}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 3}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 3.1622776601683795}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 2.8284271247461903}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.8284271247461903}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 3}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 3}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.utils.delete_last_columns": {"tf": 1.4142135623730951}}, "df": 98, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 31}}}}}}, "g": {"docs": {}, "df": 0, "/": {"1": {"0": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}, "docs": {}, "df": 0}, "3": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}}}}}}}}}}}}}}}}}}, "docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}}}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 23}}}}, "u": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}}, "df": 8, "s": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}}}}, "n": {"docs": {"nnetsauce.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 2}, "nnetsauce.GLMRegressor": {"tf": 2}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.fit": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.score": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 2}, "nnetsauce.glm.GLMRegressor": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.score": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 71, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}}, "df": 39}, "l": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 14}}}, "v": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}}, "df": 2}, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 2, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Base": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 16, "w": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 3}}}}, "s": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}}, "df": 1}}}}}, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}}, "df": 2, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 2.6457513110645907}, "nnetsauce.LazyRegressor": {"tf": 2.8284271247461903}, "nnetsauce.LazyMTS": {"tf": 2.8284271247461903}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 2.8284271247461903}, "nnetsauce.LazyDeepRegressor": {"tf": 2.8284271247461903}, "nnetsauce.LazyDeepMTS": {"tf": 2.8284271247461903}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 2.6457513110645907}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyMTS": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 2.8284271247461903}, "nnetsauce.mts.MTS.fit": {"tf": 1}}, "df": 20}}, "s": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 12}}}, "m": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2, "r": {"docs": {"nnetsauce.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}}, "df": 8}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}}}}, "w": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 17}}}, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 2.23606797749979}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 2}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 2}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.Base.encode_clusters": {"tf": 2}, "nnetsauce.Base.create_layer": {"tf": 2.23606797749979}, "nnetsauce.Base.cook_training_set": {"tf": 2.449489742783178}, "nnetsauce.Base.cook_test_set": {"tf": 2}, "nnetsauce.Base.score": {"tf": 2.23606797749979}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.fit": {"tf": 2.23606797749979}, "nnetsauce.BaseRegressor.predict": {"tf": 2}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 2}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 2}, "nnetsauce.CustomClassifier": {"tf": 2.6457513110645907}, "nnetsauce.CustomClassifier.fit": {"tf": 2.23606797749979}, "nnetsauce.CustomClassifier.predict": {"tf": 2}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 2}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.fit": {"tf": 2.23606797749979}, "nnetsauce.CustomRegressor.predict": {"tf": 2}, "nnetsauce.DeepClassifier.predict": {"tf": 2}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 2}, "nnetsauce.DeepClassifier.score": {"tf": 2.23606797749979}, "nnetsauce.DeepRegressor.predict": {"tf": 2}, "nnetsauce.DeepRegressor.score": {"tf": 2.23606797749979}, "nnetsauce.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.fit": {"tf": 2.23606797749979}, "nnetsauce.GLMClassifier.predict": {"tf": 2}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 2}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.fit": {"tf": 2.23606797749979}, "nnetsauce.GLMRegressor.predict": {"tf": 2}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MTS.fit": {"tf": 2.449489742783178}, "nnetsauce.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.MultitaskClassifier.fit": {"tf": 2.23606797749979}, "nnetsauce.MultitaskClassifier.predict": {"tf": 2}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 2}, "nnetsauce.PredictionInterval.fit": {"tf": 2.23606797749979}, "nnetsauce.PredictionInterval.predict": {"tf": 2}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 2.23606797749979}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 2}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 2}, "nnetsauce.Optimizer.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 2.23606797749979}, "nnetsauce.RandomBagRegressor.fit": {"tf": 2.23606797749979}, "nnetsauce.RandomBagRegressor.predict": {"tf": 2}, "nnetsauce.RandomBagClassifier": {"tf": 2.449489742783178}, "nnetsauce.RandomBagClassifier.fit": {"tf": 2.23606797749979}, "nnetsauce.RandomBagClassifier.predict": {"tf": 2}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 2}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.fit": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Regressor.predict": {"tf": 2}, "nnetsauce.Ridge2Classifier": {"tf": 2}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Classifier.fit": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Classifier.predict": {"tf": 2}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 2}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 2.23606797749979}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 2}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 2}, "nnetsauce.SubSampler": {"tf": 1.7320508075688772}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.encode_clusters": {"tf": 2}, "nnetsauce.base.Base.create_layer": {"tf": 2.23606797749979}, "nnetsauce.base.Base.cook_training_set": {"tf": 2.449489742783178}, "nnetsauce.base.Base.cook_test_set": {"tf": 2}, "nnetsauce.base.Base.score": {"tf": 2.23606797749979}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.fit": {"tf": 2.23606797749979}, "nnetsauce.base.BaseRegressor.predict": {"tf": 2}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 2.23606797749979}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 2}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 2}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 2.6457513110645907}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 2}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 2}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 2}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 2}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 2}, "nnetsauce.deep.DeepClassifier.score": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 2}, "nnetsauce.deep.DeepRegressor.score": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 2.23606797749979}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 2}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 2}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 2.23606797749979}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.mts.MTS.fit": {"tf": 2.449489742783178}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 2.23606797749979}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 2}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 2.23606797749979}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 2}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 2}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 2}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 2}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 2}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 2}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 2.23606797749979}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 2}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.449489742783178}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 2}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 2}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 2}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 2}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 2}, "nnetsauce.sampling.SubSampler": {"tf": 1.7320508075688772}, "nnetsauce.utils.nearestPD": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 2.449489742783178}}, "df": 170, "u": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.utils.delete_last_columns": {"tf": 1.4142135623730951}}, "df": 3, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.Base.create_layer": {"tf": 1.4142135623730951}, "nnetsauce.Base.cook_training_set": {"tf": 1.4142135623730951}, "nnetsauce.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.fit": {"tf": 2}, "nnetsauce.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.fit": {"tf": 2}, "nnetsauce.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 2.8284271247461903}, "nnetsauce.LazyClassifier.provide_models": {"tf": 2.8284271247461903}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.fit": {"tf": 2.8284271247461903}, "nnetsauce.LazyRegressor.provide_models": {"tf": 2.8284271247461903}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.fit": {"tf": 2}, "nnetsauce.LazyMTS.provide_models": {"tf": 2}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2.8284271247461903}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 2.8284271247461903}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2.8284271247461903}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 2.8284271247461903}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 2}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 2}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.predict": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.SubSampler": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.create_layer": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.cook_training_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 2}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 2}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 2}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.sampling.SubSampler": {"tf": 1.4142135623730951}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 2}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 190}}}, "p": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 27}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.utils.convert_df_to_numeric": {"tf": 1.4142135623730951}}, "df": 1}}}}}}, "o": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 37, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.23606797749979}, "nnetsauce.Base": {"tf": 2.23606797749979}, "nnetsauce.BaseRegressor": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFLRegressor": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 2.23606797749979}, "nnetsauce.CustomClassifier": {"tf": 2.6457513110645907}, "nnetsauce.CustomRegressor": {"tf": 2.23606797749979}, "nnetsauce.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.GLMClassifier": {"tf": 2.23606797749979}, "nnetsauce.GLMRegressor": {"tf": 2.23606797749979}, "nnetsauce.MTS": {"tf": 2.23606797749979}, "nnetsauce.MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.RandomBagRegressor": {"tf": 2.23606797749979}, "nnetsauce.RandomBagClassifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Regressor": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.base.Base": {"tf": 2.23606797749979}, "nnetsauce.base.BaseRegressor": {"tf": 2.23606797749979}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.23606797749979}, "nnetsauce.custom.Custom": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomClassifier": {"tf": 2.6457513110645907}, "nnetsauce.custom.CustomRegressor": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.glm.GLMClassifier": {"tf": 2.23606797749979}, "nnetsauce.glm.GLMRegressor": {"tf": 2.23606797749979}, "nnetsauce.mts.MTS": {"tf": 2.23606797749979}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 2.23606797749979}}, "df": 35}}}, "r": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}}, "df": 6, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1}}, "df": 1}, "d": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1.4142135623730951}}, "df": 1, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1}}, "df": 1}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 81, "e": {"docs": {"nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}}, "df": 2, "s": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 115}}, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}}}}}, "n": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1}}, "df": 1, "e": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 32}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}}, "df": 4}}}}}}, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc": {"tf": 2}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 2}}, "df": 9}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}}, "df": 1}}}}}}}}}}}, "w": {"docs": {"nnetsauce.Downloader": {"tf": 1}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.datasets.Downloader": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1}}, "df": 20}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}, "nnetsauce.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 190, "s": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 15}, "d": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 42}}}}}}}}, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.Downloader.download": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.datasets.Downloader.download": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}}, "df": 34, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.SubSampler.subsample": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}}, "df": 2}}}}}}}, "p": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 2}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 2}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}}, "df": 23}, "e": {"docs": {}, "df": 0, "w": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 2}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 2}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 119, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}}, "df": 2}}}}, "g": {"docs": {"nnetsauce.Base.score": {"tf": 2}, "nnetsauce.DeepClassifier.score": {"tf": 2}, "nnetsauce.DeepRegressor.score": {"tf": 2}, "nnetsauce.base.Base.score": {"tf": 2}, "nnetsauce.deep.DeepClassifier.score": {"tf": 2}, "nnetsauce.deep.DeepRegressor.score": {"tf": 2}}, "df": 6, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 8, "s": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 8}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 23}}}}, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}}, "df": 2}}}}, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1}}, "df": 2}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1.4142135623730951}}, "df": 1, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "c": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 2.6457513110645907}}, "df": 5, "g": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}}, "df": 2}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}, "e": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}}, "df": 115, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 2.449489742783178}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 2.449489742783178}}, "df": 2, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}}, "df": 24}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}}, "df": 22}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.mts.MTS.fit": {"tf": 1}}, "df": 8}}}}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}}, "df": 35}, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}}, "df": 14}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 1}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 39, "d": {"docs": {"nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}}}}, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.Base": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}}, "df": 2}}}}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}}, "df": 2}}}}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}}}}, "d": {"docs": {"nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 1}}, "x": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}}, "df": 4, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.SubSampler.subsample": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 2}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}}, "df": 54}}}}}}, "p": {"docs": {"nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}}, "df": 2, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Base.score": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}}, "df": 6}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 17}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}}}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1}}, "df": 10}}}}}}, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}}, "df": 15}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "r": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1.4142135623730951}}, "df": 1, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Base.score": {"tf": 2}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 2}, "nnetsauce.DeepRegressor.score": {"tf": 2}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 2}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 2}, "nnetsauce.deep.DeepRegressor.score": {"tf": 2}, "nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 19, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 16}}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 12}}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 8}}}}}, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.MTS": {"tf": 2.23606797749979}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2.23606797749979}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 31}}, "r": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 3}}}}}}}}}}, "i": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}}, "df": 3, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 2}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 2.23606797749979}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 2.6457513110645907}, "nnetsauce.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 2.449489742783178}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS": {"tf": 2.8284271247461903}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 2.6457513110645907}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2.449489742783178}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2.8284271247461903}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 2}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 2}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_base.TestBase": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 2.449489742783178}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 2.449489742783178}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1.4142135623730951}, "nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 221, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.Base": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor": {"tf": 2}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor": {"tf": 2}, "nnetsauce.LazyMTS": {"tf": 2}, "nnetsauce.LazyDeepClassifier": {"tf": 2}, "nnetsauce.LazyDeepRegressor": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepMTS": {"tf": 2}, "nnetsauce.MTS": {"tf": 2.449489742783178}, "nnetsauce.MultitaskClassifier": {"tf": 2}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 2}, "nnetsauce.RandomBagClassifier": {"tf": 2}, "nnetsauce.Ridge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.SubSampler": {"tf": 1.7320508075688772}, "nnetsauce.base.Base": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.custom.Custom": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor": {"tf": 2}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.glm.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 2}, "nnetsauce.mts.MTS": {"tf": 2.449489742783178}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 2}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.sampling.SubSampler": {"tf": 1.7320508075688772}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}}, "df": 64, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}}, "df": 2}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1.4142135623730951}}, "df": 17, "s": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 16}}}}}, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.plot": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}}, "df": 6}}}}, "o": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 5}}, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}}, "df": 35}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.SubSampler.subsample": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.7320508075688772}}, "df": 3}}}, "v": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 35}}}}}}}, "e": {"docs": {}, "df": 0, "x": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.score": {"tf": 1.4142135623730951}, "nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.score": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.plot": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 10}, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}}, "df": 2}}}}}}}}, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 31}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}}, "df": 8}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.SubSampler.subsample": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1}, "nnetsauce.utils.isPD": {"tf": 1}, "nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 10, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 38}}}, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.delete_last_columns": {"tf": 1.4142135623730951}}, "df": 1}}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Base": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.7320508075688772}}, "df": 19, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}}, "df": 7}}}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}}, "df": 3}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.7320508075688772}}, "df": 15, "s": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}}, "df": 15}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}}}}}}, "t": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.7320508075688772}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 146, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 8}}}}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}}, "df": 1}}}}, "s": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}}}, "s": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 12, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "f": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}, "f": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.7320508075688772}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 2}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 2}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 2}, "nnetsauce.CustomRegressor.predict": {"tf": 2}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 2}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 2}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 2}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 2}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.7320508075688772}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}, "nnetsauce.utils.Progbar": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 193}, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.Base.encode_clusters": {"tf": 1.7320508075688772}, "nnetsauce.Base.create_layer": {"tf": 1.4142135623730951}, "nnetsauce.Base.cook_training_set": {"tf": 1.4142135623730951}, "nnetsauce.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 2.23606797749979}, "nnetsauce.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 2}, "nnetsauce.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 2}, "nnetsauce.DeepRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.fit": {"tf": 2.8284271247461903}, "nnetsauce.LazyClassifier.provide_models": {"tf": 2.8284271247461903}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.fit": {"tf": 2.8284271247461903}, "nnetsauce.LazyRegressor.provide_models": {"tf": 3}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.fit": {"tf": 2}, "nnetsauce.LazyMTS.provide_models": {"tf": 2.23606797749979}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2.8284271247461903}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 2.8284271247461903}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2.8284271247461903}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 3}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 2}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.predict": {"tf": 2.23606797749979}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.encode_clusters": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.create_layer": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.cook_training_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 2}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 2}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 3}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 3}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 2.23606797749979}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 2}, "nnetsauce.tests.tests_base.TestBase": {"tf": 2}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 2}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 2}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 2}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 2}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 2}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 2}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 2}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 2}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 2}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 2}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 2}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 2}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 2}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.isPD": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 326}, "m": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.6457513110645907}, "nnetsauce.CustomClassifier": {"tf": 2.23606797749979}, "nnetsauce.DeepClassifier": {"tf": 2}, "nnetsauce.DeepRegressor": {"tf": 2}, "nnetsauce.DeepMTS": {"tf": 2.449489742783178}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor": {"tf": 2}, "nnetsauce.MTS": {"tf": 2.449489742783178}, "nnetsauce.MultitaskClassifier": {"tf": 2.6457513110645907}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 2.6457513110645907}, "nnetsauce.RandomBagRegressor": {"tf": 2.23606797749979}, "nnetsauce.RandomBagClassifier": {"tf": 2.449489742783178}, "nnetsauce.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.6457513110645907}, "nnetsauce.custom.CustomClassifier": {"tf": 2.23606797749979}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 2}, "nnetsauce.deep.DeepRegressor": {"tf": 2}, "nnetsauce.deep.DeepMTS": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2}, "nnetsauce.mts.MTS": {"tf": 2.449489742783178}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.6457513110645907}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 2.6457513110645907}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 2.449489742783178}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.449489742783178}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.449489742783178}}, "df": 37, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Base": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 17}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}}}}}, "o": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "/": {"2": {"0": {"2": {"3": {"docs": {}, "df": 0, "/": {"1": {"0": {"docs": {}, "df": 0, "/": {"2": {"9": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}}}}}}}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "4": {"docs": {}, "df": 0, "/": {"0": {"3": {"docs": {}, "df": 0, "/": {"1": {"8": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}, "docs": {}, "df": 0}}}}}}}, "g": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 12, "d": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}}, "df": 13}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 12}}}}}}}, "s": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}, "x": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 2.8284271247461903}}, "df": 1}}, "p": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "b": {"docs": {"nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.SubSampler.subsample": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1.4142135623730951}}, "df": 4}}}}, "c": {"docs": {}, "df": 0, "p": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 2.23606797749979}}, "df": 1, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 1}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}}}, "l": {"1": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}}, "df": 6}, "2": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}}, "df": 6}, "docs": {"nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}}, "df": 2, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer": {"tf": 2.23606797749979}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer": {"tf": 2.23606797749979}}, "df": 4}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 6}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}}, "df": 18, "s": {"docs": {"nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}}, "df": 2}}}}, "n": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}, "a": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"1": {"docs": {"nnetsauce.CustomClassifier": {"tf": 2}, "nnetsauce.custom.CustomClassifier": {"tf": 2}}, "df": 2}, "2": {"docs": {"nnetsauce.CustomClassifier": {"tf": 2}, "nnetsauce.custom.CustomClassifier": {"tf": 2}}, "df": 2}, "3": {"docs": {"nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}}, "df": 2}, "docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Base": {"tf": 2}, "nnetsauce.Base.create_layer": {"tf": 1.7320508075688772}, "nnetsauce.Base.cook_training_set": {"tf": 1.7320508075688772}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 2}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier": {"tf": 3.4641016151377544}, "nnetsauce.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor": {"tf": 2}, "nnetsauce.Ridge2Classifier": {"tf": 2}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.base.Base": {"tf": 2}, "nnetsauce.base.Base.create_layer": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.cook_training_set": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 2}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 3.4641016151377544}, "nnetsauce.custom.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 2}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}}, "df": 41, "s": {"docs": {"nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.7320508075688772}}, "df": 12}}}}, "m": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"1": {"docs": {"nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}}, "df": 10}, "2": {"docs": {"nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}}, "df": 10}, "docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}}, "df": 2}}}}, "b": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 37}}}}, "z": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}}, "df": 4}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}}, "df": 2}}}}}}}}}, "m": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 2}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}}, "df": 2}}}}}}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}}, "df": 2}}}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}}, "df": 2}}}}}}}}}, "g": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.MTS": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.mts.MTS": {"tf": 2.23606797749979}}, "df": 4}}, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}}, "df": 2}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 10}}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}}, "df": 37}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 2}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}}, "df": 22, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}}, "df": 4}}}}}}}}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}, "nnetsauce.utils.Progbar": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 129}}, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}}, "df": 2}}}}}}}, "k": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.Base.create_layer": {"tf": 1.7320508075688772}, "nnetsauce.Base.cook_training_set": {"tf": 1.7320508075688772}, "nnetsauce.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.Base.score": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.score": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.fit": {"tf": 2}, "nnetsauce.LazyClassifier.provide_models": {"tf": 2}, "nnetsauce.LazyRegressor.fit": {"tf": 2}, "nnetsauce.LazyRegressor.provide_models": {"tf": 2}, "nnetsauce.LazyMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 2}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 2}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 2.23606797749979}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.create_layer": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.cook_training_set": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 2.23606797749979}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 2.23606797749979}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.7320508075688772}}, "df": 153, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}}, "df": 4}}}}}}}}}, "o": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}}, "df": 27}}, "g": {"docs": {"nnetsauce.Base.score": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}}, "df": 10, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}}, "df": 2, "c": {"docs": {}, "df": 0, "v": {"docs": {"nnetsauce.DeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}}}}}, "t": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 6}}}}}}}}}}}}, "w": {"docs": {"nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 1, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 6}}}, "s": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer.fit": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1.7320508075688772}}, "df": 4}}, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}}}}, "o": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}, "p": {"docs": {"nnetsauce.utils.convert_df_to_numeric": {"tf": 1}}, "df": 1}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "q": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 2.449489742783178}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.449489742783178}}, "df": 2}}}}, "t": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}, "r": {"2": {"docs": {"nnetsauce.Base.score": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}}, "df": 6}, "docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Downloader": {"tf": 1}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.datasets.Downloader": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}}, "df": 10, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer": {"tf": 2}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 2}}, "df": 6}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}, "n": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4, "o": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}}, "df": 62, "l": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 17}}, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 12}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.Optimizer": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "b": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 2}}}}}}}}}, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}, "e": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}}, "df": 4, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 2}, "nnetsauce.Ridge2Classifier": {"tf": 2}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 2}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}}}}}}}}}, "r": {"4": {"docs": {"nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}}, "df": 4}, "5": {"docs": {"nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}}, "df": 4}, "docs": {"nnetsauce.CustomClassifier": {"tf": 3.3166247903554}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 3.3166247903554}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}}, "df": 8, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 2.6457513110645907}, "nnetsauce.CustomRegressor": {"tf": 2}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.fit": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 2}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 2.23606797749979}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 2.6457513110645907}}, "df": 47, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}}, "df": 3, "s": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}}, "df": 12}, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 2}}}}}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {"nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}}, "df": 1}}}}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}, "e": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}}}, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 12}}}}}, "s": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "v": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 50}}}}}}}}, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Base.cook_training_set": {"tf": 1.4142135623730951}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 16, "s": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 3.1622776601683795}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 3.1622776601683795}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 8}}}}}}, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}}, "df": 1}}}}}}}, "p": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15, "o": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 39}}}}, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 12}}}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}}}}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 10}}}, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}}, "df": 8}}}}}}}}}}, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}}, "df": 2}, "d": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 2.23606797749979}, "nnetsauce.DeepRegressor.predict": {"tf": 2.23606797749979}, "nnetsauce.DeepMTS": {"tf": 2.449489742783178}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.MTS": {"tf": 2.449489742783178}, "nnetsauce.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepMTS": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2.449489742783178}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}}, "df": 36, "s": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SubSampler.subsample": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.sampling.SubSampler.subsample": {"tf": 1}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1}, "nnetsauce.utils.isPD": {"tf": 1}}, "df": 143}, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 133}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 10}}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.Base.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.MTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.MTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.MTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.7320508075688772}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.7320508075688772}}, "df": 113, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 117}}}}}, "i": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 2}, "d": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}, "f": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 114}}}}}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}}, "df": 12}}}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SubSampler": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.sampling.SubSampler": {"tf": 1.4142135623730951}}, "df": 19, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.fit": {"tf": 2}, "nnetsauce.LazyClassifier.provide_models": {"tf": 2}, "nnetsauce.LazyRegressor.fit": {"tf": 2}, "nnetsauce.LazyRegressor.provide_models": {"tf": 2}, "nnetsauce.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 2}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 2}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}}, "df": 47}}, "c": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 20}, "b": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}}, "df": 2}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"2": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2}}}}}}}}}}, "m": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 2}}}}}}}}}}}}}}}}}}}}, "docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}}, "df": 18, "c": {"docs": {}, "df": 0, "v": {"docs": {"nnetsauce.DeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 29, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}, "m": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 6}}}}, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}}, "df": 14, "h": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.8284271247461903}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.Base": {"tf": 2.6457513110645907}, "nnetsauce.Base.encode_clusters": {"tf": 1.7320508075688772}, "nnetsauce.Base.create_layer": {"tf": 1.7320508075688772}, "nnetsauce.Base.cook_training_set": {"tf": 2}, "nnetsauce.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.Base.score": {"tf": 1.7320508075688772}, "nnetsauce.Base.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.BaseRegressor": {"tf": 2.23606797749979}, "nnetsauce.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.BayesianRVFLRegressor": {"tf": 2.6457513110645907}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 2.6457513110645907}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.CustomClassifier": {"tf": 2.6457513110645907}, "nnetsauce.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.CustomRegressor": {"tf": 2.6457513110645907}, "nnetsauce.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.DeepClassifier.fit": {"tf": 2}, "nnetsauce.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.score": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.DeepRegressor.fit": {"tf": 2}, "nnetsauce.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.score": {"tf": 1.7320508075688772}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.DeepMTS": {"tf": 3.1622776601683795}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.DeepMTS.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.GLMClassifier": {"tf": 2.449489742783178}, "nnetsauce.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.GLMRegressor": {"tf": 2.449489742783178}, "nnetsauce.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyClassifier": {"tf": 2.449489742783178}, "nnetsauce.LazyClassifier.fit": {"tf": 3.1622776601683795}, "nnetsauce.LazyClassifier.provide_models": {"tf": 3.3166247903554}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyRegressor": {"tf": 2.449489742783178}, "nnetsauce.LazyRegressor.fit": {"tf": 3.1622776601683795}, "nnetsauce.LazyRegressor.provide_models": {"tf": 3.1622776601683795}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyMTS": {"tf": 2.6457513110645907}, "nnetsauce.LazyMTS.fit": {"tf": 2.449489742783178}, "nnetsauce.LazyMTS.provide_models": {"tf": 2.449489742783178}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyMTS.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepClassifier": {"tf": 2.6457513110645907}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 3.3166247903554}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepRegressor": {"tf": 2.6457513110645907}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.LazyDeepMTS.fit": {"tf": 2.449489742783178}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 2.449489742783178}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.MTS": {"tf": 3}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.MTS.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.MTS.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.MultitaskClassifier": {"tf": 2.6457513110645907}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval.predict": {"tf": 2}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.Optimizer": {"tf": 1.7320508075688772}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 2.6457513110645907}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.RandomBagClassifier": {"tf": 2.6457513110645907}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 3.1622776601683795}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.Ridge2Regressor": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.Ridge2Classifier": {"tf": 3.872983346207417}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.base.Base": {"tf": 2.6457513110645907}, "nnetsauce.base.Base.encode_clusters": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.create_layer": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.cook_training_set": {"tf": 2}, "nnetsauce.base.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.base.BaseRegressor": {"tf": 2.23606797749979}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.8284271247461903}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.custom.Custom": {"tf": 2.449489742783178}, "nnetsauce.custom.Custom.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.custom.CustomClassifier": {"tf": 2.6457513110645907}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.custom.CustomRegressor": {"tf": 2.6457513110645907}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 2}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 2}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.deep.DeepMTS": {"tf": 3.1622776601683795}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.glm.GLMClassifier": {"tf": 2.449489742783178}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.glm.GLMRegressor": {"tf": 2.449489742783178}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 3.3166247903554}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyMTS": {"tf": 2.6457513110645907}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2.6457513110645907}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 3.3166247903554}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2.6457513110645907}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.mts.MTS": {"tf": 3}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.mts.MTS.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.6457513110645907}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply_inverse": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 2.6457513110645907}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 3.1622776601683795}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.optimizers.Optimizer": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 2}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.6457513110645907}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 3.1622776601683795}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2.6457513110645907}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 3.872983346207417}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 2.6457513110645907}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 2.6457513110645907}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 3.1622776601683795}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 3.1622776601683795}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 3.872983346207417}, "nnetsauce.tests.tests_base.TestBase": {"tf": 3.872983346207417}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 3.872983346207417}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 3.872983346207417}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 3.872983346207417}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 3.872983346207417}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 3.872983346207417}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 3.872983346207417}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 3.872983346207417}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 3.872983346207417}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 3.872983346207417}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 3.872983346207417}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 3.872983346207417}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 3.872983346207417}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 3.872983346207417}, "nnetsauce.utils.delete_last_columns": {"tf": 1.7320508075688772}, "nnetsauce.utils.nearestPD": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 2}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 3.1622776601683795}, "nnetsauce.utils.Progbar": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 333, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 49}, "i": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}}, "df": 27}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 2}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}, "i": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 144}}, "a": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 31}, "n": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}, "u": {"docs": {"nnetsauce.tests.tests_model_selection": {"tf": 1}}, "df": 1}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 74}}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.Base": {"tf": 2.449489742783178}, "nnetsauce.BaseRegressor": {"tf": 2.449489742783178}, "nnetsauce.BayesianRVFLRegressor": {"tf": 2}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 2}, "nnetsauce.CustomClassifier": {"tf": 2}, "nnetsauce.CustomRegressor": {"tf": 3}, "nnetsauce.DeepMTS": {"tf": 2}, "nnetsauce.GLMClassifier": {"tf": 2}, "nnetsauce.GLMRegressor": {"tf": 2}, "nnetsauce.MTS": {"tf": 2.449489742783178}, "nnetsauce.MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor": {"tf": 2}, "nnetsauce.RandomBagClassifier": {"tf": 2}, "nnetsauce.Ridge2Regressor": {"tf": 2}, "nnetsauce.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.base.Base": {"tf": 2.449489742783178}, "nnetsauce.base.BaseRegressor": {"tf": 2.449489742783178}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.custom.Custom": {"tf": 2}, "nnetsauce.custom.CustomClassifier": {"tf": 2}, "nnetsauce.custom.CustomRegressor": {"tf": 3}, "nnetsauce.deep.DeepMTS": {"tf": 2}, "nnetsauce.glm.GLMClassifier": {"tf": 2}, "nnetsauce.glm.GLMRegressor": {"tf": 2}, "nnetsauce.mts.MTS": {"tf": 2.449489742783178}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.optimizers.Optimizer": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 2}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 2}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1.4142135623730951}}, "df": 40, "s": {"docs": {"nnetsauce.utils.convert_df_to_numeric": {"tf": 1}}, "df": 1}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}}, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 3.3166247903554}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 3.3166247903554}, "nnetsauce.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 2.6457513110645907}, "nnetsauce.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 2.6457513110645907}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 3}, "nnetsauce.LazyClassifier.fit": {"tf": 2}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 3}, "nnetsauce.LazyRegressor.fit": {"tf": 2}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 3}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 2}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 3.3166247903554}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 3.3166247903554}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 3}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier": {"tf": 3.3166247903554}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 3.605551275463989}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 3.3166247903554}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 3.3166247903554}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 3.3166247903554}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 2.6457513110645907}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 2.6457513110645907}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 3}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 3}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 3}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 3.3166247903554}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 3.3166247903554}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 2.23606797749979}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 3.3166247903554}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 3}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 3.605551275463989}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 3.3166247903554}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 2.8284271247461903}, "nnetsauce.tests.tests_base.TestBase": {"tf": 2.8284271247461903}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 2.8284271247461903}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 2.8284271247461903}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 2.8284271247461903}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 2.8284271247461903}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 2.8284271247461903}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 2.8284271247461903}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 2.8284271247461903}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 2.8284271247461903}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 2.8284271247461903}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 2.8284271247461903}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 2.8284271247461903}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 2.8284271247461903}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 2.8284271247461903}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.7320508075688772}}, "df": 135, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.MTS.score": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.mts.MTS.score": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 29}}}, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.7320508075688772}}, "df": 15}}}}, "s": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}}, "df": 15}}}, "x": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}}}}, "r": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 2.449489742783178}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.predict": {"tf": 2.23606797749979}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 2.23606797749979}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 2.23606797749979}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 2.23606797749979}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 2}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 2}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 2}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS": {"tf": 2.6457513110645907}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 2.449489742783178}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 2.23606797749979}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 2.6457513110645907}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.isPD": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 173}, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}}, "df": 2}}}, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.CustomClassifier": {"tf": 3.1622776601683795}, "nnetsauce.DeepClassifier": {"tf": 2.449489742783178}, "nnetsauce.DeepRegressor": {"tf": 2.449489742783178}, "nnetsauce.LazyClassifier": {"tf": 2.8284271247461903}, "nnetsauce.LazyClassifier.fit": {"tf": 2}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 2.8284271247461903}, "nnetsauce.LazyRegressor.fit": {"tf": 2}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 2.8284271247461903}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 2}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.MTS.score": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.RandomBagRegressor": {"tf": 2.449489742783178}, "nnetsauce.RandomBagClassifier": {"tf": 2.449489742783178}, "nnetsauce.Ridge2Classifier": {"tf": 2.449489742783178}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.custom.CustomClassifier": {"tf": 3.1622776601683795}, "nnetsauce.deep.DeepClassifier": {"tf": 2.449489742783178}, "nnetsauce.deep.DeepRegressor": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.mts.MTS.score": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.449489742783178}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2.449489742783178}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.449489742783178}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 56, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.Base": {"tf": 1.7320508075688772}, "nnetsauce.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1.4142135623730951}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.fit": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.MTS.score": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 2}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1.7320508075688772}, "nnetsauce.base.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.score": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 2.23606797749979}}, "df": 170}}}, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}}, "df": 12}}}}, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}}, "df": 2, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}}, "df": 5}}}}}}}}}, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}}, "e": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 5}}}, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.utils.delete_last_columns": {"tf": 1}}, "df": 46, "s": {"docs": {"nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 1}}}}, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 2}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 31}}, "i": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.CustomClassifier": {"tf": 2}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MTS.plot": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 2.6457513110645907}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 2.6457513110645907}, "nnetsauce.RandomBagClassifier": {"tf": 2.449489742783178}, "nnetsauce.Ridge2Classifier": {"tf": 2.449489742783178}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.custom.CustomClassifier": {"tf": 2}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.plot": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.6457513110645907}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 2.6457513110645907}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.449489742783178}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.449489742783178}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.utils.TimeSeriesSplit": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}, "nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 31}}}, "o": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.fit": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.fit": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 2}, "nnetsauce.LazyClassifier.fit": {"tf": 1}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 2.449489742783178}, "nnetsauce.LazyRegressor.fit": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 2.6457513110645907}, "nnetsauce.LazyMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 2.449489742783178}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 2.449489742783178}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MTS.fit": {"tf": 2.23606797749979}, "nnetsauce.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer.fit": {"tf": 2}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.cook_test_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 2.6457513110645907}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2.449489742783178}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 2.6457513110645907}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.fit": {"tf": 2.23606797749979}, "nnetsauce.mts.MTS.predict": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 2}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_base.TestBase": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 2.23606797749979}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 2.23606797749979}, "nnetsauce.utils.delete_last_columns": {"tf": 1.4142135623730951}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1.4142135623730951}, "nnetsauce.utils.nearestPD": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}}, "df": 281, "p": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 6}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}}}}}}}, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}}, "df": 1}}}}, "b": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 4}}, "w": {"docs": {}, "df": 0, "o": {"docs": {"nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 2}}}, "h": {"docs": {"nnetsauce.MTS.predict": {"tf": 2.23606797749979}, "nnetsauce.mts.MTS.predict": {"tf": 2.23606797749979}}, "df": 2, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.23606797749979}, "nnetsauce.Base": {"tf": 2.23606797749979}, "nnetsauce.Base.create_layer": {"tf": 2}, "nnetsauce.Base.cook_training_set": {"tf": 2.23606797749979}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 2.23606797749979}, "nnetsauce.BayesianRVFLRegressor": {"tf": 2}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 2}, "nnetsauce.CustomClassifier": {"tf": 2.449489742783178}, "nnetsauce.CustomRegressor": {"tf": 2}, "nnetsauce.DeepMTS": {"tf": 2.449489742783178}, "nnetsauce.GLMClassifier": {"tf": 2}, "nnetsauce.GLMRegressor": {"tf": 2}, "nnetsauce.MTS": {"tf": 2.449489742783178}, "nnetsauce.MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.RandomBagRegressor": {"tf": 2}, "nnetsauce.RandomBagClassifier": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Regressor": {"tf": 2.23606797749979}, "nnetsauce.Ridge2Classifier": {"tf": 2.449489742783178}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.base.Base": {"tf": 2.23606797749979}, "nnetsauce.base.Base.create_layer": {"tf": 2}, "nnetsauce.base.Base.cook_training_set": {"tf": 2.23606797749979}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 2.23606797749979}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.23606797749979}, "nnetsauce.custom.Custom": {"tf": 2}, "nnetsauce.custom.CustomClassifier": {"tf": 2.449489742783178}, "nnetsauce.custom.CustomRegressor": {"tf": 2}, "nnetsauce.deep.DeepMTS": {"tf": 2.449489742783178}, "nnetsauce.glm.GLMClassifier": {"tf": 2}, "nnetsauce.glm.GLMRegressor": {"tf": 2}, "nnetsauce.mts.MTS": {"tf": 2.449489742783178}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.23606797749979}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.449489742783178}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 2.23606797749979}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 2}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 2}}, "df": 41}}}}, "g": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 1, "a": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}}}}}, "y": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}}}}}}}}}}}, "a": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}}}}}}, "l": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}}, "s": {"docs": {"nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}}, "df": 2, "n": {"docs": {"nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}}, "df": 4}}, "t": {"docs": {}, "df": 0, "{": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1}}, "df": 1}, "q": {"docs": {"nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 1}}}, "v": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}, "o": {"docs": {}, "df": 0, "w": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}}, "df": 39}, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.MTS.predict": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.predict": {"tf": 1.7320508075688772}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 3}}}}}, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}}, "df": 2}}}}}}, "t": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "/": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}}, "df": 16}}}}}}, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}}, "i": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}}}, "w": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "w": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.nearestPD": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 114}}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "m": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "k": {"docs": {}, "df": 0, "i": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}, "m": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 115}}}}, "w": {"docs": {"nnetsauce.Base.create_layer": {"tf": 1.4142135623730951}, "nnetsauce.Base.cook_training_set": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.create_layer": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.cook_training_set": {"tf": 1.4142135623730951}}, "df": 4, "e": {"docs": {"nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}}, "df": 8, "i": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}}, "df": 2}}}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 3}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 3}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1.7320508075688772}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 61, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 35}}}}}, "l": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.7320508075688772}, "nnetsauce.utils.Progbar": {"tf": 1.4142135623730951}, "nnetsauce.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 17}}, "n": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {"nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}}, "df": 1}}}}, "d": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1.4142135623730951}}, "df": 1}}}}, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 2.23606797749979}, "nnetsauce.LazyRegressor": {"tf": 2.23606797749979}, "nnetsauce.LazyMTS": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepClassifier": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepRegressor": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepMTS": {"tf": 2.23606797749979}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyMTS": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 2.23606797749979}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.7320508075688772}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.7320508075688772}, "nnetsauce.utils.isPD": {"tf": 1}}, "df": 71}, "r": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 2}, "nnetsauce.LazyClassifier.provide_models": {"tf": 2}, "nnetsauce.LazyRegressor.fit": {"tf": 2}, "nnetsauce.LazyRegressor.provide_models": {"tf": 2}, "nnetsauce.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 2}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 2}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 133}}, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 131}}}}}, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.utils.nearestPD": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}}, "df": 133}}}, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}}}, "r": {"docs": {}, "df": 0, "k": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}}}, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 10, "s": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.7320508075688772}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 12}}}}}}}}, "u": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 2}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 2}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}}, "df": 35}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 4}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Downloader": {"tf": 1}, "nnetsauce.Downloader.download": {"tf": 1}, "nnetsauce.datasets.Downloader": {"tf": 1}, "nnetsauce.datasets.Downloader.download": {"tf": 1}}, "df": 4}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2}}}}, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 12}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}}, "df": 2, "l": {"docs": {}, "df": 0, "y": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.nonconformist.RegressorNc": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}}, "df": 2}}}}}}}}, "k": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "w": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}}, "df": 1}}}}}}, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 8, "d": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 2.23606797749979}, "nnetsauce.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepMTS": {"tf": 1.7320508075688772}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1.4142135623730951}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1.4142135623730951}}, "df": 72}, "s": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}, "r": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}, "nnetsauce.utils.convert_df_to_numeric": {"tf": 1}}, "df": 32}}}}, "p": {"docs": {"nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 15, "p": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}}, "df": 6}}}, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}}, "df": 1, "s": {"docs": {"nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}}, "df": 4}}}}}, "k": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 37, "m": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}}, "df": 37}}}}}, "w": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}}, "df": 102}}}}}, "e": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}}, "df": 12, "s": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}}, "df": 113}, "w": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}, "r": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.CustomRegressor": {"tf": 2.23606797749979}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 2.23606797749979}, "nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 2.23606797749979}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 2.23606797749979}, "nnetsauce.mts.MTS.fit": {"tf": 1}}, "df": 8, "d": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.MTS.fit": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1}}, "df": 2}}}}}}}}}}}}, "d": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.MTS": {"tf": 1.7320508075688772}, "nnetsauce.PredictionInterval": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1.7320508075688772}, "nnetsauce.predictioninterval.PredictionInterval": {"tf": 1}}, "df": 6}}}, "g": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1.4142135623730951}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1.4142135623730951}}, "df": 113, "m": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.Base": {"tf": 1.4142135623730951}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.base.Base": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.7320508075688772}, "nnetsauce.custom.Custom": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.7320508075688772}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.7320508075688772}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1.4142135623730951}}, "df": 37}}, "a": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 2}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 2}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 41, "p": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}}, "df": 4}}}}}}}}}}}}}}}}}}}}}}}, "p": {"docs": {}, "df": 0, "u": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 31}}, "c": {"docs": {}, "df": 0, "v": {"docs": {"nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 6}}, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "z": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "d": {"docs": {"nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 10}}}}}, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 1}}}}}}, "t": {"docs": {"nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}}, "df": 4, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}, "t": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 5.291502622129181}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 5.291502622129181}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 7.14142842854285}}, "df": 9}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "b": {"docs": {"nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}}, "df": 4}}}}}, "l": {"docs": {}, "df": 0, "m": {"docs": {"nnetsauce.GLMClassifier": {"tf": 2}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 2}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 2}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 2}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}}, "df": 10}}, "r": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.Optimizer": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer": {"tf": 1.7320508075688772}}, "df": 2}}}}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "h": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "v": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}}}}}}, "o": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "p": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 1}}}}}, "u": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}}}, "v": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1}, "nnetsauce.Base": {"tf": 1}, "nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.CustomClassifier": {"tf": 1}, "nnetsauce.CustomRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MultitaskClassifier": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.base.Base": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1}, "nnetsauce.custom.Custom": {"tf": 1}, "nnetsauce.custom.CustomClassifier": {"tf": 1}, "nnetsauce.custom.CustomRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 37}}}, "n": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.Base.score": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}}, "df": 6}}}}}}, "l": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 1.4142135623730951}, "nnetsauce.utils.Progbar.update": {"tf": 1.4142135623730951}}, "df": 20, "s": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1.4142135623730951}, "nnetsauce.utils.Progbar.update": {"tf": 1}}, "df": 56}}}, "i": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.BaseRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1.7320508075688772}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 8}}}, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.utils.TimeSeriesSplit": {"tf": 1}}, "df": 1}}}}}}}}, "e": {"docs": {}, "df": 0, "r": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier": {"tf": 1}, "nnetsauce.DeepRegressor": {"tf": 1}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier": {"tf": 1}, "nnetsauce.deep.DeepRegressor": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1.7320508075688772}}, "df": 31}, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}, "nnetsauce.utils.Progbar": {"tf": 1}}, "df": 15}}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.Base.set_score_request": {"tf": 1}, "nnetsauce.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.MTS.set_fit_request": {"tf": 1}, "nnetsauce.MTS.set_predict_request": {"tf": 1}, "nnetsauce.MTS.set_score_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.base.Base.set_score_request": {"tf": 1}, "nnetsauce.base.BaseRegressor.set_score_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_fit_request": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.Custom.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomClassifier.set_score_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_fit_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_predict_request": {"tf": 1}, "nnetsauce.custom.CustomRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.deep.DeepMTS.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMClassifier.set_score_request": {"tf": 1}, "nnetsauce.glm.GLMRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS.set_score_request": {"tf": 1}, "nnetsauce.mts.MTS.set_fit_request": {"tf": 1}, "nnetsauce.mts.MTS.set_predict_request": {"tf": 1}, "nnetsauce.mts.MTS.set_score_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_predict_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNc.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer.set_score_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_fit_request": {"tf": 1}, "nnetsauce.nonconformist.IcpRegressor.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_predict_request": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.set_score_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_predict_request": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.set_score_request": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.set_split_request": {"tf": 1}}, "df": 113}}}}}, "c": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.base.BaseRegressor": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}}, "df": 10, "s": {"docs": {"nnetsauce.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1}, "nnetsauce.BaseRegressor.fit": {"tf": 1}, "nnetsauce.BaseRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1}, "nnetsauce.CustomClassifier.fit": {"tf": 1}, "nnetsauce.CustomClassifier.predict": {"tf": 1}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.CustomRegressor.fit": {"tf": 1}, "nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict": {"tf": 1}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.DeepClassifier.score": {"tf": 1}, "nnetsauce.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.score": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1}, "nnetsauce.GLMClassifier.predict": {"tf": 1}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.GLMRegressor.fit": {"tf": 1}, "nnetsauce.GLMRegressor.predict": {"tf": 1}, "nnetsauce.LazyClassifier.fit": {"tf": 2}, "nnetsauce.LazyClassifier.provide_models": {"tf": 2}, "nnetsauce.LazyRegressor.fit": {"tf": 2}, "nnetsauce.LazyRegressor.provide_models": {"tf": 2}, "nnetsauce.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 2}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 2}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.PredictionInterval.fit": {"tf": 1}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1}}, "df": 130}}}}}, "l": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "y": {"docs": {"nnetsauce.Optimizer": {"tf": 1}, "nnetsauce.optimizers.Optimizer": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "a": {"docs": {"nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.utils.isPD": {"tf": 1}}, "df": 3}, "s": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "l": {"docs": {"nnetsauce.utils.Progbar": {"tf": 1}}, "df": 1}}}}}, "o": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "r": {"docs": {"nnetsauce.RandomBagRegressor": {"tf": 1}, "nnetsauce.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 1}}, "df": 4}}}}}, "z": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 1.4142135623730951}}, "df": 10}, "x": {"0": {"docs": {"nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}}, "df": 2}, "docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Base.encode_clusters": {"tf": 1}, "nnetsauce.Base.create_layer": {"tf": 1}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.cook_test_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 3.1622776601683795}, "nnetsauce.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier": {"tf": 2.449489742783178}, "nnetsauce.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor": {"tf": 2.449489742783178}, "nnetsauce.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 2.8284271247461903}, "nnetsauce.LazyClassifier.fit": {"tf": 2}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 2.8284271247461903}, "nnetsauce.LazyRegressor.fit": {"tf": 2}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyMTS.fit": {"tf": 2}, "nnetsauce.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 2.8284271247461903}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 2.8284271247461903}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 2}, "nnetsauce.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.predict": {"tf": 1}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 2.6457513110645907}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 2.449489742783178}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 2.6457513110645907}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.base.Base.encode_clusters": {"tf": 1}, "nnetsauce.base.Base.create_layer": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.cook_test_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 3.1622776601683795}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier": {"tf": 2.449489742783178}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor": {"tf": 2.449489742783178}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepMTS.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 2.8284271247461903}, "nnetsauce.nonconformist.RegressorNc.predict": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 2.8284271247461903}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 2}, "nnetsauce.nonconformist.IcpRegressor.predict": {"tf": 1}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.predictioninterval.PredictionInterval.predict": {"tf": 1}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.449489742783178}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2.6457513110645907}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.6457513110645907}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor.predict": {"tf": 1.4142135623730951}, "nnetsauce.utils.delete_last_columns": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 173, "r": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "g": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.MTS.fit": {"tf": 2}, "nnetsauce.MTS.predict": {"tf": 1.7320508075688772}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepMTS.fit": {"tf": 1.7320508075688772}, "nnetsauce.mts.MTS": {"tf": 1}, "nnetsauce.mts.MTS.fit": {"tf": 2}, "nnetsauce.mts.MTS.predict": {"tf": 1.7320508075688772}}, "df": 12}}}, "[": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}}, "df": 2}}}}}}}}, "y": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Base.cook_training_set": {"tf": 1}, "nnetsauce.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomClassifier": {"tf": 3.1622776601683795}, "nnetsauce.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier": {"tf": 2.449489742783178}, "nnetsauce.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor": {"tf": 2.449489742783178}, "nnetsauce.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.LazyClassifier": {"tf": 2.8284271247461903}, "nnetsauce.LazyClassifier.fit": {"tf": 2}, "nnetsauce.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyRegressor": {"tf": 2.8284271247461903}, "nnetsauce.LazyRegressor.fit": {"tf": 2}, "nnetsauce.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepClassifier": {"tf": 2.8284271247461903}, "nnetsauce.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.LazyDeepRegressor": {"tf": 2.23606797749979}, "nnetsauce.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.MTS": {"tf": 1.4142135623730951}, "nnetsauce.MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Optimizer.fit": {"tf": 1}, "nnetsauce.RandomBagRegressor": {"tf": 2.6457513110645907}, "nnetsauce.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.RandomBagClassifier": {"tf": 2.449489742783178}, "nnetsauce.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Regressor": {"tf": 1}, "nnetsauce.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier": {"tf": 2.6457513110645907}, "nnetsauce.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.SubSampler": {"tf": 1}, "nnetsauce.base.Base.cook_training_set": {"tf": 1}, "nnetsauce.base.Base.score": {"tf": 1.4142135623730951}, "nnetsauce.base.BaseRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 2.449489742783178}, "nnetsauce.boosting.AdaBoostClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomClassifier": {"tf": 3.1622776601683795}, "nnetsauce.custom.CustomClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.custom.CustomRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier": {"tf": 2.449489742783178}, "nnetsauce.deep.DeepClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepClassifier.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor": {"tf": 2.449489742783178}, "nnetsauce.deep.DeepRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepRegressor.score": {"tf": 1.4142135623730951}, "nnetsauce.deep.DeepMTS": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.glm.GLMRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 2.8284271247461903}, "nnetsauce.lazypredict.LazyDeepClassifier.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 2.23606797749979}, "nnetsauce.lazypredict.LazyDeepRegressor.fit": {"tf": 2}, "nnetsauce.lazypredict.LazyDeepRegressor.provide_models": {"tf": 1.4142135623730951}, "nnetsauce.mts.MTS": {"tf": 1.4142135623730951}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.multitask.MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.multitask.SimpleMultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.AbsErrorErrFunc": {"tf": 1.4142135623730951}, "nnetsauce.nonconformist.AbsErrorErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1.7320508075688772}, "nnetsauce.nonconformist.QuantileRegErrFunc.apply": {"tf": 1}, "nnetsauce.nonconformist.RegressorAdapter": {"tf": 2}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 2}, "nnetsauce.nonconformist.IcpRegressor": {"tf": 1.7320508075688772}, "nnetsauce.optimizers.Optimizer.fit": {"tf": 1}, "nnetsauce.predictioninterval.PredictionInterval.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.449489742783178}, "nnetsauce.randombag.RandomBagClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.randombag.RandomBagRegressor": {"tf": 2.6457513110645907}, "nnetsauce.randombag.RandomBagRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.6457513110645907}, "nnetsauce.ridge2.Ridge2Classifier.loglik": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Classifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2Regressor": {"tf": 1}, "nnetsauce.ridge2.Ridge2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFLRegressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFLRegressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.rvfl.BayesianRVFL2Regressor": {"tf": 1}, "nnetsauce.rvfl.BayesianRVFL2Regressor.fit": {"tf": 1.4142135623730951}, "nnetsauce.sampling.SubSampler": {"tf": 1}, "nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 112, "o": {"docs": {}, "df": 0, "u": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}, "nnetsauce.tests.tests_adaboost.TestAdaBoost": {"tf": 1}, "nnetsauce.tests.tests_base.TestBase": {"tf": 1}, "nnetsauce.tests.tests_custom.TestCustom": {"tf": 1}, "nnetsauce.tests.tests_download.TestDownload": {"tf": 1}, "nnetsauce.tests.tests_lazy_custom.TestLazyCustom": {"tf": 1}, "nnetsauce.tests.tests_model_selection.TS_Split": {"tf": 1}, "nnetsauce.tests.tests_mtask.TestMultitask": {"tf": 1}, "nnetsauce.tests.tests_mts.TestMTS": {"tf": 1}, "nnetsauce.tests.tests_randombag.TestRandomBag": {"tf": 1}, "nnetsauce.tests.tests_ridge.TestRidge": {"tf": 1}, "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor": {"tf": 1}, "nnetsauce.tests.tests_rvfl.TestRVFL": {"tf": 1}, "nnetsauce.tests.tests_simulation.TestSimul": {"tf": 1}, "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit": {"tf": 1}, "nnetsauce.tests.tests_utils.TestUtils": {"tf": 1}}, "df": 19, "r": {"docs": {"nnetsauce.nonconformist.RegressorAdapter": {"tf": 1}, "nnetsauce.nonconformist.RegressorNormalizer": {"tf": 1}}, "df": 2}}}, "e": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.LazyDeepClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier.provide_models": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier.provide_models": {"tf": 1}}, "df": 4}}, "[": {"docs": {}, "df": 0, ":": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}}, "df": 2}}}}}}}, "o": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}}, "df": 2}}}}}}}, "i": {"docs": {}, "df": 0, "e": {"docs": {}, "df": 0, "l": {"docs": {}, "df": 0, "d": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.utils.TimeSeriesSplit.split": {"tf": 1}}, "df": 1}}}}}}, "q": {"docs": {}, "df": 0, "u": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.AdaBoostClassifier": {"tf": 3.1622776601683795}, "nnetsauce.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.Downloader.download": {"tf": 2}, "nnetsauce.MultitaskClassifier": {"tf": 2.8284271247461903}, "nnetsauce.SimpleMultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.RandomBagClassifier": {"tf": 2.449489742783178}, "nnetsauce.Ridge2Classifier": {"tf": 2.8284271247461903}, "nnetsauce.Ridge2MultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.boosting.AdaBoostClassifier": {"tf": 3.1622776601683795}, "nnetsauce.custom.CustomClassifier": {"tf": 1.4142135623730951}, "nnetsauce.datasets.Downloader.download": {"tf": 2}, "nnetsauce.multitask.MultitaskClassifier": {"tf": 2.8284271247461903}, "nnetsauce.multitask.SimpleMultitaskClassifier": {"tf": 2.449489742783178}, "nnetsauce.randombag.RandomBagClassifier": {"tf": 2.449489742783178}, "nnetsauce.ridge2.Ridge2Classifier": {"tf": 2.8284271247461903}, "nnetsauce.ridge2.Ridge2MultitaskClassifier": {"tf": 2.449489742783178}}, "df": 16}}, "a": {"docs": {}, "df": 0, "n": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "f": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "c": {"docs": {}, "df": 0, "a": {"docs": {}, "df": 0, "t": {"docs": {}, "df": 0, "i": {"docs": {}, "df": 0, "o": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.CustomRegressor.predict": {"tf": 1}, "nnetsauce.DeepRegressor.predict": {"tf": 1}, "nnetsauce.custom.CustomRegressor.predict": {"tf": 1}, "nnetsauce.deep.DeepRegressor.predict": {"tf": 1}}, "df": 4}}}}}}}}, "l": {"docs": {}, "df": 0, "e": {"docs": {"nnetsauce.nonconformist.QuantileRegErrFunc": {"tf": 1}}, "df": 1}}}}}, "s": {"docs": {}, "df": 0, "i": {"docs": {"nnetsauce.DeepMTS": {"tf": 1}, "nnetsauce.GLMClassifier": {"tf": 1}, "nnetsauce.GLMRegressor": {"tf": 1}, "nnetsauce.MTS": {"tf": 1}, "nnetsauce.deep.DeepMTS": {"tf": 1}, "nnetsauce.glm.GLMClassifier": {"tf": 1}, "nnetsauce.glm.GLMRegressor": {"tf": 1}, "nnetsauce.mts.MTS": {"tf": 1}}, "df": 8}}}}}, "j": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1, "u": {"docs": {}, "df": 0, "s": {"docs": {}, "df": 0, "t": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}}, "df": 12}}}, "o": {"docs": {}, "df": 0, "b": {"docs": {}, "df": 0, "s": {"docs": {"nnetsauce.LazyClassifier": {"tf": 1}, "nnetsauce.LazyRegressor": {"tf": 1}, "nnetsauce.LazyMTS": {"tf": 1}, "nnetsauce.LazyDeepClassifier": {"tf": 1}, "nnetsauce.LazyDeepRegressor": {"tf": 1}, "nnetsauce.LazyDeepMTS": {"tf": 1}, "nnetsauce.SubSampler": {"tf": 1.4142135623730951}, "nnetsauce.lazypredict.LazyClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyMTS": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepClassifier": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepRegressor": {"tf": 1}, "nnetsauce.lazypredict.LazyDeepMTS": {"tf": 1}, "nnetsauce.sampling.SubSampler": {"tf": 1.4142135623730951}}, "df": 14}}, "h": {"docs": {}, "df": 0, "n": {"docs": {"nnetsauce.utils.nearestPD": {"tf": 1}}, "df": 1}}}}}}}, "pipeline": ["trimmer"], "_isPrebuiltIndex": true};

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();