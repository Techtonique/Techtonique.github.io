window.pdocSearch = (function(){
/** elasticlunr - http://weixsong.github.io * Copyright (C) 2017 Oliver Nightingale * Copyright (C) 2017 Wei Song * MIT Licensed */!function(){function e(e){if(null===e||"object"!=typeof e)return e;var t=e.constructor();for(var n in e)e.hasOwnProperty(n)&&(t[n]=e[n]);return t}var t=function(e){var n=new t.Index;return n.pipeline.add(t.trimmer,t.stopWordFilter,t.stemmer),e&&e.call(n,n),n};t.version="0.9.5",lunr=t,t.utils={},t.utils.warn=function(e){return function(t){e.console&&console.warn&&console.warn(t)}}(this),t.utils.toString=function(e){return void 0===e||null===e?"":e.toString()},t.EventEmitter=function(){this.events={}},t.EventEmitter.prototype.addListener=function(){var e=Array.prototype.slice.call(arguments),t=e.pop(),n=e;if("function"!=typeof t)throw new TypeError("last argument must be a function");n.forEach(function(e){this.hasHandler(e)||(this.events[e]=[]),this.events[e].push(t)},this)},t.EventEmitter.prototype.removeListener=function(e,t){if(this.hasHandler(e)){var n=this.events[e].indexOf(t);-1!==n&&(this.events[e].splice(n,1),0==this.events[e].length&&delete this.events[e])}},t.EventEmitter.prototype.emit=function(e){if(this.hasHandler(e)){var t=Array.prototype.slice.call(arguments,1);this.events[e].forEach(function(e){e.apply(void 0,t)},this)}},t.EventEmitter.prototype.hasHandler=function(e){return e in this.events},t.tokenizer=function(e){if(!arguments.length||null===e||void 0===e)return[];if(Array.isArray(e)){var n=e.filter(function(e){return null===e||void 0===e?!1:!0});n=n.map(function(e){return t.utils.toString(e).toLowerCase()});var i=[];return n.forEach(function(e){var n=e.split(t.tokenizer.seperator);i=i.concat(n)},this),i}return e.toString().trim().toLowerCase().split(t.tokenizer.seperator)},t.tokenizer.defaultSeperator=/[\s\-]+/,t.tokenizer.seperator=t.tokenizer.defaultSeperator,t.tokenizer.setSeperator=function(e){null!==e&&void 0!==e&&"object"==typeof e&&(t.tokenizer.seperator=e)},t.tokenizer.resetSeperator=function(){t.tokenizer.seperator=t.tokenizer.defaultSeperator},t.tokenizer.getSeperator=function(){return t.tokenizer.seperator},t.Pipeline=function(){this._queue=[]},t.Pipeline.registeredFunctions={},t.Pipeline.registerFunction=function(e,n){n in t.Pipeline.registeredFunctions&&t.utils.warn("Overwriting existing registered function: "+n),e.label=n,t.Pipeline.registeredFunctions[n]=e},t.Pipeline.getRegisteredFunction=function(e){return e in t.Pipeline.registeredFunctions!=!0?null:t.Pipeline.registeredFunctions[e]},t.Pipeline.warnIfFunctionNotRegistered=function(e){var n=e.label&&e.label in this.registeredFunctions;n||t.utils.warn("Function is not registered with pipeline. This may cause problems when serialising the index.\n",e)},t.Pipeline.load=function(e){var n=new t.Pipeline;return e.forEach(function(e){var i=t.Pipeline.getRegisteredFunction(e);if(!i)throw new Error("Cannot load un-registered function: "+e);n.add(i)}),n},t.Pipeline.prototype.add=function(){var e=Array.prototype.slice.call(arguments);e.forEach(function(e){t.Pipeline.warnIfFunctionNotRegistered(e),this._queue.push(e)},this)},t.Pipeline.prototype.after=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i+1,0,n)},t.Pipeline.prototype.before=function(e,n){t.Pipeline.warnIfFunctionNotRegistered(n);var i=this._queue.indexOf(e);if(-1===i)throw new Error("Cannot find existingFn");this._queue.splice(i,0,n)},t.Pipeline.prototype.remove=function(e){var t=this._queue.indexOf(e);-1!==t&&this._queue.splice(t,1)},t.Pipeline.prototype.run=function(e){for(var t=[],n=e.length,i=this._queue.length,o=0;n>o;o++){for(var r=e[o],s=0;i>s&&(r=this._queue[s](r,o,e),void 0!==r&&null!==r);s++);void 0!==r&&null!==r&&t.push(r)}return t},t.Pipeline.prototype.reset=function(){this._queue=[]},t.Pipeline.prototype.get=function(){return this._queue},t.Pipeline.prototype.toJSON=function(){return this._queue.map(function(e){return t.Pipeline.warnIfFunctionNotRegistered(e),e.label})},t.Index=function(){this._fields=[],this._ref="id",this.pipeline=new t.Pipeline,this.documentStore=new t.DocumentStore,this.index={},this.eventEmitter=new t.EventEmitter,this._idfCache={},this.on("add","remove","update",function(){this._idfCache={}}.bind(this))},t.Index.prototype.on=function(){var e=Array.prototype.slice.call(arguments);return this.eventEmitter.addListener.apply(this.eventEmitter,e)},t.Index.prototype.off=function(e,t){return this.eventEmitter.removeListener(e,t)},t.Index.load=function(e){e.version!==t.version&&t.utils.warn("version mismatch: current "+t.version+" importing "+e.version);var n=new this;n._fields=e.fields,n._ref=e.ref,n.documentStore=t.DocumentStore.load(e.documentStore),n.pipeline=t.Pipeline.load(e.pipeline),n.index={};for(var i in e.index)n.index[i]=t.InvertedIndex.load(e.index[i]);return n},t.Index.prototype.addField=function(e){return this._fields.push(e),this.index[e]=new t.InvertedIndex,this},t.Index.prototype.setRef=function(e){return this._ref=e,this},t.Index.prototype.saveDocument=function(e){return this.documentStore=new t.DocumentStore(e),this},t.Index.prototype.addDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.addDoc(i,e),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));this.documentStore.addFieldLength(i,n,o.length);var r={};o.forEach(function(e){e in r?r[e]+=1:r[e]=1},this);for(var s in r){var u=r[s];u=Math.sqrt(u),this.index[n].addToken(s,{ref:i,tf:u})}},this),n&&this.eventEmitter.emit("add",e,this)}},t.Index.prototype.removeDocByRef=function(e){if(e&&this.documentStore.isDocStored()!==!1&&this.documentStore.hasDoc(e)){var t=this.documentStore.getDoc(e);this.removeDoc(t,!1)}},t.Index.prototype.removeDoc=function(e,n){if(e){var n=void 0===n?!0:n,i=e[this._ref];this.documentStore.hasDoc(i)&&(this.documentStore.removeDoc(i),this._fields.forEach(function(n){var o=this.pipeline.run(t.tokenizer(e[n]));o.forEach(function(e){this.index[n].removeToken(e,i)},this)},this),n&&this.eventEmitter.emit("remove",e,this))}},t.Index.prototype.updateDoc=function(e,t){var t=void 0===t?!0:t;this.removeDocByRef(e[this._ref],!1),this.addDoc(e,!1),t&&this.eventEmitter.emit("update",e,this)},t.Index.prototype.idf=function(e,t){var n="@"+t+"/"+e;if(Object.prototype.hasOwnProperty.call(this._idfCache,n))return this._idfCache[n];var i=this.index[t].getDocFreq(e),o=1+Math.log(this.documentStore.length/(i+1));return this._idfCache[n]=o,o},t.Index.prototype.getFields=function(){return this._fields.slice()},t.Index.prototype.search=function(e,n){if(!e)return[];e="string"==typeof e?{any:e}:JSON.parse(JSON.stringify(e));var i=null;null!=n&&(i=JSON.stringify(n));for(var o=new t.Configuration(i,this.getFields()).get(),r={},s=Object.keys(e),u=0;u<s.length;u++){var a=s[u];r[a]=this.pipeline.run(t.tokenizer(e[a]))}var l={};for(var c in o){var d=r[c]||r.any;if(d){var f=this.fieldSearch(d,c,o),h=o[c].boost;for(var p in f)f[p]=f[p]*h;for(var p in f)p in l?l[p]+=f[p]:l[p]=f[p]}}var v,g=[];for(var p in l)v={ref:p,score:l[p]},this.documentStore.hasDoc(p)&&(v.doc=this.documentStore.getDoc(p)),g.push(v);return g.sort(function(e,t){return t.score-e.score}),g},t.Index.prototype.fieldSearch=function(e,t,n){var i=n[t].bool,o=n[t].expand,r=n[t].boost,s=null,u={};return 0!==r?(e.forEach(function(e){var n=[e];1==o&&(n=this.index[t].expandToken(e));var r={};n.forEach(function(n){var o=this.index[t].getDocs(n),a=this.idf(n,t);if(s&&"AND"==i){var l={};for(var c in s)c in o&&(l[c]=o[c]);o=l}n==e&&this.fieldSearchStats(u,n,o);for(var c in o){var d=this.index[t].getTermFrequency(n,c),f=this.documentStore.getFieldLength(c,t),h=1;0!=f&&(h=1/Math.sqrt(f));var p=1;n!=e&&(p=.15*(1-(n.length-e.length)/n.length));var v=d*a*h*p;c in r?r[c]+=v:r[c]=v}},this),s=this.mergeScores(s,r,i)},this),s=this.coordNorm(s,u,e.length)):void 0},t.Index.prototype.mergeScores=function(e,t,n){if(!e)return t;if("AND"==n){var i={};for(var o in t)o in e&&(i[o]=e[o]+t[o]);return i}for(var o in t)o in e?e[o]+=t[o]:e[o]=t[o];return e},t.Index.prototype.fieldSearchStats=function(e,t,n){for(var i in n)i in e?e[i].push(t):e[i]=[t]},t.Index.prototype.coordNorm=function(e,t,n){for(var i in e)if(i in t){var o=t[i].length;e[i]=e[i]*o/n}return e},t.Index.prototype.toJSON=function(){var e={};return this._fields.forEach(function(t){e[t]=this.index[t].toJSON()},this),{version:t.version,fields:this._fields,ref:this._ref,documentStore:this.documentStore.toJSON(),index:e,pipeline:this.pipeline.toJSON()}},t.Index.prototype.use=function(e){var t=Array.prototype.slice.call(arguments,1);t.unshift(this),e.apply(this,t)},t.DocumentStore=function(e){this._save=null===e||void 0===e?!0:e,this.docs={},this.docInfo={},this.length=0},t.DocumentStore.load=function(e){var t=new this;return t.length=e.length,t.docs=e.docs,t.docInfo=e.docInfo,t._save=e.save,t},t.DocumentStore.prototype.isDocStored=function(){return this._save},t.DocumentStore.prototype.addDoc=function(t,n){this.hasDoc(t)||this.length++,this.docs[t]=this._save===!0?e(n):null},t.DocumentStore.prototype.getDoc=function(e){return this.hasDoc(e)===!1?null:this.docs[e]},t.DocumentStore.prototype.hasDoc=function(e){return e in this.docs},t.DocumentStore.prototype.removeDoc=function(e){this.hasDoc(e)&&(delete this.docs[e],delete this.docInfo[e],this.length--)},t.DocumentStore.prototype.addFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&(this.docInfo[e]||(this.docInfo[e]={}),this.docInfo[e][t]=n)},t.DocumentStore.prototype.updateFieldLength=function(e,t,n){null!==e&&void 0!==e&&0!=this.hasDoc(e)&&this.addFieldLength(e,t,n)},t.DocumentStore.prototype.getFieldLength=function(e,t){return null===e||void 0===e?0:e in this.docs&&t in this.docInfo[e]?this.docInfo[e][t]:0},t.DocumentStore.prototype.toJSON=function(){return{docs:this.docs,docInfo:this.docInfo,length:this.length,save:this._save}},t.stemmer=function(){var e={ational:"ate",tional:"tion",enci:"ence",anci:"ance",izer:"ize",bli:"ble",alli:"al",entli:"ent",eli:"e",ousli:"ous",ization:"ize",ation:"ate",ator:"ate",alism:"al",iveness:"ive",fulness:"ful",ousness:"ous",aliti:"al",iviti:"ive",biliti:"ble",logi:"log"},t={icate:"ic",ative:"",alize:"al",iciti:"ic",ical:"ic",ful:"",ness:""},n="[^aeiou]",i="[aeiouy]",o=n+"[^aeiouy]*",r=i+"[aeiou]*",s="^("+o+")?"+r+o,u="^("+o+")?"+r+o+"("+r+")?$",a="^("+o+")?"+r+o+r+o,l="^("+o+")?"+i,c=new RegExp(s),d=new RegExp(a),f=new RegExp(u),h=new RegExp(l),p=/^(.+?)(ss|i)es$/,v=/^(.+?)([^s])s$/,g=/^(.+?)eed$/,m=/^(.+?)(ed|ing)$/,y=/.$/,S=/(at|bl|iz)$/,x=new RegExp("([^aeiouylsz])\\1$"),w=new RegExp("^"+o+i+"[^aeiouwxy]$"),I=/^(.+?[^aeiou])y$/,b=/^(.+?)(ational|tional|enci|anci|izer|bli|alli|entli|eli|ousli|ization|ation|ator|alism|iveness|fulness|ousness|aliti|iviti|biliti|logi)$/,E=/^(.+?)(icate|ative|alize|iciti|ical|ful|ness)$/,D=/^(.+?)(al|ance|ence|er|ic|able|ible|ant|ement|ment|ent|ou|ism|ate|iti|ous|ive|ize)$/,F=/^(.+?)(s|t)(ion)$/,_=/^(.+?)e$/,P=/ll$/,k=new RegExp("^"+o+i+"[^aeiouwxy]$"),z=function(n){var i,o,r,s,u,a,l;if(n.length<3)return n;if(r=n.substr(0,1),"y"==r&&(n=r.toUpperCase()+n.substr(1)),s=p,u=v,s.test(n)?n=n.replace(s,"$1$2"):u.test(n)&&(n=n.replace(u,"$1$2")),s=g,u=m,s.test(n)){var z=s.exec(n);s=c,s.test(z[1])&&(s=y,n=n.replace(s,""))}else if(u.test(n)){var z=u.exec(n);i=z[1],u=h,u.test(i)&&(n=i,u=S,a=x,l=w,u.test(n)?n+="e":a.test(n)?(s=y,n=n.replace(s,"")):l.test(n)&&(n+="e"))}if(s=I,s.test(n)){var z=s.exec(n);i=z[1],n=i+"i"}if(s=b,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+e[o])}if(s=E,s.test(n)){var z=s.exec(n);i=z[1],o=z[2],s=c,s.test(i)&&(n=i+t[o])}if(s=D,u=F,s.test(n)){var z=s.exec(n);i=z[1],s=d,s.test(i)&&(n=i)}else if(u.test(n)){var z=u.exec(n);i=z[1]+z[2],u=d,u.test(i)&&(n=i)}if(s=_,s.test(n)){var z=s.exec(n);i=z[1],s=d,u=f,a=k,(s.test(i)||u.test(i)&&!a.test(i))&&(n=i)}return s=P,u=d,s.test(n)&&u.test(n)&&(s=y,n=n.replace(s,"")),"y"==r&&(n=r.toLowerCase()+n.substr(1)),n};return z}(),t.Pipeline.registerFunction(t.stemmer,"stemmer"),t.stopWordFilter=function(e){return e&&t.stopWordFilter.stopWords[e]!==!0?e:void 0},t.clearStopWords=function(){t.stopWordFilter.stopWords={}},t.addStopWords=function(e){null!=e&&Array.isArray(e)!==!1&&e.forEach(function(e){t.stopWordFilter.stopWords[e]=!0},this)},t.resetStopWords=function(){t.stopWordFilter.stopWords=t.defaultStopWords},t.defaultStopWords={"":!0,a:!0,able:!0,about:!0,across:!0,after:!0,all:!0,almost:!0,also:!0,am:!0,among:!0,an:!0,and:!0,any:!0,are:!0,as:!0,at:!0,be:!0,because:!0,been:!0,but:!0,by:!0,can:!0,cannot:!0,could:!0,dear:!0,did:!0,"do":!0,does:!0,either:!0,"else":!0,ever:!0,every:!0,"for":!0,from:!0,get:!0,got:!0,had:!0,has:!0,have:!0,he:!0,her:!0,hers:!0,him:!0,his:!0,how:!0,however:!0,i:!0,"if":!0,"in":!0,into:!0,is:!0,it:!0,its:!0,just:!0,least:!0,let:!0,like:!0,likely:!0,may:!0,me:!0,might:!0,most:!0,must:!0,my:!0,neither:!0,no:!0,nor:!0,not:!0,of:!0,off:!0,often:!0,on:!0,only:!0,or:!0,other:!0,our:!0,own:!0,rather:!0,said:!0,say:!0,says:!0,she:!0,should:!0,since:!0,so:!0,some:!0,than:!0,that:!0,the:!0,their:!0,them:!0,then:!0,there:!0,these:!0,they:!0,"this":!0,tis:!0,to:!0,too:!0,twas:!0,us:!0,wants:!0,was:!0,we:!0,were:!0,what:!0,when:!0,where:!0,which:!0,"while":!0,who:!0,whom:!0,why:!0,will:!0,"with":!0,would:!0,yet:!0,you:!0,your:!0},t.stopWordFilter.stopWords=t.defaultStopWords,t.Pipeline.registerFunction(t.stopWordFilter,"stopWordFilter"),t.trimmer=function(e){if(null===e||void 0===e)throw new Error("token should not be undefined");return e.replace(/^\W+/,"").replace(/\W+$/,"")},t.Pipeline.registerFunction(t.trimmer,"trimmer"),t.InvertedIndex=function(){this.root={docs:{},df:0}},t.InvertedIndex.load=function(e){var t=new this;return t.root=e.root,t},t.InvertedIndex.prototype.addToken=function(e,t,n){for(var n=n||this.root,i=0;i<=e.length-1;){var o=e[i];o in n||(n[o]={docs:{},df:0}),i+=1,n=n[o]}var r=t.ref;n.docs[r]?n.docs[r]={tf:t.tf}:(n.docs[r]={tf:t.tf},n.df+=1)},t.InvertedIndex.prototype.hasToken=function(e){if(!e)return!1;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return!1;t=t[e[n]]}return!0},t.InvertedIndex.prototype.getNode=function(e){if(!e)return null;for(var t=this.root,n=0;n<e.length;n++){if(!t[e[n]])return null;t=t[e[n]]}return t},t.InvertedIndex.prototype.getDocs=function(e){var t=this.getNode(e);return null==t?{}:t.docs},t.InvertedIndex.prototype.getTermFrequency=function(e,t){var n=this.getNode(e);return null==n?0:t in n.docs?n.docs[t].tf:0},t.InvertedIndex.prototype.getDocFreq=function(e){var t=this.getNode(e);return null==t?0:t.df},t.InvertedIndex.prototype.removeToken=function(e,t){if(e){var n=this.getNode(e);null!=n&&t in n.docs&&(delete n.docs[t],n.df-=1)}},t.InvertedIndex.prototype.expandToken=function(e,t,n){if(null==e||""==e)return[];var t=t||[];if(void 0==n&&(n=this.getNode(e),null==n))return t;n.df>0&&t.push(e);for(var i in n)"docs"!==i&&"df"!==i&&this.expandToken(e+i,t,n[i]);return t},t.InvertedIndex.prototype.toJSON=function(){return{root:this.root}},t.Configuration=function(e,n){var e=e||"";if(void 0==n||null==n)throw new Error("fields should not be null");this.config={};var i;try{i=JSON.parse(e),this.buildUserConfig(i,n)}catch(o){t.utils.warn("user configuration parse failed, will use default configuration"),this.buildDefaultConfig(n)}},t.Configuration.prototype.buildDefaultConfig=function(e){this.reset(),e.forEach(function(e){this.config[e]={boost:1,bool:"OR",expand:!1}},this)},t.Configuration.prototype.buildUserConfig=function(e,n){var i="OR",o=!1;if(this.reset(),"bool"in e&&(i=e.bool||i),"expand"in e&&(o=e.expand||o),"fields"in e)for(var r in e.fields)if(n.indexOf(r)>-1){var s=e.fields[r],u=o;void 0!=s.expand&&(u=s.expand),this.config[r]={boost:s.boost||0===s.boost?s.boost:1,bool:s.bool||i,expand:u}}else t.utils.warn("field name in user configuration not found in index instance fields");else this.addAllFields2UserConfig(i,o,n)},t.Configuration.prototype.addAllFields2UserConfig=function(e,t,n){n.forEach(function(n){this.config[n]={boost:1,bool:e,expand:t}},this)},t.Configuration.prototype.get=function(){return this.config},t.Configuration.prototype.reset=function(){this.config={}},lunr.SortedSet=function(){this.length=0,this.elements=[]},lunr.SortedSet.load=function(e){var t=new this;return t.elements=e,t.length=e.length,t},lunr.SortedSet.prototype.add=function(){var e,t;for(e=0;e<arguments.length;e++)t=arguments[e],~this.indexOf(t)||this.elements.splice(this.locationFor(t),0,t);this.length=this.elements.length},lunr.SortedSet.prototype.toArray=function(){return this.elements.slice()},lunr.SortedSet.prototype.map=function(e,t){return this.elements.map(e,t)},lunr.SortedSet.prototype.forEach=function(e,t){return this.elements.forEach(e,t)},lunr.SortedSet.prototype.indexOf=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;){if(r===e)return o;e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o]}return r===e?o:-1},lunr.SortedSet.prototype.locationFor=function(e){for(var t=0,n=this.elements.length,i=n-t,o=t+Math.floor(i/2),r=this.elements[o];i>1;)e>r&&(t=o),r>e&&(n=o),i=n-t,o=t+Math.floor(i/2),r=this.elements[o];return r>e?o:e>r?o+1:void 0},lunr.SortedSet.prototype.intersect=function(e){for(var t=new lunr.SortedSet,n=0,i=0,o=this.length,r=e.length,s=this.elements,u=e.elements;;){if(n>o-1||i>r-1)break;s[n]!==u[i]?s[n]<u[i]?n++:s[n]>u[i]&&i++:(t.add(s[n]),n++,i++)}return t},lunr.SortedSet.prototype.clone=function(){var e=new lunr.SortedSet;return e.elements=this.toArray(),e.length=e.elements.length,e},lunr.SortedSet.prototype.union=function(e){var t,n,i;this.length>=e.length?(t=this,n=e):(t=e,n=this),i=t.clone();for(var o=0,r=n.toArray();o<r.length;o++)i.add(r[o]);return i},lunr.SortedSet.prototype.toJSON=function(){return this.toArray()},function(e,t){"function"==typeof define&&define.amd?define(t):"object"==typeof exports?module.exports=t():e.elasticlunr=t()}(this,function(){return t})}();
    /** pdoc search index */const docs = [{"fullname": "nnetsauce", "modulename": "nnetsauce", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.AdaBoostClassifier", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier", "kind": "class", "doc": "<p>AdaBoost Classification (SAMME) model class derived from class Boosting</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_estimators: int\n    number of boosting iterations\n\nlearning_rate: float\n    learning rate of the boosting procedure\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nreg_lambda: float\n    regularization parameter for weights\n\nreg_alpha: float\n    controls compromize between l1 and l2 norm of weights\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nmethod: str\n    type of Adaboost method, 'SAMME' (discrete) or 'SAMME.R' (real)\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>alpha_: list\n    AdaBoost coefficients alpha_m\n\nbase_learners_: dict\n    a dictionary containing the base learners\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/adaboost_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/adaboost_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LogisticRegression</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># SAMME.R</span>\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">LogisticRegression</span><span class=\"p\">(</span><span class=\"n\">solver</span><span class=\"o\">=</span><span class=\"s1\">&#39;liblinear&#39;</span><span class=\"p\">,</span> <span class=\"n\">multi_class</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ovr&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">AdaBoostClassifier</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span>\n                                <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">11.22338867</span><span class=\"p\">),</span>\n                                <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                <span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.01126343</span><span class=\"p\">,</span>\n                                <span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mf\">0.72684326</span><span class=\"p\">,</span> <span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mf\">0.86429443</span><span class=\"p\">,</span>\n                                <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">0.63078613</span><span class=\"p\">,</span> <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                                <span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s2\">&quot;gmm&quot;</span><span class=\"p\">,</span>\n                                <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n                                <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s2\">&quot;SAMME.R&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.boosting.bst.Boosting, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.AdaBoostClassifier.__init__", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">reg_lambda</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">reg_alpha</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;SAMME&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.AdaBoostClassifier.type_fit", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.AdaBoostClassifier.verbose", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.AdaBoostClassifier.method", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.method", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.AdaBoostClassifier.reg_lambda", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.reg_lambda", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.AdaBoostClassifier.reg_alpha", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.reg_alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.AdaBoostClassifier.alpha_", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.alpha_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.AdaBoostClassifier.base_learners_", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.base_learners_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.AdaBoostClassifier.fit", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.fit", "kind": "function", "doc": "<p>Fit Boosting model to training data (X, y).</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code> self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.AdaBoostClassifier.predict", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n      self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.AdaBoostClassifier.predict_proba", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n      self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.AdaBoostClassifier.score", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('accuracy', 'average_precision',\n               'brier_score_loss', 'f1', 'f1_micro',\n               'f1_macro', 'f1_weighted',  'f1_samples',\n               'neg_log_loss', 'precision', 'recall',\n               'roc_auc')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.AdaBoostClassifier.set_fit_request", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.AdaBoostClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "AdaBoostClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Base", "modulename": "nnetsauce", "qualname": "Base", "kind": "class", "doc": "<p>Base model from which all the other classes inherit.</p>\n\n<p>This class contains the most important data preprocessing/feature engineering methods.</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for hidden layer nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or\n    not (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original features are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for type_clust='kmeans' or type_clust='gmm'\n    clustering (could be 0: no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot);\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax') or robust scaling ('robust')\n\ncol_sample: float\n    percentage of features randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform', clustering and dropout\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n", "bases": "sklearn.base.BaseEstimator"}, {"fullname": "nnetsauce.Base.__init__", "modulename": "nnetsauce", "qualname": "Base.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.Base.n_hidden_features", "modulename": "nnetsauce", "qualname": "Base.n_hidden_features", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.activation_name", "modulename": "nnetsauce", "qualname": "Base.activation_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.a", "modulename": "nnetsauce", "qualname": "Base.a", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.nodes_sim", "modulename": "nnetsauce", "qualname": "Base.nodes_sim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.bias", "modulename": "nnetsauce", "qualname": "Base.bias", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.seed", "modulename": "nnetsauce", "qualname": "Base.seed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.backend", "modulename": "nnetsauce", "qualname": "Base.backend", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.dropout", "modulename": "nnetsauce", "qualname": "Base.dropout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.direct_link", "modulename": "nnetsauce", "qualname": "Base.direct_link", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.cluster_encode", "modulename": "nnetsauce", "qualname": "Base.cluster_encode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.type_clust", "modulename": "nnetsauce", "qualname": "Base.type_clust", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.type_scaling", "modulename": "nnetsauce", "qualname": "Base.type_scaling", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.col_sample", "modulename": "nnetsauce", "qualname": "Base.col_sample", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.row_sample", "modulename": "nnetsauce", "qualname": "Base.row_sample", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.n_clusters", "modulename": "nnetsauce", "qualname": "Base.n_clusters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.subsampler_", "modulename": "nnetsauce", "qualname": "Base.subsampler_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.index_col_", "modulename": "nnetsauce", "qualname": "Base.index_col_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.index_row_", "modulename": "nnetsauce", "qualname": "Base.index_row_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.clustering_obj_", "modulename": "nnetsauce", "qualname": "Base.clustering_obj_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.clustering_scaler_", "modulename": "nnetsauce", "qualname": "Base.clustering_scaler_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.nn_scaler_", "modulename": "nnetsauce", "qualname": "Base.nn_scaler_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.scaler_", "modulename": "nnetsauce", "qualname": "Base.scaler_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.encoder_", "modulename": "nnetsauce", "qualname": "Base.encoder_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.W_", "modulename": "nnetsauce", "qualname": "Base.W_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.X_", "modulename": "nnetsauce", "qualname": "Base.X_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.y_", "modulename": "nnetsauce", "qualname": "Base.y_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.y_mean_", "modulename": "nnetsauce", "qualname": "Base.y_mean_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.beta_", "modulename": "nnetsauce", "qualname": "Base.beta_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.activation_func", "modulename": "nnetsauce", "qualname": "Base.activation_func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Base.encode_clusters", "modulename": "nnetsauce", "qualname": "Base.encode_clusters", "kind": "function", "doc": "<p>Create new covariates with kmeans or GMM clustering</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\npredict: boolean\n    is False on training set and True on test set\n\n**kwargs:\n    additional parameters to be passed to the\n    clustering method\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>Clusters' matrix, one-hot encoded: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">predict</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Base.create_layer", "modulename": "nnetsauce", "qualname": "Base.create_layer", "kind": "function", "doc": "<p>Create hidden layer.</p>\n\n<p>Parameters:</p>\n\n<pre><code>scaled_X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\nW: {array-like}, shape = [n_features, hidden_features]\n    if provided, constructs the hidden layer with W; otherwise computed internally\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>Hidden layer matrix: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scaled_X</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Base.cook_training_set", "modulename": "nnetsauce", "qualname": "Base.cook_training_set", "kind": "function", "doc": "<p>Create new hidden features for training set, with hidden layer, center the response.</p>\n\n<p>Parameters:</p>\n\n<pre><code>y: array-like, shape = [n_samples]\n    Target values\n\nX: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\nW: {array-like}, shape = [n_features, hidden_features]\n    if provided, constructs the hidden layer via W\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>(centered response, direct link + hidden layer matrix): {tuple}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Base.cook_test_set", "modulename": "nnetsauce", "qualname": "Base.cook_test_set", "kind": "function", "doc": "<p>Transform data from test set, with hidden layer.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\n**kwargs: additional parameters to be passed to self.encode_cluster\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>Transformed test set : {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.BaseRegressor", "modulename": "nnetsauce", "qualname": "BaseRegressor", "kind": "class", "doc": "<p>Random Vector Functional Link Network regression without shrinkage</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for hidden layer nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or\n    not (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original features are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for type_clust='kmeans' or type_clust='gmm'\n    clustering (could be 0: no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot);\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of features randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform', clustering and dropout\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: vector\n    regression coefficients\n\nGCV_: float\n    Generalized Cross-Validation error\n</code></pre>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.BaseRegressor.__init__", "modulename": "nnetsauce", "qualname": "BaseRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.BaseRegressor.fit", "modulename": "nnetsauce", "qualname": "BaseRegressor.fit", "kind": "function", "doc": "<p>Fit BaseRegressor to training data (X, y)</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\n**kwargs: additional parameters to be passed to self.cook_training_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.BaseRegressor.predict", "modulename": "nnetsauce", "qualname": "BaseRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\n**kwargs: additional parameters to be passed to self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.BaseRegressor.score", "modulename": "nnetsauce", "qualname": "BaseRegressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',\n                'neg_mean_squared_error', 'neg_mean_squared_log_error',\n                'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns:</p>\n\n<p>model scores: {array-like}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.BaseRegressor.set_score_request", "modulename": "nnetsauce", "qualname": "BaseRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.BayesianRVFLRegressor", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor", "kind": "class", "doc": "<p>Bayesian Random Vector Functional Link Network regression with one prior</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton', 'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original features are included (True) in model''s fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0: no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\ns: float\n    std. dev. of regression parameters in Bayesian Ridge Regression\n\nsigma: float\n    std. dev. of residuals in Bayesian Ridge Regression\n\nreturn_std: boolean\n    if True, uncertainty around predictions is evaluated\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: array-like\n    regression''s coefficients\n\nSigma_: array-like\n    covariance of the distribution of fitted parameters\n\nGCV_: float\n    Generalized cross-validation error\n\ny_mean_: float\n    average response\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">TBD</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.BayesianRVFLRegressor.__init__", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.BayesianRVFLRegressor.s", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.s", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.BayesianRVFLRegressor.sigma", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.sigma", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.BayesianRVFLRegressor.beta_", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.beta_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.BayesianRVFLRegressor.Sigma_", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.Sigma_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.BayesianRVFLRegressor.GCV_", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.GCV_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.BayesianRVFLRegressor.return_std", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.return_std", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.BayesianRVFLRegressor.fit", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.fit", "kind": "function", "doc": "<p>Fit BayesianRVFLRegressor to training data (X, y).</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.BayesianRVFLRegressor.predict", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nreturn_std: {boolean}, standard dev. is returned or not\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.BayesianRVFLRegressor.score", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.BayesianRVFLRegressor.set_predict_request", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.BayesianRVFLRegressor.set_score_request", "modulename": "nnetsauce", "qualname": "BayesianRVFLRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.BayesianRVFL2Regressor", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor", "kind": "class", "doc": "<p>Bayesian Random Vector Functional Link Network regression with two priors</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton', 'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original features are included (True) in model''s fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0: no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\ns1: float\n    std. dev. of init. regression parameters in Bayesian Ridge Regression\n\ns2: float\n    std. dev. of augmented regression parameters in Bayesian Ridge Regression\n\nsigma: float\n    std. dev. of residuals in Bayesian Ridge Regression\n\nreturn_std: boolean\n    if True, uncertainty around predictions is evaluated\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: array-like\n    regression''s coefficients\n\nSigma_: array-like\n    covariance of the distribution of fitted parameters\n\nGCV_: float\n    Generalized cross-validation error\n\ny_mean_: float\n    average response\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">TBD</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.BayesianRVFL2Regressor.__init__", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">s1</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">s2</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.BayesianRVFL2Regressor.s1", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.s1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.BayesianRVFL2Regressor.s2", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.s2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.BayesianRVFL2Regressor.sigma", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.sigma", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.BayesianRVFL2Regressor.beta_", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.beta_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.BayesianRVFL2Regressor.Sigma_", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.Sigma_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.BayesianRVFL2Regressor.GCV_", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.GCV_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.BayesianRVFL2Regressor.return_std", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.return_std", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.BayesianRVFL2Regressor.fit", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.fit", "kind": "function", "doc": "<p>Fit BayesianRVFL2Regressor to training data (X, y)</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.BayesianRVFL2Regressor.predict", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nreturn_std: {boolean}, standard dev. is returned or not\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.BayesianRVFL2Regressor.score", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.BayesianRVFL2Regressor.set_predict_request", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.BayesianRVFL2Regressor.set_score_request", "modulename": "nnetsauce", "qualname": "BayesianRVFL2Regressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.CustomClassifier", "modulename": "nnetsauce", "qualname": "CustomClassifier", "kind": "class", "doc": "<p>Custom Classification model</p>\n\n<p>Attributes:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model''s\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.ensemble</span> <span class=\"kn\">import</span> <span class=\"n\">RandomForestClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_digits</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">digits</span> <span class=\"o\">=</span> <span class=\"n\">load_digits</span><span class=\"p\">()</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># layer 1 (base layer) ----</span>\n<span class=\"n\">layer1_regr</span> <span class=\"o\">=</span> <span class=\"n\">RandomForestClassifier</span><span class=\"p\">(</span><span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n\n<span class=\"n\">layer1_regr</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Accuracy in layer 1</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">layer1_regr</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># layer 2 using layer 1 ----</span>\n<span class=\"n\">layer2_regr</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">CustomClassifier</span><span class=\"p\">(</span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">layer1_regr</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                        <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                        <span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;uniform&#39;</span><span class=\"p\">,</span> <span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">layer2_regr</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Accuracy in layer 2</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">layer2_regr</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># layer 3 using layer 2 ----</span>\n<span class=\"n\">layer3_regr</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">CustomClassifier</span><span class=\"p\">(</span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">layer2_regr</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n                        <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">,</span>\n                        <span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;uniform&#39;</span><span class=\"p\">,</span> <span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">layer3_regr</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Accuracy in layer 3</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">layer3_regr</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.CustomClassifier.__init__", "modulename": "nnetsauce", "qualname": "CustomClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.CustomClassifier.type_fit", "modulename": "nnetsauce", "qualname": "CustomClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.CustomClassifier.fit", "modulename": "nnetsauce", "qualname": "CustomClassifier.fit", "kind": "function", "doc": "<p>Fit custom model to training data (X, y).</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n            self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.CustomClassifier.predict", "modulename": "nnetsauce", "qualname": "CustomClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.CustomClassifier.predict_proba", "modulename": "nnetsauce", "qualname": "CustomClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.CustomClassifier.score", "modulename": "nnetsauce", "qualname": "CustomClassifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                     'neg_mean_squared_error', 'neg_mean_squared_log_error',                     'neg_median_absolute_error', 'r2')\n\n**kwargs: \n    additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.CustomClassifier.set_fit_request", "modulename": "nnetsauce", "qualname": "CustomClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.CustomClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "CustomClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.CustomRegressor", "modulename": "nnetsauce", "qualname": "CustomRegressor", "kind": "class", "doc": "<p>Custom Regression model</p>\n\n<p>This class is used to 'augment' any regression model with transformed features.</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\ntype_fit: str\n    'regression'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">TBD</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.CustomRegressor.__init__", "modulename": "nnetsauce", "qualname": "CustomRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.CustomRegressor.type_fit", "modulename": "nnetsauce", "qualname": "CustomRegressor.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.CustomRegressor.fit", "modulename": "nnetsauce", "qualname": "CustomRegressor.fit", "kind": "function", "doc": "<p>Fit custom model to training data (X, y).</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n    self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.CustomRegressor.predict", "modulename": "nnetsauce", "qualname": "CustomRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n    **kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.CustomRegressor.score", "modulename": "nnetsauce", "qualname": "CustomRegressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Parameters: </p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                     'neg_mean_squared_error', 'neg_mean_squared_log_error',                     'neg_median_absolute_error', 'r2')\n\n**kwargs: \n    additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.CustomRegressor.set_fit_request", "modulename": "nnetsauce", "qualname": "CustomRegressor.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.CustomRegressor.set_score_request", "modulename": "nnetsauce", "qualname": "CustomRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.DeepClassifier", "modulename": "nnetsauce", "qualname": "DeepClassifier", "kind": "class", "doc": "<p>Deep Classifier</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>verbose : int, optional (default=0)\n    Monitor progress when fitting.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LogisticRegressionCV</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">LogisticRegressionCV</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">DeepClassifier</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">),</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.customClassifier.CustomClassifier, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.DeepClassifier.__init__", "modulename": "nnetsauce", "qualname": "DeepClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.DeepClassifier.stacked_obj", "modulename": "nnetsauce", "qualname": "DeepClassifier.stacked_obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.DeepClassifier.verbose", "modulename": "nnetsauce", "qualname": "DeepClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.DeepClassifier.n_layers", "modulename": "nnetsauce", "qualname": "DeepClassifier.n_layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.DeepClassifier.fit", "modulename": "nnetsauce", "qualname": "DeepClassifier.fit", "kind": "function", "doc": "<p>Fit Classification algorithms to X and y.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A fitted object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.DeepClassifier.predict", "modulename": "nnetsauce", "qualname": "DeepClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.DeepClassifier.predict_proba", "modulename": "nnetsauce", "qualname": "DeepClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.DeepClassifier.score", "modulename": "nnetsauce", "qualname": "DeepClassifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                     'neg_mean_squared_error', 'neg_mean_squared_log_error',                     'neg_median_absolute_error', 'r2')\n\n**kwargs: \n    additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.DeepClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "DeepClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.DeepRegressor", "modulename": "nnetsauce", "qualname": "DeepRegressor", "kind": "class", "doc": "<p>Deep Regressor</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>verbose : int, optional (default=0)\n    Monitor progress when fitting.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_diabetes</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">RidgeCV</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_diabetes</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">RidgeCV</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">DeepRegressor</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">),</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.customRegressor.CustomRegressor, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.DeepRegressor.__init__", "modulename": "nnetsauce", "qualname": "DeepRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.DeepRegressor.stacked_obj", "modulename": "nnetsauce", "qualname": "DeepRegressor.stacked_obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.DeepRegressor.verbose", "modulename": "nnetsauce", "qualname": "DeepRegressor.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.DeepRegressor.n_layers", "modulename": "nnetsauce", "qualname": "DeepRegressor.n_layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.DeepRegressor.fit", "modulename": "nnetsauce", "qualname": "DeepRegressor.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X and y.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A fitted object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.DeepRegressor.predict", "modulename": "nnetsauce", "qualname": "DeepRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n    **kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.DeepRegressor.score", "modulename": "nnetsauce", "qualname": "DeepRegressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Parameters: </p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                     'neg_mean_squared_error', 'neg_mean_squared_log_error',                     'neg_median_absolute_error', 'r2')\n\n**kwargs: \n    additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.DeepRegressor.set_score_request", "modulename": "nnetsauce", "qualname": "DeepRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.DeepMTS", "modulename": "nnetsauce", "qualname": "DeepMTS", "kind": "class", "doc": "<p>Univariate and multivariate time series (DeepMTS) forecasting with Quasi-Randomized networks (Work in progress /!)</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object.\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict()).\n\nn_layers: int.\n    number of layers in the neural network.\n\nn_hidden_features: int.\n    number of nodes in the hidden layer.\n\nactivation_name: str.\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'.\n\na: float.\n    hyperparameter for 'prelu' or 'elu' activation function.\n\nnodes_sim: str.\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'.\n\nbias: boolean.\n    indicates if the hidden layer contains a bias term (True) or not\n    (False).\n\ndropout: float.\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training.\n\ndirect_link: boolean.\n    indicates if the original predictors are included (True) in model's fitting or not (False).\n\nn_clusters: int.\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0: no clustering).\n\ncluster_encode: bool.\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding.\n\ntype_clust: str.\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm').\n\ntype_scaling: a tuple of 3 strings.\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax').\n\nlags: int.\n    number of lags used for each time series.\n\nreplications: int.\n    number of replications (if needed, for predictive simulation). Default is 'None'.\n\nkernel: str.\n    the kernel to use for residuals density estimation (used for predictive simulation). Currently, either 'gaussian' or 'tophat'.\n\nagg: str.\n    either \"mean\" or \"median\" for simulation of bootstrap aggregating\n\nseed: int.\n    reproducibility seed for nodes_sim=='uniform' or predictive simulation.\n\nbackend: str.\n    \"cpu\" or \"gpu\" or \"tpu\".\n\nverbose: int.\n    0: not printing; 1: printing\n\nshow_progress: bool.\n    True: progress bar when fitting each series; False: no progress bar when fitting each series\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>fit_objs_: dict\n    objects adjusted to each individual time series\n\ny_: {array-like}\n    DeepMTS responses (most recent observations first)\n\nX_: {array-like}\n    DeepMTS lags\n\nxreg_: {array-like}\n    external regressors\n\ny_means_: dict\n    a dictionary of each series mean values\n\npreds_: {array-like}\n    successive model predictions\n\npreds_std_: {array-like}\n    standard deviation around the predictions\n\nreturn_std_: boolean\n    return uncertainty or not (set in predict)\n\ndf_: data frame\n    the input data frame, in case a data.frame is provided to `fit`\n</code></pre>\n\n<p>Examples:</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n<span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">25</span><span class=\"o\">*</span><span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adjust Bayesian Ridge</span>\n<span class=\"n\">regr4</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">BayesianRidge</span><span class=\"p\">()</span>\n<span class=\"n\">obj_DeepMTS</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">DeepMTS</span><span class=\"p\">(</span><span class=\"n\">regr4</span><span class=\"p\">,</span> <span class=\"n\">lags</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># with credible intervals</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"s1\">&#39;date&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;2001-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2002-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2003-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2004-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2005-01-01&#39;</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series1&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mf\">35.6</span><span class=\"p\">,</span> <span class=\"mf\">33.3</span><span class=\"p\">,</span> <span class=\"mf\">38.1</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series2&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">5.5</span><span class=\"p\">,</span> <span class=\"mf\">5.6</span><span class=\"p\">,</span> <span class=\"mf\">6.3</span><span class=\"p\">,</span> <span class=\"mf\">5.1</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series3&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mf\">100.5</span><span class=\"p\">,</span> <span class=\"mf\">100.6</span><span class=\"p\">,</span> <span class=\"mf\">100.2</span><span class=\"p\">,</span> <span class=\"mf\">100.1</span><span class=\"p\">]}</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;date&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adjust Bayesian Ridge</span>\n<span class=\"n\">regr5</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">BayesianRidge</span><span class=\"p\">()</span>\n<span class=\"n\">obj_DeepMTS</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">DeepMTS</span><span class=\"p\">(</span><span class=\"n\">regr5</span><span class=\"p\">,</span> <span class=\"n\">lags</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># with credible intervals</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.mts.mts.MTS"}, {"fullname": "nnetsauce.DeepMTS.__init__", "modulename": "nnetsauce", "qualname": "DeepMTS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">type_pi</span><span class=\"o\">=</span><span class=\"s1\">&#39;kde&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "nnetsauce.DeepMTS.n_layers", "modulename": "nnetsauce", "qualname": "DeepMTS.n_layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.DeepMTS.obj", "modulename": "nnetsauce", "qualname": "DeepMTS.obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.DeepMTS.set_fit_request", "modulename": "nnetsauce", "qualname": "DeepMTS.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.DeepMTS.set_predict_request", "modulename": "nnetsauce", "qualname": "DeepMTS.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.DeepMTS.set_score_request", "modulename": "nnetsauce", "qualname": "DeepMTS.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.GLMClassifier", "modulename": "nnetsauce", "qualname": "GLMClassifier", "kind": "class", "doc": "<p>Generalized 'linear' models using quasi-randomized networks (classification)</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nlambda1: float\n    regularization parameter for GLM coefficients on original features\n\nalpha1: float\n    controls compromize between l1 and l2 norm of GLM coefficients on original features\n\nlambda2: float\n    regularization parameter for GLM coefficients on nonlinear features\n\nalpha2: float\n    controls compromize between l1 and l2 norm of GLM coefficients on nonlinear features\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\noptimizer: object\n    optimizer, from class nnetsauce.Optimizer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: vector\n    regression coefficients\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/glm_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/glm_classification.py</a></p>\n", "bases": "nnetsauce.glm.glm.GLM, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.GLMClassifier.__init__", "modulename": "nnetsauce", "qualname": "GLMClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">alpha1</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">alpha2</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">family</span><span class=\"o\">=</span><span class=\"s1\">&#39;expit&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span><span class=\"o\">=&lt;</span><span class=\"n\">nnetsauce</span><span class=\"o\">.</span><span class=\"n\">optimizers</span><span class=\"o\">.</span><span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">Optimizer</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span></span>)</span>"}, {"fullname": "nnetsauce.GLMClassifier.family", "modulename": "nnetsauce", "qualname": "GLMClassifier.family", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.GLMClassifier.logit_loss", "modulename": "nnetsauce", "qualname": "GLMClassifier.logit_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.GLMClassifier.expit_erf_loss", "modulename": "nnetsauce", "qualname": "GLMClassifier.expit_erf_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.GLMClassifier.loss_func", "modulename": "nnetsauce", "qualname": "GLMClassifier.loss_func", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span>,</span><span class=\"param\">\t<span class=\"n\">group_index</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">row_index</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">type_loss</span><span class=\"o\">=</span><span class=\"s1\">&#39;logit&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.GLMClassifier.fit", "modulename": "nnetsauce", "qualname": "GLMClassifier.fit", "kind": "function", "doc": "<p>Fit GLM model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.GLMClassifier.predict", "modulename": "nnetsauce", "qualname": "GLMClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.GLMClassifier.predict_proba", "modulename": "nnetsauce", "qualname": "GLMClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.GLMClassifier.score", "modulename": "nnetsauce", "qualname": "GLMClassifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('accuracy', 'average_precision',                             'brier_score_loss', 'f1', 'f1_micro',                             'f1_macro', 'f1_weighted',  'f1_samples',                             'neg_log_loss', 'precision', 'recall',                             'roc_auc')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.GLMClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "GLMClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.GLMRegressor", "modulename": "nnetsauce", "qualname": "GLMRegressor", "kind": "class", "doc": "<p>Generalized 'linear' models using quasi-randomized networks (regression)</p>\n\n<p>Attributes:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nlambda1: float\n    regularization parameter for GLM coefficients on original features\n\nalpha1: float\n    controls compromize between l1 and l2 norm of GLM coefficients on original features\n\nlambda2: float\n    regularization parameter for GLM coefficients on nonlinear features\n\nalpha2: float\n    controls compromize between l1 and l2 norm of GLM coefficients on nonlinear features\n\nfamily: str\n    \"gaussian\", \"laplace\" or \"poisson\" (for now)\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\noptimizer: object\n    optimizer, from class nnetsauce.utils.Optimizer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: vector\n    regression coefficients\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/glm_regression.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/glm_regression.py</a></p>\n", "bases": "nnetsauce.glm.glm.GLM, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.GLMRegressor.__init__", "modulename": "nnetsauce", "qualname": "GLMRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">alpha1</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">alpha2</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">family</span><span class=\"o\">=</span><span class=\"s1\">&#39;gaussian&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span><span class=\"o\">=&lt;</span><span class=\"n\">nnetsauce</span><span class=\"o\">.</span><span class=\"n\">optimizers</span><span class=\"o\">.</span><span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">Optimizer</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span></span>)</span>"}, {"fullname": "nnetsauce.GLMRegressor.family", "modulename": "nnetsauce", "qualname": "GLMRegressor.family", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.GLMRegressor.gaussian_loss", "modulename": "nnetsauce", "qualname": "GLMRegressor.gaussian_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.GLMRegressor.laplace_loss", "modulename": "nnetsauce", "qualname": "GLMRegressor.laplace_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.GLMRegressor.poisson_loss", "modulename": "nnetsauce", "qualname": "GLMRegressor.poisson_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.GLMRegressor.loss_func", "modulename": "nnetsauce", "qualname": "GLMRegressor.loss_func", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span>,</span><span class=\"param\">\t<span class=\"n\">group_index</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">row_index</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">type_loss</span><span class=\"o\">=</span><span class=\"s1\">&#39;gaussian&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.GLMRegressor.fit", "modulename": "nnetsauce", "qualname": "GLMRegressor.fit", "kind": "function", "doc": "<p>Fit GLM model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.GLMRegressor.predict", "modulename": "nnetsauce", "qualname": "GLMRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.GLMRegressor.score", "modulename": "nnetsauce", "qualname": "GLMRegressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.GLMRegressor.set_score_request", "modulename": "nnetsauce", "qualname": "GLMRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyClassifier", "modulename": "nnetsauce", "qualname": "LazyClassifier", "kind": "class", "doc": "<p>This module helps in fitting to all the classification algorithms that are available in Scikit-learn to nnetsauce's CustomClassifier</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>verbose : int, optional (default=0)\n    For the liblinear and lbfgs solvers set verbose to any positive\n    number for verbosity.\nignore_warnings : bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not able to run are ignored.\ncustom_metric : function, optional (default=None)\n    When function is provided, models are evaluated based on the custom evaluation metric provided.\npredictions : bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\nclassifiers : list, optional (default=\"all\")\n    When function is provided, trains the chosen classifier(s).\nn_jobs : int, when possible, run in parallel</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">LazyClassifier</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model_dictionary</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">provide_models</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span><span class=\"n\">X_test</span><span class=\"p\">,</span><span class=\"n\">y_train</span><span class=\"p\">,</span><span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.LazyClassifier.__init__", "modulename": "nnetsauce", "qualname": "LazyClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">classifiers</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.LazyClassifier.verbose", "modulename": "nnetsauce", "qualname": "LazyClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyClassifier.ignore_warnings", "modulename": "nnetsauce", "qualname": "LazyClassifier.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyClassifier.custom_metric", "modulename": "nnetsauce", "qualname": "LazyClassifier.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyClassifier.predictions", "modulename": "nnetsauce", "qualname": "LazyClassifier.predictions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyClassifier.models", "modulename": "nnetsauce", "qualname": "LazyClassifier.models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyClassifier.random_state", "modulename": "nnetsauce", "qualname": "LazyClassifier.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyClassifier.classifiers", "modulename": "nnetsauce", "qualname": "LazyClassifier.classifiers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyClassifier.preprocess", "modulename": "nnetsauce", "qualname": "LazyClassifier.preprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyClassifier.n_jobs", "modulename": "nnetsauce", "qualname": "LazyClassifier.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyClassifier.fit", "modulename": "nnetsauce", "qualname": "LazyClassifier.fit", "kind": "function", "doc": "<p>Fit Classification algorithms to X_train and y_train, predict and score on X_test, y_test.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>scores : Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\npredictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyClassifier.provide_models", "modulename": "nnetsauce", "qualname": "LazyClassifier.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyClassifier.set_fit_request", "modulename": "nnetsauce", "qualname": "LazyClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "LazyClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyRegressor", "modulename": "nnetsauce", "qualname": "LazyRegressor", "kind": "class", "doc": "<p>This module helps in fitting regression models that are available in Scikit-learn to nnetsauce's CustomRegressor</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>verbose : int, optional (default=0)\n    For the liblinear and lbfgs solvers set verbose to any positive\n    number for verbosity.\nignore_warnings : bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not able to run are ignored.\ncustom_metric : function, optional (default=None)\n    When function is provided, models are evaluated based on the custom evaluation metric provided.\nprediction : bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\nregressors : list, optional (default=\"all\")\n    When function is provided, trains the chosen regressor(s).\nn_jobs : int, when possible, run in parallel</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">lazypredict.Supervised</span> <span class=\"kn\">import</span> <span class=\"n\">LazyRegressor</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.utils</span> <span class=\"kn\">import</span> <span class=\"n\">shuffle</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diabetes</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">load_diabetes</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">diabetes</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">diabetes</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mf\">0.9</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[:</span><span class=\"n\">offset</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">[:</span><span class=\"n\">offset</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">:],</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">:]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reg</span> <span class=\"o\">=</span> <span class=\"n\">LazyRegressor</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">reg</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model_dictionary</span> <span class=\"o\">=</span> <span class=\"n\">reg</span><span class=\"o\">.</span><span class=\"n\">provide_models</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.LazyRegressor.__init__", "modulename": "nnetsauce", "qualname": "LazyRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">regressors</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.LazyRegressor.verbose", "modulename": "nnetsauce", "qualname": "LazyRegressor.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyRegressor.ignore_warnings", "modulename": "nnetsauce", "qualname": "LazyRegressor.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyRegressor.custom_metric", "modulename": "nnetsauce", "qualname": "LazyRegressor.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyRegressor.predictions", "modulename": "nnetsauce", "qualname": "LazyRegressor.predictions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyRegressor.models", "modulename": "nnetsauce", "qualname": "LazyRegressor.models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyRegressor.random_state", "modulename": "nnetsauce", "qualname": "LazyRegressor.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyRegressor.regressors", "modulename": "nnetsauce", "qualname": "LazyRegressor.regressors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyRegressor.preprocess", "modulename": "nnetsauce", "qualname": "LazyRegressor.preprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyRegressor.n_jobs", "modulename": "nnetsauce", "qualname": "LazyRegressor.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyRegressor.fit", "modulename": "nnetsauce", "qualname": "LazyRegressor.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X_train and y_train, predict and score on X_test, y_test.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>scores : Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\npredictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyRegressor.provide_models", "modulename": "nnetsauce", "qualname": "LazyRegressor.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyRegressor.set_fit_request", "modulename": "nnetsauce", "qualname": "LazyRegressor.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyRegressor.set_score_request", "modulename": "nnetsauce", "qualname": "LazyRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyMTS", "modulename": "nnetsauce", "qualname": "LazyMTS", "kind": "class", "doc": "<p>This module helps in fitting regression models that are available in Scikit-learn to nnetsauce's MTS</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>verbose : int, optional (default=0)\n    For the liblinear and lbfgs solvers set verbose to any positive\n    number for verbosity.\nignore_warnings : bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not able to run are ignored.\ncustom_metric : function, optional (default=None)\n    When function is provided, models are evaluated based on the custom evaluation metric provided.\nprediction : bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\nregressors : list, optional (default=\"all\")\n    When function is provided, trains the chosen regressor(s).</p>\n\n<h2 id=\"examples\">Examples</h2>\n", "bases": "nnetsauce.mts.mts.MTS"}, {"fullname": "nnetsauce.LazyMTS.__init__", "modulename": "nnetsauce", "qualname": "LazyMTS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">regressors</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "nnetsauce.LazyMTS.verbose", "modulename": "nnetsauce", "qualname": "LazyMTS.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyMTS.ignore_warnings", "modulename": "nnetsauce", "qualname": "LazyMTS.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyMTS.custom_metric", "modulename": "nnetsauce", "qualname": "LazyMTS.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyMTS.predictions", "modulename": "nnetsauce", "qualname": "LazyMTS.predictions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyMTS.models", "modulename": "nnetsauce", "qualname": "LazyMTS.models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyMTS.random_state", "modulename": "nnetsauce", "qualname": "LazyMTS.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyMTS.regressors", "modulename": "nnetsauce", "qualname": "LazyMTS.regressors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyMTS.preprocess", "modulename": "nnetsauce", "qualname": "LazyMTS.preprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyMTS.fit", "modulename": "nnetsauce", "qualname": "LazyMTS.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X_train, predict and score on X_test.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>scores : Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\npredictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">new_xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyMTS.provide_models", "modulename": "nnetsauce", "qualname": "LazyMTS.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyMTS.set_fit_request", "modulename": "nnetsauce", "qualname": "LazyMTS.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyMTS.set_predict_request", "modulename": "nnetsauce", "qualname": "LazyMTS.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyMTS.set_score_request", "modulename": "nnetsauce", "qualname": "LazyMTS.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyDeepClassifier", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier", "kind": "class", "doc": "<p>This module helps in fitting to all the classification algorithms that are available in Scikit-learn to nnetsauce's CustomClassifier</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>verbose : int, optional (default=0)\n    For the liblinear and lbfgs solvers set verbose to any positive\n    number for verbosity.\nignore_warnings : bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not able to run are ignored.\ncustom_metric : function, optional (default=None)\n    When function is provided, models are evaluated based on the custom evaluation metric provided.\nprediction : bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\nclassifiers : list, optional (default=\"all\")\n    When function is provided, trains the chosen classifier(s).\nn_jobs : int, when possible, run in parallel</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">LazyDeepClassifier</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model_dictionary</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">provide_models</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span><span class=\"n\">X_test</span><span class=\"p\">,</span><span class=\"n\">y_train</span><span class=\"p\">,</span><span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.LazyDeepClassifier.__init__", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">classifiers</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.LazyDeepClassifier.verbose", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepClassifier.ignore_warnings", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepClassifier.custom_metric", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepClassifier.predictions", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.predictions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepClassifier.models", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepClassifier.random_state", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepClassifier.classifiers", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.classifiers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepClassifier.n_layers", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.n_layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepClassifier.n_jobs", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepClassifier.fit", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.fit", "kind": "function", "doc": "<p>Fit Classification algorithms to X_train and y_train, predict and score on X_test, y_test.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>scores : Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\npredictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyDeepClassifier.provide_models", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyDeepClassifier.set_fit_request", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyDeepClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "LazyDeepClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyDeepRegressor", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor", "kind": "class", "doc": "<p>This module helps in fitting regression models that are available in Scikit-learn to nnetsauce's CustomRegressor</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>verbose : int, optional (default=0)\n    For the liblinear and lbfgs solvers set verbose to any positive\n    number for verbosity.\nignore_warnings : bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not able to run are ignored.\ncustom_metric : function, optional (default=None)\n    When function is provided, models are evaluated based on the custom evaluation metric provided.\nprediction : bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\nregressors : list, optional (default=\"all\")\n    When function is provided, trains the chosen regressor(s).\nn_jobs : int, when possible, run in parallel</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">lazypredict.Supervised</span> <span class=\"kn\">import</span> <span class=\"n\">LazyRegressor</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.utils</span> <span class=\"kn\">import</span> <span class=\"n\">shuffle</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diabetes</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">load_diabetes</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">diabetes</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">diabetes</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mf\">0.9</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[:</span><span class=\"n\">offset</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">[:</span><span class=\"n\">offset</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">:],</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">:]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reg</span> <span class=\"o\">=</span> <span class=\"n\">LazyDeepRegressor</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">reg</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model_dictionary</span> <span class=\"o\">=</span> <span class=\"n\">reg</span><span class=\"o\">.</span><span class=\"n\">provide_models</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.LazyDeepRegressor.__init__", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">regressors</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.LazyDeepRegressor.verbose", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepRegressor.ignore_warnings", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepRegressor.custom_metric", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepRegressor.predictions", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.predictions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepRegressor.models", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepRegressor.random_state", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepRegressor.regressors", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.regressors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepRegressor.n_layers", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.n_layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepRegressor.n_jobs", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepRegressor.fit", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X_train and y_train, predict and score on X_test, y_test.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>scores : Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\npredictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyDeepRegressor.provide_models", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyDeepRegressor.set_fit_request", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyDeepRegressor.set_score_request", "modulename": "nnetsauce", "qualname": "LazyDeepRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyDeepMTS", "modulename": "nnetsauce", "qualname": "LazyDeepMTS", "kind": "class", "doc": "<p>This module helps in fitting regression models that are available in Scikit-learn to nnetsauce's MTS</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>verbose : int, optional (default=0)\n    For the liblinear and lbfgs solvers set verbose to any positive\n    number for verbosity.\nignore_warnings : bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not able to run are ignored.\ncustom_metric : function, optional (default=None)\n    When function is provided, models are evaluated based on the custom evaluation metric provided.\nprediction : bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\nregressors : list, optional (default=\"all\")\n    When function is provided, trains the chosen regressor(s).</p>\n\n<h2 id=\"examples\">Examples</h2>\n", "bases": "nnetsauce.mts.mts.MTS"}, {"fullname": "nnetsauce.LazyDeepMTS.__init__", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">regressors</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "nnetsauce.LazyDeepMTS.verbose", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepMTS.ignore_warnings", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepMTS.custom_metric", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepMTS.predictions", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.predictions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepMTS.models", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepMTS.random_state", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepMTS.regressors", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.regressors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepMTS.preprocess", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.preprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepMTS.n_layers", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.n_layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.LazyDeepMTS.fit", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X_train, predict and score on X_test.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>scores : Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\npredictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">new_xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyDeepMTS.provide_models", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyDeepMTS.set_fit_request", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyDeepMTS.set_predict_request", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.LazyDeepMTS.set_score_request", "modulename": "nnetsauce", "qualname": "LazyDeepMTS.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.MTS", "modulename": "nnetsauce", "qualname": "MTS", "kind": "class", "doc": "<p>Univariate and multivariate time series (MTS) forecasting with Quasi-Randomized networks (Work in progress /!)</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object.\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict()).\n\nn_hidden_features: int.\n    number of nodes in the hidden layer.\n\nactivation_name: str.\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'.\n\na: float.\n    hyperparameter for 'prelu' or 'elu' activation function.\n\nnodes_sim: str.\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'.\n\nbias: boolean.\n    indicates if the hidden layer contains a bias term (True) or not\n    (False).\n\ndropout: float.\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training.\n\ndirect_link: boolean.\n    indicates if the original predictors are included (True) in model's fitting or not (False).\n\nn_clusters: int.\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0: no clustering).\n\ncluster_encode: bool.\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding.\n\ntype_clust: str.\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm').\n\ntype_scaling: a tuple of 3 strings.\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax').\n\nlags: int.\n    number of lags used for each time series.\n\nreplications: int.\n    number of replications (if needed, for predictive simulation). Default is 'None'.\n\nkernel: str.\n    the kernel to use for residuals density estimation (used for predictive simulation). Currently, either 'gaussian' or 'tophat'.\n\nagg: str.\n    either \"mean\" or \"median\" for simulation of bootstrap aggregating\n\nseed: int.\n    reproducibility seed for nodes_sim=='uniform' or predictive simulation.\n\nbackend: str.\n    \"cpu\" or \"gpu\" or \"tpu\".\n\nverbose: int.\n    0: not printing; 1: printing\n\nshow_progress: bool.\n    True: progress bar when fitting each series; False: no progress bar when fitting each series\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>fit_objs_: dict\n    objects adjusted to each individual time series\n\ny_: {array-like}\n    MTS responses (most recent observations first)\n\nX_: {array-like}\n    MTS lags\n\nxreg_: {array-like}\n    external regressors\n\ny_means_: dict\n    a dictionary of each series mean values\n\npreds_: {array-like}\n    successive model predictions\n\npreds_std_: {array-like}\n    standard deviation around the predictions\n\nreturn_std_: boolean\n    return uncertainty or not (set in predict)\n\ndf_: data frame\n    the input data frame, in case a data.frame is provided to `fit`\n</code></pre>\n\n<p>Examples:</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n<span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">25</span><span class=\"o\">*</span><span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adjust Bayesian Ridge</span>\n<span class=\"n\">regr4</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">BayesianRidge</span><span class=\"p\">()</span>\n<span class=\"n\">obj_MTS</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">MTS</span><span class=\"p\">(</span><span class=\"n\">regr4</span><span class=\"p\">,</span> <span class=\"n\">lags</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># with credible intervals</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"s1\">&#39;date&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;2001-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2002-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2003-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2004-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2005-01-01&#39;</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series1&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mf\">35.6</span><span class=\"p\">,</span> <span class=\"mf\">33.3</span><span class=\"p\">,</span> <span class=\"mf\">38.1</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series2&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">5.5</span><span class=\"p\">,</span> <span class=\"mf\">5.6</span><span class=\"p\">,</span> <span class=\"mf\">6.3</span><span class=\"p\">,</span> <span class=\"mf\">5.1</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series3&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mf\">100.5</span><span class=\"p\">,</span> <span class=\"mf\">100.6</span><span class=\"p\">,</span> <span class=\"mf\">100.2</span><span class=\"p\">,</span> <span class=\"mf\">100.1</span><span class=\"p\">]}</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;date&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adjust Bayesian Ridge</span>\n<span class=\"n\">regr5</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">BayesianRidge</span><span class=\"p\">()</span>\n<span class=\"n\">obj_MTS</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">MTS</span><span class=\"p\">(</span><span class=\"n\">regr5</span><span class=\"p\">,</span> <span class=\"n\">lags</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># with credible intervals</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base"}, {"fullname": "nnetsauce.MTS.__init__", "modulename": "nnetsauce", "qualname": "MTS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">type_pi</span><span class=\"o\">=</span><span class=\"s1\">&#39;kde&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "nnetsauce.MTS.obj", "modulename": "nnetsauce", "qualname": "MTS.obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.n_series", "modulename": "nnetsauce", "qualname": "MTS.n_series", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.lags", "modulename": "nnetsauce", "qualname": "MTS.lags", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.type_pi", "modulename": "nnetsauce", "qualname": "MTS.type_pi", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.replications", "modulename": "nnetsauce", "qualname": "MTS.replications", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.kernel", "modulename": "nnetsauce", "qualname": "MTS.kernel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.agg", "modulename": "nnetsauce", "qualname": "MTS.agg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.verbose", "modulename": "nnetsauce", "qualname": "MTS.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.show_progress", "modulename": "nnetsauce", "qualname": "MTS.show_progress", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.series_names", "modulename": "nnetsauce", "qualname": "MTS.series_names", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.input_dates", "modulename": "nnetsauce", "qualname": "MTS.input_dates", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.fit_objs_", "modulename": "nnetsauce", "qualname": "MTS.fit_objs_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.y_", "modulename": "nnetsauce", "qualname": "MTS.y_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.X_", "modulename": "nnetsauce", "qualname": "MTS.X_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.xreg_", "modulename": "nnetsauce", "qualname": "MTS.xreg_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.y_means_", "modulename": "nnetsauce", "qualname": "MTS.y_means_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.mean_", "modulename": "nnetsauce", "qualname": "MTS.mean_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.upper_", "modulename": "nnetsauce", "qualname": "MTS.upper_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.lower_", "modulename": "nnetsauce", "qualname": "MTS.lower_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.output_dates_", "modulename": "nnetsauce", "qualname": "MTS.output_dates_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.preds_std_", "modulename": "nnetsauce", "qualname": "MTS.preds_std_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.alpha_", "modulename": "nnetsauce", "qualname": "MTS.alpha_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.return_std_", "modulename": "nnetsauce", "qualname": "MTS.return_std_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.df_", "modulename": "nnetsauce", "qualname": "MTS.df_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.residuals_", "modulename": "nnetsauce", "qualname": "MTS.residuals_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.residuals_sims_", "modulename": "nnetsauce", "qualname": "MTS.residuals_sims_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.kde_", "modulename": "nnetsauce", "qualname": "MTS.kde_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.sims_", "modulename": "nnetsauce", "qualname": "MTS.sims_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MTS.fit", "modulename": "nnetsauce", "qualname": "MTS.fit", "kind": "function", "doc": "<p>Fit MTS model to training data X, with optional regressors xreg</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training time series, where n_samples is the number\n    of samples and n_features is the number of features;\n    X must be in increasing order (most recent observations last)\n\nxreg: {array-like}, shape = [n_samples, n_features_xreg]\n    Additional regressors to be passed to obj\n    xreg must be in increasing order (most recent observations last)\n\n**kwargs: for now, additional parameters to be passed to for kernel density estimation, when needed (see sklearn.neighbors.KernelDensity)\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.MTS.predict", "modulename": "nnetsauce", "qualname": "MTS.predict", "kind": "function", "doc": "<p>Forecast all the time series, h steps ahead</p>\n\n<p>Parameters:</p>\n\n<pre><code>h: {integer}\n    Forecasting horizon\n\nlevel: {integer}\n    Level of confidence (if obj has option 'return_std' and the\n    posterior is gaussian)\n\nnew_xreg: {array-like}, shape = [n_samples = h, n_new_xreg]\n    New values of additional (deterministic) regressors on horizon = h\n    new_xreg must be in increasing order (most recent observations last)\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions for horizon = h: {array-like}, data frame or tuple.\nStandard deviation and prediction intervals are returned when\n`obj.predict` can return standard deviation\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">h</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span>, </span><span class=\"param\"><span class=\"n\">new_xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.MTS.score", "modulename": "nnetsauce", "qualname": "MTS.score", "kind": "function", "doc": "<p>Train on training_index, score on testing_index.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">training_index</span>, </span><span class=\"param\"><span class=\"n\">testing_index</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.MTS.plot", "modulename": "nnetsauce", "qualname": "MTS.plot", "kind": "function", "doc": "<p>Plot time series forecast</p>\n\n<p>Parameters:</p>\n\n<pre><code>series: {integer} or {string}\n    series index or name\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">series</span>, </span><span class=\"param\"><span class=\"n\">type_axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;dates&#39;</span>, </span><span class=\"param\"><span class=\"n\">type_plot</span><span class=\"o\">=</span><span class=\"s1\">&#39;pi&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.MTS.set_fit_request", "modulename": "nnetsauce", "qualname": "MTS.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.MTS.set_predict_request", "modulename": "nnetsauce", "qualname": "MTS.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.MTS.set_score_request", "modulename": "nnetsauce", "qualname": "MTS.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.MultitaskClassifier", "modulename": "nnetsauce", "qualname": "MultitaskClassifier", "kind": "class", "doc": "<p>Multitask Classification model based on regression models, with shared covariates</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object (must be a regression model) containing a method fit (obj.fit())\n    and a method predict (obj.predict())\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>fit_objs_: dict\n    objects adjusted to each individual time series\n\nn_classes_: int\n    number of classes for the classifier\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/mtask_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/mtask_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LinearRegression</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Linear Regression is used</span>\n<span class=\"n\">regr</span> <span class=\"o\">=</span> <span class=\"n\">LinearRegression</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">MultitaskClassifier</span><span class=\"p\">(</span><span class=\"n\">regr</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                            <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s2\">&quot;gmm&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.MultitaskClassifier.__init__", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.MultitaskClassifier.type_fit", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MultitaskClassifier.obj", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MultitaskClassifier.fit_objs_", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.fit_objs_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.MultitaskClassifier.fit", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.fit", "kind": "function", "doc": "<p>Fit MultitaskClassifier to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.MultitaskClassifier.predict", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.MultitaskClassifier.predict_proba", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.MultitaskClassifier.score", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.MultitaskClassifier.set_fit_request", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.MultitaskClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "MultitaskClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.SimpleMultitaskClassifier", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier", "kind": "class", "doc": "<p>Multitask Classification model based on regression models, with shared covariates</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object (must be a regression model) containing a method fit (obj.fit())\n    and a method predict (obj.predict())\n\nseed: int\n    reproducibility seed\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>fit_objs_: dict\n    objects adjusted to each individual time series\n\nn_classes_: int\n    number of classes for the classifier\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LinearRegression</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Linear Regression is used</span>\n<span class=\"n\">regr</span> <span class=\"o\">=</span> <span class=\"n\">LinearRegression</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">SimpleMultitaskClassifier</span><span class=\"p\">(</span><span class=\"n\">regr</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.SimpleMultitaskClassifier.__init__", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span>)</span>"}, {"fullname": "nnetsauce.SimpleMultitaskClassifier.type_fit", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.SimpleMultitaskClassifier.obj", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.SimpleMultitaskClassifier.fit_objs_", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.fit_objs_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.SimpleMultitaskClassifier.X_scaler_", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.X_scaler_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.SimpleMultitaskClassifier.scaled_X_", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.scaled_X_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.SimpleMultitaskClassifier.fit", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.fit", "kind": "function", "doc": "<p>Fit SimpleMultitaskClassifier to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.SimpleMultitaskClassifier.predict", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.SimpleMultitaskClassifier.predict_proba", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.SimpleMultitaskClassifier.score", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.SimpleMultitaskClassifier.set_fit_request", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.SimpleMultitaskClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "SimpleMultitaskClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Optimizer", "modulename": "nnetsauce", "qualname": "Optimizer", "kind": "class", "doc": "<p>Optimizer class</p>\n\n<p>Attributes:</p>\n\n<pre><code>type_optim: str\n    type of optimizer, (currently) either 'sgd' (stochastic minibatch gradient descent)\n    or 'scd' (stochastic minibatch coordinate descent)\n\nnum_iters: int\n    number of iterations of the optimizer\n\nlearning_rate: float\n    step size\n\nbatch_prop: float\n    proportion of the initial data used at each optimization step\n\nlearning_method: str\n    \"poly\" - learning rate decreasing as a polynomial function\n    of # of iterations (default)\n    \"exp\" - learning rate decreasing as an exponential function\n    of # of iterations\n    \"momentum\" - gradient descent using momentum\n\nrandomization: str\n    type of randomization applied at each step\n    \"strat\" - stratified subsampling (default)\n    \"shuffle\" - random subsampling\n\nmass: float\n    mass on velocity, for `method` == \"momentum\"\n\ndecay: float\n    coefficient of decrease of the learning rate for\n    `method` == \"poly\" and `method` == \"exp\"\n\ntolerance: float\n    early stopping parameter (convergence of loss function)\n\nverbose: int\n    controls verbosity of gradient descent\n    0 - nothing is printed\n    1 - a progress bar is printed\n    2 - successive loss function values are printed\n</code></pre>\n"}, {"fullname": "nnetsauce.Optimizer.__init__", "modulename": "nnetsauce", "qualname": "Optimizer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">type_optim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sgd&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">num_iters</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">batch_prop</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">learning_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;momentum&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">randomization</span><span class=\"o\">=</span><span class=\"s1\">&#39;strat&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mass</span><span class=\"o\">=</span><span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">decay</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, {"fullname": "nnetsauce.Optimizer.type_optim", "modulename": "nnetsauce", "qualname": "Optimizer.type_optim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Optimizer.num_iters", "modulename": "nnetsauce", "qualname": "Optimizer.num_iters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Optimizer.learning_rate", "modulename": "nnetsauce", "qualname": "Optimizer.learning_rate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Optimizer.batch_prop", "modulename": "nnetsauce", "qualname": "Optimizer.batch_prop", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Optimizer.learning_method", "modulename": "nnetsauce", "qualname": "Optimizer.learning_method", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Optimizer.randomization", "modulename": "nnetsauce", "qualname": "Optimizer.randomization", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Optimizer.mass", "modulename": "nnetsauce", "qualname": "Optimizer.mass", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Optimizer.decay", "modulename": "nnetsauce", "qualname": "Optimizer.decay", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Optimizer.tolerance", "modulename": "nnetsauce", "qualname": "Optimizer.tolerance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Optimizer.verbose", "modulename": "nnetsauce", "qualname": "Optimizer.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Optimizer.opt", "modulename": "nnetsauce", "qualname": "Optimizer.opt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Optimizer.fit", "modulename": "nnetsauce", "qualname": "Optimizer.fit", "kind": "function", "doc": "<p>Fit GLM model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>loss_func: loss function\n\nresponse: array-like, shape = [n_samples]\ntarget variable (used for subsampling)\n\nx0: array-like, shape = [n_features]\n    initial value provided to the optimizer\n\n**kwargs: additional parameters to be passed to\n        loss function\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">loss_func</span>, </span><span class=\"param\"><span class=\"n\">response</span>, </span><span class=\"param\"><span class=\"n\">x0</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Optimizer.one_hot_encode", "modulename": "nnetsauce", "qualname": "Optimizer.one_hot_encode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">n_classes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.RandomBagRegressor", "modulename": "nnetsauce", "qualname": "RandomBagRegressor", "kind": "class", "doc": "<p>Randomized 'Bagging' Regression model</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_estimators: int\n    number of boosting iterations\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model''s\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>voter_: dict\n    dictionary containing all the fitted base-learners\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">fetch_california_housing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.tree</span> <span class=\"kn\">import</span> <span class=\"n\">DecisionTreeRegressor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n\n<span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">fetch_california_housing</span><span class=\"p\">(</span><span class=\"n\">return_X_y</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">as_frame</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># split data into training test and test set</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Requires further tuning</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">DecisionTreeRegressor</span><span class=\"p\">(</span><span class=\"n\">max_depth</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">obj2</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">RandomBagRegressor</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                            <span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span>\n                            <span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span>\n                            <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">obj2</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">obj2</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)))</span> <span class=\"c1\"># RMSE</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.randombag.bag.RandomBag, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.RandomBagRegressor.__init__", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.RandomBagRegressor.type_fit", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.RandomBagRegressor.verbose", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.RandomBagRegressor.n_jobs", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.RandomBagRegressor.voter_", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.voter_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.RandomBagRegressor.fit", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.fit", "kind": "function", "doc": "<p>Fit Random 'Bagging' model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.RandomBagRegressor.predict", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.predict", "kind": "function", "doc": "<p>Predict for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.RandomBagRegressor.score", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.RandomBagRegressor.set_predict_request", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.RandomBagRegressor.set_score_request", "modulename": "nnetsauce", "qualname": "RandomBagRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.RandomBagClassifier", "modulename": "nnetsauce", "qualname": "RandomBagClassifier", "kind": "class", "doc": "<p>Randomized 'Bagging' Classification model</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_estimators: int\n    number of boosting iterations\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>voter_: dict\n    dictionary containing all the fitted base-learners\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/randombag_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/randombag_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.tree</span> <span class=\"kn\">import</span> <span class=\"n\">DecisionTreeClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># decision tree</span>\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">DecisionTreeClassifier</span><span class=\"p\">(</span><span class=\"n\">max_depth</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">RandomBagClassifier</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                                <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                <span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n                                <span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span>\n                                <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.randombag.bag.RandomBag, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.RandomBagClassifier.__init__", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.RandomBagClassifier.type_fit", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.RandomBagClassifier.verbose", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.RandomBagClassifier.n_jobs", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.RandomBagClassifier.voter_", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.voter_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.RandomBagClassifier.fit", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.fit", "kind": "function", "doc": "<p>Fit Random 'Bagging' model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.RandomBagClassifier.predict", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.RandomBagClassifier.predict_proba", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.RandomBagClassifier.score", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.RandomBagClassifier.set_predict_request", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.RandomBagClassifier.set_predict_proba_request", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.set_predict_proba_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.RandomBagClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "RandomBagClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Ridge2Regressor", "modulename": "nnetsauce", "qualname": "Ridge2Regressor", "kind": "class", "doc": "<p>Ridge regression with 2 regularization parameters derived from class Ridge</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nlambda1: float\n    regularization parameter on direct link\n\nlambda2: float\n    regularization parameter on hidden layer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    'cpu' or 'gpu' or 'tpu'\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: {array-like}\n    regression coefficients\n\ny_mean_: float\n    average response\n</code></pre>\n", "bases": "nnetsauce.ridge2.ridge2.Ridge2, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.Ridge2Regressor.__init__", "modulename": "nnetsauce", "qualname": "Ridge2Regressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.Ridge2Regressor.type_fit", "modulename": "nnetsauce", "qualname": "Ridge2Regressor.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Ridge2Regressor.fit", "modulename": "nnetsauce", "qualname": "Ridge2Regressor.fit", "kind": "function", "doc": "<p>Fit Ridge model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Ridge2Regressor.predict", "modulename": "nnetsauce", "qualname": "Ridge2Regressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Ridge2Regressor.score", "modulename": "nnetsauce", "qualname": "Ridge2Regressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Ridge2Regressor.set_score_request", "modulename": "nnetsauce", "qualname": "Ridge2Regressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Ridge2Classifier", "modulename": "nnetsauce", "qualname": "Ridge2Classifier", "kind": "class", "doc": "<p>Multinomial logit classification with 2 regularization parameters</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nlambda1: float\n    regularization parameter on direct link\n\nlambda2: float\n    regularization parameter on hidden layer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: {array-like}\n    regression coefficients\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/ridge_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/ridge_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"c1\"># split data into training test and test set</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create the model with nnetsauce</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">Ridge2Classifier</span><span class=\"p\">(</span><span class=\"n\">lambda1</span> <span class=\"o\">=</span> <span class=\"mf\">6.90185578e+04</span><span class=\"p\">,</span>\n                            <span class=\"n\">lambda2</span> <span class=\"o\">=</span> <span class=\"mf\">3.17392781e+02</span><span class=\"p\">,</span>\n                            <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">,</span>\n                            <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                            <span class=\"n\">dropout</span> <span class=\"o\">=</span> <span class=\"mf\">3.62817383e-01</span><span class=\"p\">,</span>\n                            <span class=\"n\">type_clust</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;gmm&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fit the model on training set</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the accuracy on test set</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get area under the curve on test set (auc)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.ridge2.ridge2.Ridge2, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.Ridge2Classifier.__init__", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.Ridge2Classifier.type_fit", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Ridge2Classifier.loglik", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.loglik", "kind": "function", "doc": "<p>Log-likelihood for training data (X, Y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nY: array-like, shape = [n_samples]\n    One-hot encode target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Ridge2Classifier.fit", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.fit", "kind": "function", "doc": "<p>Fit Ridge model to training data (X, y).</p>\n\n<p>for beta: regression coeffs (beta11, ..., beta1p, ..., betaK1, ..., betaKp)\nfor K classes and p covariates.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">solver</span><span class=\"o\">=</span><span class=\"s1\">&#39;L-BFGS-B&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Ridge2Classifier.predict", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Ridge2Classifier.predict_proba", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Ridge2Classifier.score", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Ridge2Classifier.set_fit_request", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Ridge2Classifier.set_score_request", "modulename": "nnetsauce", "qualname": "Ridge2Classifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Ridge2MultitaskClassifier", "modulename": "nnetsauce", "qualname": "Ridge2MultitaskClassifier", "kind": "class", "doc": "<p>Multitask Ridge classification with 2 regularization parameters</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nlambda1: float\n    regularization parameter on direct link\n\nlambda2: float\n    regularization parameter on hidden layer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: {array-like}\n    regression coefficients\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/ridgemtask_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/ridgemtask_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">Ridge2MultitaskClassifier</span><span class=\"p\">(</span><span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">9.83730469e+01</span><span class=\"p\">),</span>\n                                <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">4.31054687e-01</span><span class=\"p\">,</span>\n                                <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">1.71484375e+00</span><span class=\"p\">),</span>\n                                <span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">1.24023438e+01</span><span class=\"p\">,</span> <span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">7.30263672e+03</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.ridge2.ridge2.Ridge2, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.Ridge2MultitaskClassifier.__init__", "modulename": "nnetsauce", "qualname": "Ridge2MultitaskClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.Ridge2MultitaskClassifier.type_fit", "modulename": "nnetsauce", "qualname": "Ridge2MultitaskClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.Ridge2MultitaskClassifier.fit", "modulename": "nnetsauce", "qualname": "Ridge2MultitaskClassifier.fit", "kind": "function", "doc": "<p>Fit Ridge model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Ridge2MultitaskClassifier.predict", "modulename": "nnetsauce", "qualname": "Ridge2MultitaskClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Ridge2MultitaskClassifier.predict_proba", "modulename": "nnetsauce", "qualname": "Ridge2MultitaskClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Ridge2MultitaskClassifier.score", "modulename": "nnetsauce", "qualname": "Ridge2MultitaskClassifier.score", "kind": "function", "doc": "<p>Score the model on test set covariates X and response y.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.Ridge2MultitaskClassifier.set_score_request", "modulename": "nnetsauce", "qualname": "Ridge2MultitaskClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.SubSampler", "modulename": "nnetsauce", "qualname": "SubSampler", "kind": "class", "doc": "<p>Subsampling class.</p>\n\n<p>Attributes:</p>\n\n<p>y: array-like, shape = [n_samples]\n       Target values.</p>\n\n<p>row_sample: double\n       subsampling fraction</p>\n\n<p>n_samples: int\n        subsampling by using the number of rows</p>\n\n<p>seed: int\n       reproductibility seed</p>\n\n<p>n_jobs: int\n        number of jobs to run in parallel</p>\n\n<p>verbose: bool\n        print progress messages and bars</p>\n\n<p>Returns:</p>\n\n<pre><code>indices of subsampled y\n</code></pre>\n"}, {"fullname": "nnetsauce.SubSampler.__init__", "modulename": "nnetsauce", "qualname": "SubSampler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">n_samples</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "nnetsauce.SubSampler.y", "modulename": "nnetsauce", "qualname": "SubSampler.y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.SubSampler.row_sample", "modulename": "nnetsauce", "qualname": "SubSampler.row_sample", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.SubSampler.n_samples", "modulename": "nnetsauce", "qualname": "SubSampler.n_samples", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.SubSampler.seed", "modulename": "nnetsauce", "qualname": "SubSampler.seed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.SubSampler.indices", "modulename": "nnetsauce", "qualname": "SubSampler.indices", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.SubSampler.n_jobs", "modulename": "nnetsauce", "qualname": "SubSampler.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.SubSampler.verbose", "modulename": "nnetsauce", "qualname": "SubSampler.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.SubSampler.subsample", "modulename": "nnetsauce", "qualname": "SubSampler.subsample", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.base", "modulename": "nnetsauce.base", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base", "modulename": "nnetsauce.base", "qualname": "Base", "kind": "class", "doc": "<p>Base model from which all the other classes inherit.</p>\n\n<p>This class contains the most important data preprocessing/feature engineering methods.</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for hidden layer nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or\n    not (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original features are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for type_clust='kmeans' or type_clust='gmm'\n    clustering (could be 0: no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot);\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax') or robust scaling ('robust')\n\ncol_sample: float\n    percentage of features randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform', clustering and dropout\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n", "bases": "sklearn.base.BaseEstimator"}, {"fullname": "nnetsauce.base.Base.__init__", "modulename": "nnetsauce.base", "qualname": "Base.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.base.Base.n_hidden_features", "modulename": "nnetsauce.base", "qualname": "Base.n_hidden_features", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.activation_name", "modulename": "nnetsauce.base", "qualname": "Base.activation_name", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.a", "modulename": "nnetsauce.base", "qualname": "Base.a", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.nodes_sim", "modulename": "nnetsauce.base", "qualname": "Base.nodes_sim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.bias", "modulename": "nnetsauce.base", "qualname": "Base.bias", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.seed", "modulename": "nnetsauce.base", "qualname": "Base.seed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.backend", "modulename": "nnetsauce.base", "qualname": "Base.backend", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.dropout", "modulename": "nnetsauce.base", "qualname": "Base.dropout", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.direct_link", "modulename": "nnetsauce.base", "qualname": "Base.direct_link", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.cluster_encode", "modulename": "nnetsauce.base", "qualname": "Base.cluster_encode", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.type_clust", "modulename": "nnetsauce.base", "qualname": "Base.type_clust", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.type_scaling", "modulename": "nnetsauce.base", "qualname": "Base.type_scaling", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.col_sample", "modulename": "nnetsauce.base", "qualname": "Base.col_sample", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.row_sample", "modulename": "nnetsauce.base", "qualname": "Base.row_sample", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.n_clusters", "modulename": "nnetsauce.base", "qualname": "Base.n_clusters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.subsampler_", "modulename": "nnetsauce.base", "qualname": "Base.subsampler_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.index_col_", "modulename": "nnetsauce.base", "qualname": "Base.index_col_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.index_row_", "modulename": "nnetsauce.base", "qualname": "Base.index_row_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.clustering_obj_", "modulename": "nnetsauce.base", "qualname": "Base.clustering_obj_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.clustering_scaler_", "modulename": "nnetsauce.base", "qualname": "Base.clustering_scaler_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.nn_scaler_", "modulename": "nnetsauce.base", "qualname": "Base.nn_scaler_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.scaler_", "modulename": "nnetsauce.base", "qualname": "Base.scaler_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.encoder_", "modulename": "nnetsauce.base", "qualname": "Base.encoder_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.W_", "modulename": "nnetsauce.base", "qualname": "Base.W_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.X_", "modulename": "nnetsauce.base", "qualname": "Base.X_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.y_", "modulename": "nnetsauce.base", "qualname": "Base.y_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.y_mean_", "modulename": "nnetsauce.base", "qualname": "Base.y_mean_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.beta_", "modulename": "nnetsauce.base", "qualname": "Base.beta_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.activation_func", "modulename": "nnetsauce.base", "qualname": "Base.activation_func", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.base.Base.encode_clusters", "modulename": "nnetsauce.base", "qualname": "Base.encode_clusters", "kind": "function", "doc": "<p>Create new covariates with kmeans or GMM clustering</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\npredict: boolean\n    is False on training set and True on test set\n\n**kwargs:\n    additional parameters to be passed to the\n    clustering method\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>Clusters' matrix, one-hot encoded: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">predict</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.base.Base.create_layer", "modulename": "nnetsauce.base", "qualname": "Base.create_layer", "kind": "function", "doc": "<p>Create hidden layer.</p>\n\n<p>Parameters:</p>\n\n<pre><code>scaled_X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\nW: {array-like}, shape = [n_features, hidden_features]\n    if provided, constructs the hidden layer with W; otherwise computed internally\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>Hidden layer matrix: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">scaled_X</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.base.Base.cook_training_set", "modulename": "nnetsauce.base", "qualname": "Base.cook_training_set", "kind": "function", "doc": "<p>Create new hidden features for training set, with hidden layer, center the response.</p>\n\n<p>Parameters:</p>\n\n<pre><code>y: array-like, shape = [n_samples]\n    Target values\n\nX: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\nW: {array-like}, shape = [n_features, hidden_features]\n    if provided, constructs the hidden layer via W\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>(centered response, direct link + hidden layer matrix): {tuple}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">X</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">W</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.base.Base.cook_test_set", "modulename": "nnetsauce.base", "qualname": "Base.cook_test_set", "kind": "function", "doc": "<p>Transform data from test set, with hidden layer.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\n**kwargs: additional parameters to be passed to self.encode_cluster\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>Transformed test set : {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.base.BaseRegressor", "modulename": "nnetsauce.base", "qualname": "BaseRegressor", "kind": "class", "doc": "<p>Random Vector Functional Link Network regression without shrinkage</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for hidden layer nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or\n    not (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original features are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for type_clust='kmeans' or type_clust='gmm'\n    clustering (could be 0: no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot);\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of features randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform', clustering and dropout\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: vector\n    regression coefficients\n\nGCV_: float\n    Generalized Cross-Validation error\n</code></pre>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.base.BaseRegressor.__init__", "modulename": "nnetsauce.base", "qualname": "BaseRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.base.BaseRegressor.fit", "modulename": "nnetsauce.base", "qualname": "BaseRegressor.fit", "kind": "function", "doc": "<p>Fit BaseRegressor to training data (X, y)</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\n**kwargs: additional parameters to be passed to self.cook_training_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.base.BaseRegressor.predict", "modulename": "nnetsauce.base", "qualname": "BaseRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\n**kwargs: additional parameters to be passed to self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.base.BaseRegressor.score", "modulename": "nnetsauce.base", "qualname": "BaseRegressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',\n                'neg_mean_squared_error', 'neg_mean_squared_log_error',\n                'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns:</p>\n\n<p>model scores: {array-like}</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.base.BaseRegressor.set_score_request", "modulename": "nnetsauce.base", "qualname": "BaseRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.boosting", "modulename": "nnetsauce.boosting", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.boosting.AdaBoostClassifier", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier", "kind": "class", "doc": "<p>AdaBoost Classification (SAMME) model class derived from class Boosting</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_estimators: int\n    number of boosting iterations\n\nlearning_rate: float\n    learning rate of the boosting procedure\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nreg_lambda: float\n    regularization parameter for weights\n\nreg_alpha: float\n    controls compromize between l1 and l2 norm of weights\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nmethod: str\n    type of Adaboost method, 'SAMME' (discrete) or 'SAMME.R' (real)\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>alpha_: list\n    AdaBoost coefficients alpha_m\n\nbase_learners_: dict\n    a dictionary containing the base learners\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/adaboost_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/adaboost_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LogisticRegression</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># SAMME.R</span>\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">LogisticRegression</span><span class=\"p\">(</span><span class=\"n\">solver</span><span class=\"o\">=</span><span class=\"s1\">&#39;liblinear&#39;</span><span class=\"p\">,</span> <span class=\"n\">multi_class</span> <span class=\"o\">=</span> <span class=\"s1\">&#39;ovr&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">AdaBoostClassifier</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span>\n                                <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">11.22338867</span><span class=\"p\">),</span>\n                                <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                <span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">250</span><span class=\"p\">,</span> <span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.01126343</span><span class=\"p\">,</span>\n                                <span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mf\">0.72684326</span><span class=\"p\">,</span> <span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mf\">0.86429443</span><span class=\"p\">,</span>\n                                <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">0.63078613</span><span class=\"p\">,</span> <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                                <span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s2\">&quot;gmm&quot;</span><span class=\"p\">,</span>\n                                <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">seed</span> <span class=\"o\">=</span> <span class=\"mi\">123</span><span class=\"p\">,</span>\n                                <span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s2\">&quot;SAMME.R&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.boosting.bst.Boosting, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.boosting.AdaBoostClassifier.__init__", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">reg_lambda</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">reg_alpha</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">method</span><span class=\"o\">=</span><span class=\"s1\">&#39;SAMME&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.boosting.AdaBoostClassifier.type_fit", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.boosting.AdaBoostClassifier.verbose", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.boosting.AdaBoostClassifier.method", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.method", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.boosting.AdaBoostClassifier.reg_lambda", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.reg_lambda", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.boosting.AdaBoostClassifier.reg_alpha", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.reg_alpha", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.boosting.AdaBoostClassifier.alpha_", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.alpha_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.boosting.AdaBoostClassifier.base_learners_", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.base_learners_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.boosting.AdaBoostClassifier.fit", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.fit", "kind": "function", "doc": "<p>Fit Boosting model to training data (X, y).</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code> self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.boosting.AdaBoostClassifier.predict", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n      self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.boosting.AdaBoostClassifier.predict_proba", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n      self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.boosting.AdaBoostClassifier.score", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('accuracy', 'average_precision',\n               'brier_score_loss', 'f1', 'f1_micro',\n               'f1_macro', 'f1_weighted',  'f1_samples',\n               'neg_log_loss', 'precision', 'recall',\n               'roc_auc')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.boosting.AdaBoostClassifier.set_fit_request", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.boosting.AdaBoostClassifier.set_score_request", "modulename": "nnetsauce.boosting", "qualname": "AdaBoostClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.custom", "modulename": "nnetsauce.custom", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.custom.Custom", "modulename": "nnetsauce.custom", "qualname": "Custom", "kind": "class", "doc": "<p>Custom model class derived from class Base</p>\n\n<p>This class is used to 'augment' any model with transformed features.</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n", "bases": "nnetsauce.base.base.Base"}, {"fullname": "nnetsauce.custom.Custom.__init__", "modulename": "nnetsauce.custom", "qualname": "Custom.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.custom.Custom.obj", "modulename": "nnetsauce.custom", "qualname": "Custom.obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.custom.CustomClassifier", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier", "kind": "class", "doc": "<p>Custom Classification model</p>\n\n<p>Attributes:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model''s\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.ensemble</span> <span class=\"kn\">import</span> <span class=\"n\">RandomForestClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_digits</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">digits</span> <span class=\"o\">=</span> <span class=\"n\">load_digits</span><span class=\"p\">()</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">digits</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># layer 1 (base layer) ----</span>\n<span class=\"n\">layer1_regr</span> <span class=\"o\">=</span> <span class=\"n\">RandomForestClassifier</span><span class=\"p\">(</span><span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n\n<span class=\"n\">layer1_regr</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Accuracy in layer 1</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">layer1_regr</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># layer 2 using layer 1 ----</span>\n<span class=\"n\">layer2_regr</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">CustomClassifier</span><span class=\"p\">(</span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">layer1_regr</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                        <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                        <span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;uniform&#39;</span><span class=\"p\">,</span> <span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">layer2_regr</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Accuracy in layer 2</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">layer2_regr</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n\n<span class=\"c1\"># layer 3 using layer 2 ----</span>\n<span class=\"n\">layer3_regr</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">CustomClassifier</span><span class=\"p\">(</span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">layer2_regr</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">10</span><span class=\"p\">,</span>\n                        <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">0.7</span><span class=\"p\">,</span>\n                        <span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;uniform&#39;</span><span class=\"p\">,</span> <span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span><span class=\"p\">,</span>\n                        <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">layer3_regr</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Accuracy in layer 3</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">layer3_regr</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.custom.CustomClassifier.__init__", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.custom.CustomClassifier.type_fit", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.custom.CustomClassifier.fit", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier.fit", "kind": "function", "doc": "<p>Fit custom model to training data (X, y).</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n            self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.custom.CustomClassifier.predict", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.custom.CustomClassifier.predict_proba", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.custom.CustomClassifier.score", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                     'neg_mean_squared_error', 'neg_mean_squared_log_error',                     'neg_median_absolute_error', 'r2')\n\n**kwargs: \n    additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.custom.CustomClassifier.set_fit_request", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.custom.CustomClassifier.set_score_request", "modulename": "nnetsauce.custom", "qualname": "CustomClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.custom.CustomRegressor", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor", "kind": "class", "doc": "<p>Custom Regression model</p>\n\n<p>This class is used to 'augment' any regression model with transformed features.</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\ntype_fit: str\n    'regression'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">TBD</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.custom.CustomRegressor.__init__", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.custom.CustomRegressor.type_fit", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.custom.CustomRegressor.fit", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.fit", "kind": "function", "doc": "<p>Fit custom model to training data (X, y).</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n    self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.custom.CustomRegressor.predict", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n    **kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.custom.CustomRegressor.score", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Parameters: </p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                     'neg_mean_squared_error', 'neg_mean_squared_log_error',                     'neg_median_absolute_error', 'r2')\n\n**kwargs: \n    additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.custom.CustomRegressor.set_fit_request", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.custom.CustomRegressor.set_score_request", "modulename": "nnetsauce.custom", "qualname": "CustomRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.deep", "modulename": "nnetsauce.deep", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.deep.DeepClassifier", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier", "kind": "class", "doc": "<p>Deep Classifier</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>verbose : int, optional (default=0)\n    Monitor progress when fitting.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LogisticRegressionCV</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">LogisticRegressionCV</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">DeepClassifier</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">),</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.customClassifier.CustomClassifier, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.deep.DeepClassifier.__init__", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.deep.DeepClassifier.stacked_obj", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.stacked_obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.deep.DeepClassifier.verbose", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.deep.DeepClassifier.n_layers", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.n_layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.deep.DeepClassifier.fit", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.fit", "kind": "function", "doc": "<p>Fit Classification algorithms to X and y.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A fitted object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.deep.DeepClassifier.predict", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.deep.DeepClassifier.predict_proba", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.deep.DeepClassifier.score", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                     'neg_mean_squared_error', 'neg_mean_squared_log_error',                     'neg_median_absolute_error', 'r2')\n\n**kwargs: \n    additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.deep.DeepClassifier.set_score_request", "modulename": "nnetsauce.deep", "qualname": "DeepClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.deep.DeepRegressor", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor", "kind": "class", "doc": "<p>Deep Regressor</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>verbose : int, optional (default=0)\n    Monitor progress when fitting.</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_diabetes</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">RidgeCV</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_diabetes</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">RidgeCV</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">DeepRegressor</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">),</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.customRegressor.CustomRegressor, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.deep.DeepRegressor.__init__", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.deep.DeepRegressor.stacked_obj", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor.stacked_obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.deep.DeepRegressor.verbose", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.deep.DeepRegressor.n_layers", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor.n_layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.deep.DeepRegressor.fit", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X and y.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>A fitted object</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.deep.DeepRegressor.predict", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n    **kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.deep.DeepRegressor.score", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Parameters: </p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                     'neg_mean_squared_error', 'neg_mean_squared_log_error',                     'neg_median_absolute_error', 'r2')\n\n**kwargs: \n    additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.deep.DeepRegressor.set_score_request", "modulename": "nnetsauce.deep", "qualname": "DeepRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.deep.DeepMTS", "modulename": "nnetsauce.deep", "qualname": "DeepMTS", "kind": "class", "doc": "<p>Univariate and multivariate time series (DeepMTS) forecasting with Quasi-Randomized networks (Work in progress /!)</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object.\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict()).\n\nn_layers: int.\n    number of layers in the neural network.\n\nn_hidden_features: int.\n    number of nodes in the hidden layer.\n\nactivation_name: str.\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'.\n\na: float.\n    hyperparameter for 'prelu' or 'elu' activation function.\n\nnodes_sim: str.\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'.\n\nbias: boolean.\n    indicates if the hidden layer contains a bias term (True) or not\n    (False).\n\ndropout: float.\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training.\n\ndirect_link: boolean.\n    indicates if the original predictors are included (True) in model's fitting or not (False).\n\nn_clusters: int.\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0: no clustering).\n\ncluster_encode: bool.\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding.\n\ntype_clust: str.\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm').\n\ntype_scaling: a tuple of 3 strings.\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax').\n\nlags: int.\n    number of lags used for each time series.\n\nreplications: int.\n    number of replications (if needed, for predictive simulation). Default is 'None'.\n\nkernel: str.\n    the kernel to use for residuals density estimation (used for predictive simulation). Currently, either 'gaussian' or 'tophat'.\n\nagg: str.\n    either \"mean\" or \"median\" for simulation of bootstrap aggregating\n\nseed: int.\n    reproducibility seed for nodes_sim=='uniform' or predictive simulation.\n\nbackend: str.\n    \"cpu\" or \"gpu\" or \"tpu\".\n\nverbose: int.\n    0: not printing; 1: printing\n\nshow_progress: bool.\n    True: progress bar when fitting each series; False: no progress bar when fitting each series\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>fit_objs_: dict\n    objects adjusted to each individual time series\n\ny_: {array-like}\n    DeepMTS responses (most recent observations first)\n\nX_: {array-like}\n    DeepMTS lags\n\nxreg_: {array-like}\n    external regressors\n\ny_means_: dict\n    a dictionary of each series mean values\n\npreds_: {array-like}\n    successive model predictions\n\npreds_std_: {array-like}\n    standard deviation around the predictions\n\nreturn_std_: boolean\n    return uncertainty or not (set in predict)\n\ndf_: data frame\n    the input data frame, in case a data.frame is provided to `fit`\n</code></pre>\n\n<p>Examples:</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n<span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">25</span><span class=\"o\">*</span><span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adjust Bayesian Ridge</span>\n<span class=\"n\">regr4</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">BayesianRidge</span><span class=\"p\">()</span>\n<span class=\"n\">obj_DeepMTS</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">DeepMTS</span><span class=\"p\">(</span><span class=\"n\">regr4</span><span class=\"p\">,</span> <span class=\"n\">lags</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># with credible intervals</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"s1\">&#39;date&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;2001-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2002-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2003-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2004-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2005-01-01&#39;</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series1&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mf\">35.6</span><span class=\"p\">,</span> <span class=\"mf\">33.3</span><span class=\"p\">,</span> <span class=\"mf\">38.1</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series2&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">5.5</span><span class=\"p\">,</span> <span class=\"mf\">5.6</span><span class=\"p\">,</span> <span class=\"mf\">6.3</span><span class=\"p\">,</span> <span class=\"mf\">5.1</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series3&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mf\">100.5</span><span class=\"p\">,</span> <span class=\"mf\">100.6</span><span class=\"p\">,</span> <span class=\"mf\">100.2</span><span class=\"p\">,</span> <span class=\"mf\">100.1</span><span class=\"p\">]}</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;date&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adjust Bayesian Ridge</span>\n<span class=\"n\">regr5</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">BayesianRidge</span><span class=\"p\">()</span>\n<span class=\"n\">obj_DeepMTS</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">DeepMTS</span><span class=\"p\">(</span><span class=\"n\">regr5</span><span class=\"p\">,</span> <span class=\"n\">lags</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># with credible intervals</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_DeepMTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.mts.mts.MTS"}, {"fullname": "nnetsauce.deep.DeepMTS.__init__", "modulename": "nnetsauce.deep", "qualname": "DeepMTS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">type_pi</span><span class=\"o\">=</span><span class=\"s1\">&#39;kde&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "nnetsauce.deep.DeepMTS.n_layers", "modulename": "nnetsauce.deep", "qualname": "DeepMTS.n_layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.deep.DeepMTS.obj", "modulename": "nnetsauce.deep", "qualname": "DeepMTS.obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.deep.DeepMTS.set_fit_request", "modulename": "nnetsauce.deep", "qualname": "DeepMTS.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.deep.DeepMTS.set_predict_request", "modulename": "nnetsauce.deep", "qualname": "DeepMTS.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.deep.DeepMTS.set_score_request", "modulename": "nnetsauce.deep", "qualname": "DeepMTS.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.demo", "modulename": "nnetsauce.demo", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.glm", "modulename": "nnetsauce.glm", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.glm.GLMClassifier", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier", "kind": "class", "doc": "<p>Generalized 'linear' models using quasi-randomized networks (classification)</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nlambda1: float\n    regularization parameter for GLM coefficients on original features\n\nalpha1: float\n    controls compromize between l1 and l2 norm of GLM coefficients on original features\n\nlambda2: float\n    regularization parameter for GLM coefficients on nonlinear features\n\nalpha2: float\n    controls compromize between l1 and l2 norm of GLM coefficients on nonlinear features\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\noptimizer: object\n    optimizer, from class nnetsauce.Optimizer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: vector\n    regression coefficients\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/glm_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/glm_classification.py</a></p>\n", "bases": "nnetsauce.glm.glm.GLM, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.glm.GLMClassifier.__init__", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">alpha1</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">alpha2</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">family</span><span class=\"o\">=</span><span class=\"s1\">&#39;expit&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span><span class=\"o\">=&lt;</span><span class=\"n\">nnetsauce</span><span class=\"o\">.</span><span class=\"n\">optimizers</span><span class=\"o\">.</span><span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">Optimizer</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span></span>)</span>"}, {"fullname": "nnetsauce.glm.GLMClassifier.family", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.family", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.glm.GLMClassifier.logit_loss", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.logit_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.glm.GLMClassifier.expit_erf_loss", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.expit_erf_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.glm.GLMClassifier.loss_func", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.loss_func", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span>,</span><span class=\"param\">\t<span class=\"n\">group_index</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">Y</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">row_index</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">type_loss</span><span class=\"o\">=</span><span class=\"s1\">&#39;logit&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.glm.GLMClassifier.fit", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.fit", "kind": "function", "doc": "<p>Fit GLM model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.glm.GLMClassifier.predict", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.glm.GLMClassifier.predict_proba", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.glm.GLMClassifier.score", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('accuracy', 'average_precision',                             'brier_score_loss', 'f1', 'f1_micro',                             'f1_macro', 'f1_weighted',  'f1_samples',                             'neg_log_loss', 'precision', 'recall',                             'roc_auc')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.glm.GLMClassifier.set_score_request", "modulename": "nnetsauce.glm", "qualname": "GLMClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.glm.GLMRegressor", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor", "kind": "class", "doc": "<p>Generalized 'linear' models using quasi-randomized networks (regression)</p>\n\n<p>Attributes:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nlambda1: float\n    regularization parameter for GLM coefficients on original features\n\nalpha1: float\n    controls compromize between l1 and l2 norm of GLM coefficients on original features\n\nlambda2: float\n    regularization parameter for GLM coefficients on nonlinear features\n\nalpha2: float\n    controls compromize between l1 and l2 norm of GLM coefficients on nonlinear features\n\nfamily: str\n    \"gaussian\", \"laplace\" or \"poisson\" (for now)\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\noptimizer: object\n    optimizer, from class nnetsauce.utils.Optimizer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: vector\n    regression coefficients\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/glm_regression.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/glm_regression.py</a></p>\n", "bases": "nnetsauce.glm.glm.GLM, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.glm.GLMRegressor.__init__", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">alpha1</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">alpha2</span><span class=\"o\">=</span><span class=\"mf\">0.5</span>,</span><span class=\"param\">\t<span class=\"n\">family</span><span class=\"o\">=</span><span class=\"s1\">&#39;gaussian&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">optimizer</span><span class=\"o\">=&lt;</span><span class=\"n\">nnetsauce</span><span class=\"o\">.</span><span class=\"n\">optimizers</span><span class=\"o\">.</span><span class=\"n\">optimizer</span><span class=\"o\">.</span><span class=\"n\">Optimizer</span> <span class=\"nb\">object</span><span class=\"o\">&gt;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span></span>)</span>"}, {"fullname": "nnetsauce.glm.GLMRegressor.family", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.family", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.glm.GLMRegressor.gaussian_loss", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.gaussian_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.glm.GLMRegressor.laplace_loss", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.laplace_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.glm.GLMRegressor.poisson_loss", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.poisson_loss", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">row_index</span>, </span><span class=\"param\"><span class=\"n\">XB</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.glm.GLMRegressor.loss_func", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.loss_func", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">beta</span>,</span><span class=\"param\">\t<span class=\"n\">group_index</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">row_index</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">type_loss</span><span class=\"o\">=</span><span class=\"s1\">&#39;gaussian&#39;</span>,</span><span class=\"param\">\t<span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.glm.GLMRegressor.fit", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.fit", "kind": "function", "doc": "<p>Fit GLM model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.glm.GLMRegressor.predict", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.glm.GLMRegressor.score", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.glm.GLMRegressor.set_score_request", "modulename": "nnetsauce.glm", "qualname": "GLMRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict", "modulename": "nnetsauce.lazypredict", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyClassifier", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier", "kind": "class", "doc": "<p>This module helps in fitting to all the classification algorithms that are available in Scikit-learn to nnetsauce's CustomClassifier</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>verbose : int, optional (default=0)\n    For the liblinear and lbfgs solvers set verbose to any positive\n    number for verbosity.\nignore_warnings : bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not able to run are ignored.\ncustom_metric : function, optional (default=None)\n    When function is provided, models are evaluated based on the custom evaluation metric provided.\npredictions : bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\nclassifiers : list, optional (default=\"all\")\n    When function is provided, trains the chosen classifier(s).\nn_jobs : int, when possible, run in parallel</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">LazyClassifier</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model_dictionary</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">provide_models</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span><span class=\"n\">X_test</span><span class=\"p\">,</span><span class=\"n\">y_train</span><span class=\"p\">,</span><span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.lazypredict.LazyClassifier.__init__", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">classifiers</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.lazypredict.LazyClassifier.verbose", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyClassifier.ignore_warnings", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyClassifier.custom_metric", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyClassifier.predictions", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.predictions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyClassifier.models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyClassifier.random_state", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyClassifier.classifiers", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.classifiers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyClassifier.preprocess", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.preprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyClassifier.n_jobs", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyClassifier.fit", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.fit", "kind": "function", "doc": "<p>Fit Classification algorithms to X_train and y_train, predict and score on X_test, y_test.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>scores : Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\npredictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyClassifier.provide_models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyClassifier.set_fit_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyClassifier.set_score_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyRegressor", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor", "kind": "class", "doc": "<p>This module helps in fitting regression models that are available in Scikit-learn to nnetsauce's CustomRegressor</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>verbose : int, optional (default=0)\n    For the liblinear and lbfgs solvers set verbose to any positive\n    number for verbosity.\nignore_warnings : bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not able to run are ignored.\ncustom_metric : function, optional (default=None)\n    When function is provided, models are evaluated based on the custom evaluation metric provided.\nprediction : bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\nregressors : list, optional (default=\"all\")\n    When function is provided, trains the chosen regressor(s).\nn_jobs : int, when possible, run in parallel</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">lazypredict.Supervised</span> <span class=\"kn\">import</span> <span class=\"n\">LazyRegressor</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.utils</span> <span class=\"kn\">import</span> <span class=\"n\">shuffle</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diabetes</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">load_diabetes</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">diabetes</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">diabetes</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mf\">0.9</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[:</span><span class=\"n\">offset</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">[:</span><span class=\"n\">offset</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">:],</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">:]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reg</span> <span class=\"o\">=</span> <span class=\"n\">LazyRegressor</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">reg</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model_dictionary</span> <span class=\"o\">=</span> <span class=\"n\">reg</span><span class=\"o\">.</span><span class=\"n\">provide_models</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.lazypredict.LazyRegressor.__init__", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">regressors</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.lazypredict.LazyRegressor.verbose", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyRegressor.ignore_warnings", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyRegressor.custom_metric", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyRegressor.predictions", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.predictions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyRegressor.models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyRegressor.random_state", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyRegressor.regressors", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.regressors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyRegressor.preprocess", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.preprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyRegressor.n_jobs", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyRegressor.fit", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X_train and y_train, predict and score on X_test, y_test.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>scores : Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\npredictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyRegressor.provide_models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyRegressor.set_fit_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyRegressor.set_score_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyMTS", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS", "kind": "class", "doc": "<p>This module helps in fitting regression models that are available in Scikit-learn to nnetsauce's MTS</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>verbose : int, optional (default=0)\n    For the liblinear and lbfgs solvers set verbose to any positive\n    number for verbosity.\nignore_warnings : bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not able to run are ignored.\ncustom_metric : function, optional (default=None)\n    When function is provided, models are evaluated based on the custom evaluation metric provided.\nprediction : bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\nregressors : list, optional (default=\"all\")\n    When function is provided, trains the chosen regressor(s).</p>\n\n<h2 id=\"examples\">Examples</h2>\n", "bases": "nnetsauce.mts.mts.MTS"}, {"fullname": "nnetsauce.lazypredict.LazyMTS.__init__", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">regressors</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "nnetsauce.lazypredict.LazyMTS.verbose", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyMTS.ignore_warnings", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyMTS.custom_metric", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyMTS.predictions", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.predictions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyMTS.models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyMTS.random_state", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyMTS.regressors", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.regressors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyMTS.preprocess", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.preprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyMTS.fit", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X_train, predict and score on X_test.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>scores : Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\npredictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">new_xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyMTS.provide_models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyMTS.set_fit_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyMTS.set_predict_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyMTS.set_score_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyMTS.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier", "kind": "class", "doc": "<p>This module helps in fitting to all the classification algorithms that are available in Scikit-learn to nnetsauce's CustomClassifier</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>verbose : int, optional (default=0)\n    For the liblinear and lbfgs solvers set verbose to any positive\n    number for verbosity.\nignore_warnings : bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not able to run are ignored.\ncustom_metric : function, optional (default=None)\n    When function is provided, models are evaluated based on the custom evaluation metric provided.\nprediction : bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\nclassifiers : list, optional (default=\"all\")\n    When function is provided, trains the chosen classifier(s).\nn_jobs : int, when possible, run in parallel</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">data</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">y</span><span class=\"o\">=</span> <span class=\"n\">data</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">LazyDeepClassifier</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model_dictionary</span> <span class=\"o\">=</span> <span class=\"n\">clf</span><span class=\"o\">.</span><span class=\"n\">provide_models</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span><span class=\"n\">X_test</span><span class=\"p\">,</span><span class=\"n\">y_train</span><span class=\"p\">,</span><span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.__init__", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">classifiers</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.verbose", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.ignore_warnings", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.custom_metric", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.predictions", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.predictions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.random_state", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.classifiers", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.classifiers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.n_layers", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.n_layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.n_jobs", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.fit", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.fit", "kind": "function", "doc": "<p>Fit Classification algorithms to X_train and y_train, predict and score on X_test, y_test.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>scores : Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\npredictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.provide_models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.set_fit_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyDeepClassifier.set_score_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor", "kind": "class", "doc": "<p>This module helps in fitting regression models that are available in Scikit-learn to nnetsauce's CustomRegressor</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>verbose : int, optional (default=0)\n    For the liblinear and lbfgs solvers set verbose to any positive\n    number for verbosity.\nignore_warnings : bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not able to run are ignored.\ncustom_metric : function, optional (default=None)\n    When function is provided, models are evaluated based on the custom evaluation metric provided.\nprediction : bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\nregressors : list, optional (default=\"all\")\n    When function is provided, trains the chosen regressor(s).\nn_jobs : int, when possible, run in parallel</p>\n\n<h2 id=\"examples\">Examples</h2>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">lazypredict.Supervised</span> <span class=\"kn\">import</span> <span class=\"n\">LazyRegressor</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">datasets</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">from</span> <span class=\"nn\">sklearn.utils</span> <span class=\"kn\">import</span> <span class=\"n\">shuffle</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">diabetes</span> <span class=\"o\">=</span> <span class=\"n\">datasets</span><span class=\"o\">.</span><span class=\"n\">load_diabetes</span><span class=\"p\">()</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">shuffle</span><span class=\"p\">(</span><span class=\"n\">diabetes</span><span class=\"o\">.</span><span class=\"n\">data</span><span class=\"p\">,</span> <span class=\"n\">diabetes</span><span class=\"o\">.</span><span class=\"n\">target</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">astype</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">float32</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">offset</span> <span class=\"o\">=</span> <span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"o\">.</span><span class=\"n\">shape</span><span class=\"p\">[</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">*</span> <span class=\"mf\">0.9</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[:</span><span class=\"n\">offset</span><span class=\"p\">],</span> <span class=\"n\">y</span><span class=\"p\">[:</span><span class=\"n\">offset</span><span class=\"p\">]</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">X</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">:],</span> <span class=\"n\">y</span><span class=\"p\">[</span><span class=\"n\">offset</span><span class=\"p\">:]</span>\n</code></pre>\n</div>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">reg</span> <span class=\"o\">=</span> <span class=\"n\">LazyDeepRegressor</span><span class=\"p\">(</span><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span> <span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">models</span><span class=\"p\">,</span> <span class=\"n\">predictions</span> <span class=\"o\">=</span> <span class=\"n\">reg</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"n\">model_dictionary</span> <span class=\"o\">=</span> <span class=\"n\">reg</span><span class=\"o\">.</span><span class=\"n\">provide_models</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)</span>\n<span class=\"gp\">&gt;&gt;&gt; </span><span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">models</span><span class=\"p\">)</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.custom.custom.Custom, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.__init__", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">regressors</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.verbose", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.ignore_warnings", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.custom_metric", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.predictions", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.predictions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.random_state", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.regressors", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.regressors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.n_layers", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.n_layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.n_jobs", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.fit", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X_train and y_train, predict and score on X_test, y_test.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>scores : Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\npredictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.provide_models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.\ny_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\ny_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">y_train</span>, </span><span class=\"param\"><span class=\"n\">y_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.set_fit_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyDeepRegressor.set_score_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyDeepMTS", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS", "kind": "class", "doc": "<p>This module helps in fitting regression models that are available in Scikit-learn to nnetsauce's MTS</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>verbose : int, optional (default=0)\n    For the liblinear and lbfgs solvers set verbose to any positive\n    number for verbosity.\nignore_warnings : bool, optional (default=True)\n    When set to True, the warning related to algorigms that are not able to run are ignored.\ncustom_metric : function, optional (default=None)\n    When function is provided, models are evaluated based on the custom evaluation metric provided.\nprediction : bool, optional (default=False)\n    When set to True, the predictions of all the models models are returned as dataframe.\nregressors : list, optional (default=\"all\")\n    When function is provided, trains the chosen regressor(s).</p>\n\n<h2 id=\"examples\">Examples</h2>\n", "bases": "nnetsauce.mts.mts.MTS"}, {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.__init__", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">ignore_warnings</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">custom_metric</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">predictions</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">42</span>,</span><span class=\"param\">\t<span class=\"n\">regressors</span><span class=\"o\">=</span><span class=\"s1\">&#39;all&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">preprocess</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_layers</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.verbose", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.ignore_warnings", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.ignore_warnings", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.custom_metric", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.custom_metric", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.predictions", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.predictions", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.models", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.random_state", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.random_state", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.regressors", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.regressors", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.preprocess", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.preprocess", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.n_layers", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.n_layers", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.fit", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.fit", "kind": "function", "doc": "<p>Fit Regression algorithms to X_train, predict and score on X_test.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>scores : Pandas DataFrame\n    Returns metrics of all the models in a Pandas DataFrame.\npredictions : Pandas DataFrame\n    Returns predictions of all the models in a Pandas DataFrame.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span>, </span><span class=\"param\"><span class=\"n\">xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">new_xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.provide_models", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.provide_models", "kind": "function", "doc": "<p>This function returns all the model objects trained in fit function.\nIf fit is not called already, then we call fit and then return the models.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X_train : array-like,\n    Training vectors, where rows is the number of samples\n    and columns is the number of features.\nX_test : array-like,\n    Testing vectors, where rows is the number of samples\n    and columns is the number of features.</p>\n\n<h2 id=\"returns\">Returns</h2>\n\n<p>models: dict-object,\n    Returns a dictionary with each model pipeline as value\n    with key as name of models.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X_train</span>, </span><span class=\"param\"><span class=\"n\">X_test</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.set_fit_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.set_predict_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.lazypredict.LazyDeepMTS.set_score_request", "modulename": "nnetsauce.lazypredict", "qualname": "LazyDeepMTS.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.mts", "modulename": "nnetsauce.mts", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS", "modulename": "nnetsauce.mts", "qualname": "MTS", "kind": "class", "doc": "<p>Univariate and multivariate time series (MTS) forecasting with Quasi-Randomized networks (Work in progress /!)</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object.\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict()).\n\nn_hidden_features: int.\n    number of nodes in the hidden layer.\n\nactivation_name: str.\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'.\n\na: float.\n    hyperparameter for 'prelu' or 'elu' activation function.\n\nnodes_sim: str.\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'.\n\nbias: boolean.\n    indicates if the hidden layer contains a bias term (True) or not\n    (False).\n\ndropout: float.\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training.\n\ndirect_link: boolean.\n    indicates if the original predictors are included (True) in model's fitting or not (False).\n\nn_clusters: int.\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0: no clustering).\n\ncluster_encode: bool.\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding.\n\ntype_clust: str.\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm').\n\ntype_scaling: a tuple of 3 strings.\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax').\n\nlags: int.\n    number of lags used for each time series.\n\nreplications: int.\n    number of replications (if needed, for predictive simulation). Default is 'None'.\n\nkernel: str.\n    the kernel to use for residuals density estimation (used for predictive simulation). Currently, either 'gaussian' or 'tophat'.\n\nagg: str.\n    either \"mean\" or \"median\" for simulation of bootstrap aggregating\n\nseed: int.\n    reproducibility seed for nodes_sim=='uniform' or predictive simulation.\n\nbackend: str.\n    \"cpu\" or \"gpu\" or \"tpu\".\n\nverbose: int.\n    0: not printing; 1: printing\n\nshow_progress: bool.\n    True: progress bar when fitting each series; False: no progress bar when fitting each series\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>fit_objs_: dict\n    objects adjusted to each individual time series\n\ny_: {array-like}\n    MTS responses (most recent observations first)\n\nX_: {array-like}\n    MTS lags\n\nxreg_: {array-like}\n    external regressors\n\ny_means_: dict\n    a dictionary of each series mean values\n\npreds_: {array-like}\n    successive model predictions\n\npreds_std_: {array-like}\n    standard deviation around the predictions\n\nreturn_std_: boolean\n    return uncertainty or not (set in predict)\n\ndf_: data frame\n    the input data frame, in case a data.frame is provided to `fit`\n</code></pre>\n\n<p>Examples:</p>\n\n<p>Example 1:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n\n<span class=\"n\">M</span> <span class=\"o\">=</span> <span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">rand</span><span class=\"p\">(</span><span class=\"mi\">10</span><span class=\"p\">,</span> <span class=\"mi\">3</span><span class=\"p\">)</span>\n<span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">10</span><span class=\"o\">*</span><span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">0</span><span class=\"p\">]</span>\n<span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span> <span class=\"o\">=</span> <span class=\"mi\">25</span><span class=\"o\">*</span><span class=\"n\">M</span><span class=\"p\">[:,</span><span class=\"mi\">2</span><span class=\"p\">]</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adjust Bayesian Ridge</span>\n<span class=\"n\">regr4</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">BayesianRidge</span><span class=\"p\">()</span>\n<span class=\"n\">obj_MTS</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">MTS</span><span class=\"p\">(</span><span class=\"n\">regr4</span><span class=\"p\">,</span> <span class=\"n\">lags</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">M</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># with credible intervals</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n\n<p>Example 2:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">linear_model</span>\n\n<span class=\"n\">dataset</span> <span class=\"o\">=</span> <span class=\"p\">{</span>\n<span class=\"s1\">&#39;date&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"s1\">&#39;2001-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2002-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2003-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2004-01-01&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;2005-01-01&#39;</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series1&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">34</span><span class=\"p\">,</span> <span class=\"mi\">30</span><span class=\"p\">,</span> <span class=\"mf\">35.6</span><span class=\"p\">,</span> <span class=\"mf\">33.3</span><span class=\"p\">,</span> <span class=\"mf\">38.1</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series2&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">4</span><span class=\"p\">,</span> <span class=\"mf\">5.5</span><span class=\"p\">,</span> <span class=\"mf\">5.6</span><span class=\"p\">,</span> <span class=\"mf\">6.3</span><span class=\"p\">,</span> <span class=\"mf\">5.1</span><span class=\"p\">],</span>\n<span class=\"s1\">&#39;series3&#39;</span> <span class=\"p\">:</span> <span class=\"p\">[</span><span class=\"mi\">100</span><span class=\"p\">,</span> <span class=\"mf\">100.5</span><span class=\"p\">,</span> <span class=\"mf\">100.6</span><span class=\"p\">,</span> <span class=\"mf\">100.2</span><span class=\"p\">,</span> <span class=\"mf\">100.1</span><span class=\"p\">]}</span>\n<span class=\"n\">df</span> <span class=\"o\">=</span> <span class=\"n\">pd</span><span class=\"o\">.</span><span class=\"n\">DataFrame</span><span class=\"p\">(</span><span class=\"n\">dataset</span><span class=\"p\">)</span><span class=\"o\">.</span><span class=\"n\">set_index</span><span class=\"p\">(</span><span class=\"s1\">&#39;date&#39;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Adjust Bayesian Ridge</span>\n<span class=\"n\">regr5</span> <span class=\"o\">=</span> <span class=\"n\">linear_model</span><span class=\"o\">.</span><span class=\"n\">BayesianRidge</span><span class=\"p\">()</span>\n<span class=\"n\">obj_MTS</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">MTS</span><span class=\"p\">(</span><span class=\"n\">regr5</span><span class=\"p\">,</span> <span class=\"n\">lags</span> <span class=\"o\">=</span> <span class=\"mi\">1</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">)</span>\n<span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">df</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">())</span>\n\n<span class=\"c1\"># with credible intervals</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">80</span><span class=\"p\">))</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">obj_MTS</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base"}, {"fullname": "nnetsauce.mts.MTS.__init__", "modulename": "nnetsauce.mts", "qualname": "MTS.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lags</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">type_pi</span><span class=\"o\">=</span><span class=\"s1\">&#39;kde&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">replications</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">kernel</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">agg</span><span class=\"o\">=</span><span class=\"s1\">&#39;mean&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">show_progress</span><span class=\"o\">=</span><span class=\"kc\">True</span></span>)</span>"}, {"fullname": "nnetsauce.mts.MTS.obj", "modulename": "nnetsauce.mts", "qualname": "MTS.obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.n_series", "modulename": "nnetsauce.mts", "qualname": "MTS.n_series", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.lags", "modulename": "nnetsauce.mts", "qualname": "MTS.lags", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.type_pi", "modulename": "nnetsauce.mts", "qualname": "MTS.type_pi", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.replications", "modulename": "nnetsauce.mts", "qualname": "MTS.replications", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.kernel", "modulename": "nnetsauce.mts", "qualname": "MTS.kernel", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.agg", "modulename": "nnetsauce.mts", "qualname": "MTS.agg", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.verbose", "modulename": "nnetsauce.mts", "qualname": "MTS.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.show_progress", "modulename": "nnetsauce.mts", "qualname": "MTS.show_progress", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.series_names", "modulename": "nnetsauce.mts", "qualname": "MTS.series_names", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.input_dates", "modulename": "nnetsauce.mts", "qualname": "MTS.input_dates", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.fit_objs_", "modulename": "nnetsauce.mts", "qualname": "MTS.fit_objs_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.y_", "modulename": "nnetsauce.mts", "qualname": "MTS.y_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.X_", "modulename": "nnetsauce.mts", "qualname": "MTS.X_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.xreg_", "modulename": "nnetsauce.mts", "qualname": "MTS.xreg_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.y_means_", "modulename": "nnetsauce.mts", "qualname": "MTS.y_means_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.mean_", "modulename": "nnetsauce.mts", "qualname": "MTS.mean_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.upper_", "modulename": "nnetsauce.mts", "qualname": "MTS.upper_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.lower_", "modulename": "nnetsauce.mts", "qualname": "MTS.lower_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.output_dates_", "modulename": "nnetsauce.mts", "qualname": "MTS.output_dates_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.preds_std_", "modulename": "nnetsauce.mts", "qualname": "MTS.preds_std_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.alpha_", "modulename": "nnetsauce.mts", "qualname": "MTS.alpha_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.return_std_", "modulename": "nnetsauce.mts", "qualname": "MTS.return_std_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.df_", "modulename": "nnetsauce.mts", "qualname": "MTS.df_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.residuals_", "modulename": "nnetsauce.mts", "qualname": "MTS.residuals_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.residuals_sims_", "modulename": "nnetsauce.mts", "qualname": "MTS.residuals_sims_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.kde_", "modulename": "nnetsauce.mts", "qualname": "MTS.kde_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.sims_", "modulename": "nnetsauce.mts", "qualname": "MTS.sims_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.mts.MTS.fit", "modulename": "nnetsauce.mts", "qualname": "MTS.fit", "kind": "function", "doc": "<p>Fit MTS model to training data X, with optional regressors xreg</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training time series, where n_samples is the number\n    of samples and n_features is the number of features;\n    X must be in increasing order (most recent observations last)\n\nxreg: {array-like}, shape = [n_samples, n_features_xreg]\n    Additional regressors to be passed to obj\n    xreg must be in increasing order (most recent observations last)\n\n**kwargs: for now, additional parameters to be passed to for kernel density estimation, when needed (see sklearn.neighbors.KernelDensity)\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.mts.MTS.predict", "modulename": "nnetsauce.mts", "qualname": "MTS.predict", "kind": "function", "doc": "<p>Forecast all the time series, h steps ahead</p>\n\n<p>Parameters:</p>\n\n<pre><code>h: {integer}\n    Forecasting horizon\n\nlevel: {integer}\n    Level of confidence (if obj has option 'return_std' and the\n    posterior is gaussian)\n\nnew_xreg: {array-like}, shape = [n_samples = h, n_new_xreg]\n    New values of additional (deterministic) regressors on horizon = h\n    new_xreg must be in increasing order (most recent observations last)\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions for horizon = h: {array-like}, data frame or tuple.\nStandard deviation and prediction intervals are returned when\n`obj.predict` can return standard deviation\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">h</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">level</span><span class=\"o\">=</span><span class=\"mi\">95</span>, </span><span class=\"param\"><span class=\"n\">new_xreg</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.mts.MTS.score", "modulename": "nnetsauce.mts", "qualname": "MTS.score", "kind": "function", "doc": "<p>Train on training_index, score on testing_index.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">training_index</span>, </span><span class=\"param\"><span class=\"n\">testing_index</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.mts.MTS.plot", "modulename": "nnetsauce.mts", "qualname": "MTS.plot", "kind": "function", "doc": "<p>Plot time series forecast</p>\n\n<p>Parameters:</p>\n\n<pre><code>series: {integer} or {string}\n    series index or name\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">series</span>, </span><span class=\"param\"><span class=\"n\">type_axis</span><span class=\"o\">=</span><span class=\"s1\">&#39;dates&#39;</span>, </span><span class=\"param\"><span class=\"n\">type_plot</span><span class=\"o\">=</span><span class=\"s1\">&#39;pi&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.mts.MTS.set_fit_request", "modulename": "nnetsauce.mts", "qualname": "MTS.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.mts.MTS.set_predict_request", "modulename": "nnetsauce.mts", "qualname": "MTS.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.mts.MTS.set_score_request", "modulename": "nnetsauce.mts", "qualname": "MTS.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.multitask", "modulename": "nnetsauce.multitask", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.multitask.MultitaskClassifier", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier", "kind": "class", "doc": "<p>Multitask Classification model based on regression models, with shared covariates</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object (must be a regression model) containing a method fit (obj.fit())\n    and a method predict (obj.predict())\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>fit_objs_: dict\n    objects adjusted to each individual time series\n\nn_classes_: int\n    number of classes for the classifier\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/mtask_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/mtask_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LinearRegression</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Linear Regression is used</span>\n<span class=\"n\">regr</span> <span class=\"o\">=</span> <span class=\"n\">LinearRegression</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">MultitaskClassifier</span><span class=\"p\">(</span><span class=\"n\">regr</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span><span class=\"p\">,</span>\n                            <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s2\">&quot;gmm&quot;</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.multitask.MultitaskClassifier.__init__", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.multitask.MultitaskClassifier.type_fit", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.multitask.MultitaskClassifier.obj", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.multitask.MultitaskClassifier.fit_objs_", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.fit_objs_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.multitask.MultitaskClassifier.fit", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.fit", "kind": "function", "doc": "<p>Fit MultitaskClassifier to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.multitask.MultitaskClassifier.predict", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.multitask.MultitaskClassifier.predict_proba", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.multitask.MultitaskClassifier.score", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.multitask.MultitaskClassifier.set_fit_request", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.multitask.MultitaskClassifier.set_score_request", "modulename": "nnetsauce.multitask", "qualname": "MultitaskClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier", "kind": "class", "doc": "<p>Multitask Classification model based on regression models, with shared covariates</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object (must be a regression model) containing a method fit (obj.fit())\n    and a method predict (obj.predict())\n\nseed: int\n    reproducibility seed\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>fit_objs_: dict\n    objects adjusted to each individual time series\n\nn_classes_: int\n    number of classes for the classifier\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.linear_model</span> <span class=\"kn\">import</span> <span class=\"n\">LinearRegression</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"o\">+</span><span class=\"mi\">2</span><span class=\"o\">*</span><span class=\"mi\">10</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Linear Regression is used</span>\n<span class=\"n\">regr</span> <span class=\"o\">=</span> <span class=\"n\">LinearRegression</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">SimpleMultitaskClassifier</span><span class=\"p\">(</span><span class=\"n\">regr</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.__init__", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">obj</span></span>)</span>"}, {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.type_fit", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.obj", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.obj", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.fit_objs_", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.fit_objs_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.X_scaler_", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.X_scaler_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.scaled_X_", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.scaled_X_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.fit", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.fit", "kind": "function", "doc": "<p>Fit SimpleMultitaskClassifier to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">sample_weight</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.predict", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.predict_proba", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.score", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.set_fit_request", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.multitask.SimpleMultitaskClassifier.set_score_request", "modulename": "nnetsauce.multitask", "qualname": "SimpleMultitaskClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.optimizers", "modulename": "nnetsauce.optimizers", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.optimizers.Optimizer", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer", "kind": "class", "doc": "<p>Optimizer class</p>\n\n<p>Attributes:</p>\n\n<pre><code>type_optim: str\n    type of optimizer, (currently) either 'sgd' (stochastic minibatch gradient descent)\n    or 'scd' (stochastic minibatch coordinate descent)\n\nnum_iters: int\n    number of iterations of the optimizer\n\nlearning_rate: float\n    step size\n\nbatch_prop: float\n    proportion of the initial data used at each optimization step\n\nlearning_method: str\n    \"poly\" - learning rate decreasing as a polynomial function\n    of # of iterations (default)\n    \"exp\" - learning rate decreasing as an exponential function\n    of # of iterations\n    \"momentum\" - gradient descent using momentum\n\nrandomization: str\n    type of randomization applied at each step\n    \"strat\" - stratified subsampling (default)\n    \"shuffle\" - random subsampling\n\nmass: float\n    mass on velocity, for `method` == \"momentum\"\n\ndecay: float\n    coefficient of decrease of the learning rate for\n    `method` == \"poly\" and `method` == \"exp\"\n\ntolerance: float\n    early stopping parameter (convergence of loss function)\n\nverbose: int\n    controls verbosity of gradient descent\n    0 - nothing is printed\n    1 - a progress bar is printed\n    2 - successive loss function values are printed\n</code></pre>\n"}, {"fullname": "nnetsauce.optimizers.Optimizer.__init__", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">type_optim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sgd&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">num_iters</span><span class=\"o\">=</span><span class=\"mi\">100</span>,</span><span class=\"param\">\t<span class=\"n\">learning_rate</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">batch_prop</span><span class=\"o\">=</span><span class=\"mf\">1.0</span>,</span><span class=\"param\">\t<span class=\"n\">learning_method</span><span class=\"o\">=</span><span class=\"s1\">&#39;momentum&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">randomization</span><span class=\"o\">=</span><span class=\"s1\">&#39;strat&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">mass</span><span class=\"o\">=</span><span class=\"mf\">0.9</span>,</span><span class=\"param\">\t<span class=\"n\">decay</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">tolerance</span><span class=\"o\">=</span><span class=\"mf\">0.001</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span></span>)</span>"}, {"fullname": "nnetsauce.optimizers.Optimizer.type_optim", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.type_optim", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.optimizers.Optimizer.num_iters", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.num_iters", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.optimizers.Optimizer.learning_rate", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.learning_rate", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.optimizers.Optimizer.batch_prop", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.batch_prop", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.optimizers.Optimizer.learning_method", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.learning_method", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.optimizers.Optimizer.randomization", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.randomization", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.optimizers.Optimizer.mass", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.mass", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.optimizers.Optimizer.decay", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.decay", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.optimizers.Optimizer.tolerance", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.tolerance", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.optimizers.Optimizer.verbose", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.optimizers.Optimizer.opt", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.opt", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.optimizers.Optimizer.fit", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.fit", "kind": "function", "doc": "<p>Fit GLM model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>loss_func: loss function\n\nresponse: array-like, shape = [n_samples]\ntarget variable (used for subsampling)\n\nx0: array-like, shape = [n_features]\n    initial value provided to the optimizer\n\n**kwargs: additional parameters to be passed to\n        loss function\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">loss_func</span>, </span><span class=\"param\"><span class=\"n\">response</span>, </span><span class=\"param\"><span class=\"n\">x0</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.optimizers.Optimizer.one_hot_encode", "modulename": "nnetsauce.optimizers", "qualname": "Optimizer.one_hot_encode", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">n_classes</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.randombag", "modulename": "nnetsauce.randombag", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.randombag.RandomBagClassifier", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier", "kind": "class", "doc": "<p>Randomized 'Bagging' Classification model</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_estimators: int\n    number of boosting iterations\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>voter_: dict\n    dictionary containing all the fitted base-learners\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/randombag_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/randombag_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.tree</span> <span class=\"kn\">import</span> <span class=\"n\">DecisionTreeClassifier</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># decision tree</span>\n<span class=\"n\">clf</span> <span class=\"o\">=</span> <span class=\"n\">DecisionTreeClassifier</span><span class=\"p\">(</span><span class=\"n\">max_depth</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">RandomBagClassifier</span><span class=\"p\">(</span><span class=\"n\">clf</span><span class=\"p\">,</span> <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                                <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span>\n                                <span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">100</span><span class=\"p\">,</span>\n                                <span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span>\n                                <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">0.3</span><span class=\"p\">,</span> <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.randombag.bag.RandomBag, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.randombag.RandomBagClassifier.__init__", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.randombag.RandomBagClassifier.type_fit", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.randombag.RandomBagClassifier.verbose", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.randombag.RandomBagClassifier.n_jobs", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.randombag.RandomBagClassifier.voter_", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.voter_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.randombag.RandomBagClassifier.fit", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.fit", "kind": "function", "doc": "<p>Fit Random 'Bagging' model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.randombag.RandomBagClassifier.predict", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.randombag.RandomBagClassifier.predict_proba", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.randombag.RandomBagClassifier.score", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.randombag.RandomBagClassifier.set_predict_request", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.randombag.RandomBagClassifier.set_predict_proba_request", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.set_predict_proba_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.randombag.RandomBagClassifier.set_score_request", "modulename": "nnetsauce.randombag", "qualname": "RandomBagClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.randombag.RandomBagRegressor", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor", "kind": "class", "doc": "<p>Randomized 'Bagging' Regression model</p>\n\n<p>Parameters:</p>\n\n<pre><code>obj: object\n    any object containing a method fit (obj.fit()) and a method predict\n    (obj.predict())\n\nn_estimators: int\n    number of boosting iterations\n\nn_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model''s\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\ncol_sample: float\n    percentage of covariates randomly chosen for training\n\nrow_sample: float\n    percentage of rows chosen for training, by stratified bootstrapping\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>voter_: dict\n    dictionary containing all the fitted base-learners\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">fetch_california_housing</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.tree</span> <span class=\"kn\">import</span> <span class=\"n\">DecisionTreeRegressor</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n\n<span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">fetch_california_housing</span><span class=\"p\">(</span><span class=\"n\">return_X_y</span><span class=\"o\">=</span><span class=\"kc\">True</span><span class=\"p\">,</span> <span class=\"n\">as_frame</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># split data into training test and test set</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span>\n                                                    <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">13</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># Requires further tuning</span>\n<span class=\"n\">obj</span> <span class=\"o\">=</span> <span class=\"n\">DecisionTreeRegressor</span><span class=\"p\">(</span><span class=\"n\">max_depth</span><span class=\"o\">=</span><span class=\"mi\">3</span><span class=\"p\">,</span> <span class=\"n\">random_state</span><span class=\"o\">=</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">obj2</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">RandomBagRegressor</span><span class=\"p\">(</span><span class=\"n\">obj</span><span class=\"o\">=</span><span class=\"n\">obj</span><span class=\"p\">,</span> <span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">False</span><span class=\"p\">,</span>\n                            <span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">50</span><span class=\"p\">,</span>\n                            <span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span> <span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mf\">0.9</span><span class=\"p\">,</span>\n                            <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">0</span><span class=\"p\">,</span> <span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span><span class=\"p\">)</span>\n\n<span class=\"n\">obj2</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">sqrt</span><span class=\"p\">(</span><span class=\"n\">obj2</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">)))</span> <span class=\"c1\"># RMSE</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.randombag.bag.RandomBag, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.randombag.RandomBagRegressor.__init__", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">obj</span>,</span><span class=\"param\">\t<span class=\"n\">n_estimators</span><span class=\"o\">=</span><span class=\"mi\">10</span>,</span><span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">False</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">col_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.randombag.RandomBagRegressor.type_fit", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.randombag.RandomBagRegressor.verbose", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.randombag.RandomBagRegressor.n_jobs", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.randombag.RandomBagRegressor.voter_", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.voter_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.randombag.RandomBagRegressor.fit", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.fit", "kind": "function", "doc": "<p>Fit Random 'Bagging' model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.randombag.RandomBagRegressor.predict", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.predict", "kind": "function", "doc": "<p>Predict for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">weights</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.randombag.RandomBagRegressor.score", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.randombag.RandomBagRegressor.set_predict_request", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.randombag.RandomBagRegressor.set_score_request", "modulename": "nnetsauce.randombag", "qualname": "RandomBagRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.ridge2", "modulename": "nnetsauce.ridge2", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.ridge2.Ridge2Classifier", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier", "kind": "class", "doc": "<p>Multinomial logit classification with 2 regularization parameters</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original predictors are included (True) in model's\n    fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nlambda1: float\n    regularization parameter on direct link\n\nlambda2: float\n    regularization parameter on hidden layer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: {array-like}\n    regression coefficients\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/ridge_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/ridge_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">X</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">y</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n\n<span class=\"c1\"># split data into training test and test set</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">X</span><span class=\"p\">,</span> <span class=\"n\">y</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># create the model with nnetsauce</span>\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">Ridge2Classifier</span><span class=\"p\">(</span><span class=\"n\">lambda1</span> <span class=\"o\">=</span> <span class=\"mf\">6.90185578e+04</span><span class=\"p\">,</span>\n                            <span class=\"n\">lambda2</span> <span class=\"o\">=</span> <span class=\"mf\">3.17392781e+02</span><span class=\"p\">,</span>\n                            <span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">95</span><span class=\"p\">,</span>\n                            <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span><span class=\"p\">,</span>\n                            <span class=\"n\">dropout</span> <span class=\"o\">=</span> <span class=\"mf\">3.62817383e-01</span><span class=\"p\">,</span>\n                            <span class=\"n\">type_clust</span> <span class=\"o\">=</span> <span class=\"s2\">&quot;gmm&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># fit the model on training set</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get the accuracy on test set</span>\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"c1\"># get area under the curve on test set (auc)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.ridge2.ridge2.Ridge2, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.ridge2.Ridge2Classifier.__init__", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.ridge2.Ridge2Classifier.type_fit", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.ridge2.Ridge2Classifier.loglik", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.loglik", "kind": "function", "doc": "<p>Log-likelihood for training data (X, Y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nY: array-like, shape = [n_samples]\n    One-hot encode target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">Y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.ridge2.Ridge2Classifier.fit", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.fit", "kind": "function", "doc": "<p>Fit Ridge model to training data (X, y).</p>\n\n<p>for beta: regression coeffs (beta11, ..., beta1p, ..., betaK1, ..., betaKp)\nfor K classes and p covariates.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">solver</span><span class=\"o\">=</span><span class=\"s1\">&#39;L-BFGS-B&#39;</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.ridge2.Ridge2Classifier.predict", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.ridge2.Ridge2Classifier.predict_proba", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.ridge2.Ridge2Classifier.score", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.ridge2.Ridge2Classifier.set_fit_request", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.set_fit_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.ridge2.Ridge2Classifier.set_score_request", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Classifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.ridge2.Ridge2Regressor", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Regressor", "kind": "class", "doc": "<p>Ridge regression with 2 regularization parameters derived from class Ridge</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nlambda1: float\n    regularization parameter on direct link\n\nlambda2: float\n    regularization parameter on hidden layer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    'cpu' or 'gpu' or 'tpu'\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: {array-like}\n    regression coefficients\n\ny_mean_: float\n    average response\n</code></pre>\n", "bases": "nnetsauce.ridge2.ridge2.Ridge2, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.ridge2.Ridge2Regressor.__init__", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Regressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.ridge2.Ridge2Regressor.type_fit", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Regressor.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.ridge2.Ridge2Regressor.fit", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Regressor.fit", "kind": "function", "doc": "<p>Fit Ridge model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.ridge2.Ridge2Regressor.predict", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Regressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.ridge2.Ridge2Regressor.score", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Regressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.ridge2.Ridge2Regressor.set_score_request", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2Regressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.ridge2.Ridge2MultitaskClassifier", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2MultitaskClassifier", "kind": "class", "doc": "<p>Multitask Ridge classification with 2 regularization parameters</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton',\n    'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not\n    (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0:\n        no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian\n    Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nlambda1: float\n    regularization parameter on direct link\n\nlambda2: float\n    regularization parameter on hidden layer\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: {array-like}\n    regression coefficients\n</code></pre>\n\n<p>Examples:</p>\n\n<p>See also <a href=\"https://github.com/Techtonique/nnetsauce/blob/master/examples/ridgemtask_classification.py\">https://github.com/Techtonique/nnetsauce/blob/master/examples/ridgemtask_classification.py</a></p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"kn\">import</span> <span class=\"nn\">nnetsauce</span> <span class=\"k\">as</span> <span class=\"nn\">ns</span>\n<span class=\"kn\">import</span> <span class=\"nn\">numpy</span> <span class=\"k\">as</span> <span class=\"nn\">np</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.datasets</span> <span class=\"kn\">import</span> <span class=\"n\">load_breast_cancer</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn.model_selection</span> <span class=\"kn\">import</span> <span class=\"n\">train_test_split</span>\n<span class=\"kn\">from</span> <span class=\"nn\">sklearn</span> <span class=\"kn\">import</span> <span class=\"n\">metrics</span>\n<span class=\"kn\">from</span> <span class=\"nn\">time</span> <span class=\"kn\">import</span> <span class=\"n\">time</span>\n\n<span class=\"n\">breast_cancer</span> <span class=\"o\">=</span> <span class=\"n\">load_breast_cancer</span><span class=\"p\">()</span>\n<span class=\"n\">Z</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">data</span>\n<span class=\"n\">t</span> <span class=\"o\">=</span> <span class=\"n\">breast_cancer</span><span class=\"o\">.</span><span class=\"n\">target</span>\n<span class=\"n\">np</span><span class=\"o\">.</span><span class=\"n\">random</span><span class=\"o\">.</span><span class=\"n\">seed</span><span class=\"p\">(</span><span class=\"mi\">123</span><span class=\"p\">)</span>\n<span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">,</span> <span class=\"n\">y_test</span> <span class=\"o\">=</span> <span class=\"n\">train_test_split</span><span class=\"p\">(</span><span class=\"n\">Z</span><span class=\"p\">,</span> <span class=\"n\">t</span><span class=\"p\">,</span> <span class=\"n\">test_size</span><span class=\"o\">=</span><span class=\"mf\">0.2</span><span class=\"p\">)</span>\n\n<span class=\"n\">fit_obj</span> <span class=\"o\">=</span> <span class=\"n\">ns</span><span class=\"o\">.</span><span class=\"n\">Ridge2MultitaskClassifier</span><span class=\"p\">(</span><span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">9.83730469e+01</span><span class=\"p\">),</span>\n                                <span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mf\">4.31054687e-01</span><span class=\"p\">,</span>\n                                <span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"nb\">int</span><span class=\"p\">(</span><span class=\"mf\">1.71484375e+00</span><span class=\"p\">),</span>\n                                <span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">1.24023438e+01</span><span class=\"p\">,</span> <span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">7.30263672e+03</span><span class=\"p\">)</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">fit</span><span class=\"p\">(</span><span class=\"n\">X_train</span><span class=\"p\">,</span> <span class=\"n\">y_train</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">score</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">,</span> <span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"s2\">&quot;roc_auc&quot;</span><span class=\"p\">))</span>\n\n<span class=\"n\">start</span> <span class=\"o\">=</span> <span class=\"n\">time</span><span class=\"p\">()</span>\n<span class=\"n\">preds</span> <span class=\"o\">=</span> <span class=\"n\">fit_obj</span><span class=\"o\">.</span><span class=\"n\">predict</span><span class=\"p\">(</span><span class=\"n\">X_test</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"sa\">f</span><span class=\"s2\">&quot;Elapsed </span><span class=\"si\">{</span><span class=\"n\">time</span><span class=\"p\">()</span><span class=\"w\"> </span><span class=\"o\">-</span><span class=\"w\"> </span><span class=\"n\">start</span><span class=\"si\">}</span><span class=\"s2\">&quot;</span><span class=\"p\">)</span>\n<span class=\"nb\">print</span><span class=\"p\">(</span><span class=\"n\">metrics</span><span class=\"o\">.</span><span class=\"n\">classification_report</span><span class=\"p\">(</span><span class=\"n\">preds</span><span class=\"p\">,</span> <span class=\"n\">y_test</span><span class=\"p\">))</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.ridge2.ridge2.Ridge2, sklearn.base.ClassifierMixin"}, {"fullname": "nnetsauce.ridge2.Ridge2MultitaskClassifier.__init__", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2MultitaskClassifier.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">lambda1</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">lambda2</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.ridge2.Ridge2MultitaskClassifier.type_fit", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2MultitaskClassifier.type_fit", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.ridge2.Ridge2MultitaskClassifier.fit", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2MultitaskClassifier.fit", "kind": "function", "doc": "<p>Fit Ridge model to training data (X, y).</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set or self.obj.fit\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2MultitaskClassifier.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.ridge2.Ridge2MultitaskClassifier.predict_proba", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2MultitaskClassifier.predict_proba", "kind": "function", "doc": "<p>Predict probabilities for test data X.</p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>probability estimates for test data: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.ridge2.Ridge2MultitaskClassifier.score", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2MultitaskClassifier.score", "kind": "function", "doc": "<p>Score the model on test set covariates X and response y.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.ridge2.Ridge2MultitaskClassifier.set_score_request", "modulename": "nnetsauce.ridge2", "qualname": "Ridge2MultitaskClassifier.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.rvfl", "modulename": "nnetsauce.rvfl", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor", "kind": "class", "doc": "<p>Bayesian Random Vector Functional Link Network regression with one prior</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton', 'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original features are included (True) in model''s fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0: no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\ns: float\n    std. dev. of regression parameters in Bayesian Ridge Regression\n\nsigma: float\n    std. dev. of residuals in Bayesian Ridge Regression\n\nreturn_std: boolean\n    if True, uncertainty around predictions is evaluated\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: array-like\n    regression''s coefficients\n\nSigma_: array-like\n    covariance of the distribution of fitted parameters\n\nGCV_: float\n    Generalized cross-validation error\n\ny_mean_: float\n    average response\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">TBD</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.__init__", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">2</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">s</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.s", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.s", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.sigma", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.sigma", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.beta_", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.beta_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.Sigma_", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.Sigma_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.GCV_", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.GCV_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.return_std", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.return_std", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.fit", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.fit", "kind": "function", "doc": "<p>Fit BayesianRVFLRegressor to training data (X, y).</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\ny: array-like, shape = [n_samples]\n    Target values.\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.predict", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nreturn_std: {boolean}, standard dev. is returned or not\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.score", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.set_predict_request", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.rvfl.BayesianRVFLRegressor.set_score_request", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFLRegressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor", "kind": "class", "doc": "<p>Bayesian Random Vector Functional Link Network regression with two priors</p>\n\n<p>Parameters:</p>\n\n<pre><code>n_hidden_features: int\n    number of nodes in the hidden layer\n\nactivation_name: str\n    activation function: 'relu', 'tanh', 'sigmoid', 'prelu' or 'elu'\n\na: float\n    hyperparameter for 'prelu' or 'elu' activation function\n\nnodes_sim: str\n    type of simulation for the nodes: 'sobol', 'hammersley', 'halton', 'uniform'\n\nbias: boolean\n    indicates if the hidden layer contains a bias term (True) or not (False)\n\ndropout: float\n    regularization parameter; (random) percentage of nodes dropped out\n    of the training\n\ndirect_link: boolean\n    indicates if the original features are included (True) in model''s fitting or not (False)\n\nn_clusters: int\n    number of clusters for 'kmeans' or 'gmm' clustering (could be 0: no clustering)\n\ncluster_encode: bool\n    defines how the variable containing clusters is treated (default is one-hot)\n    if `False`, then labels are used, without one-hot encoding\n\ntype_clust: str\n    type of clustering method: currently k-means ('kmeans') or Gaussian Mixture Model ('gmm')\n\ntype_scaling: a tuple of 3 strings\n    scaling methods for inputs, hidden layer, and clustering respectively\n    (and when relevant).\n    Currently available: standardization ('std') or MinMax scaling ('minmax')\n\nseed: int\n    reproducibility seed for nodes_sim=='uniform'\n\ns1: float\n    std. dev. of init. regression parameters in Bayesian Ridge Regression\n\ns2: float\n    std. dev. of augmented regression parameters in Bayesian Ridge Regression\n\nsigma: float\n    std. dev. of residuals in Bayesian Ridge Regression\n\nreturn_std: boolean\n    if True, uncertainty around predictions is evaluated\n\nbackend: str\n    \"cpu\" or \"gpu\" or \"tpu\"\n</code></pre>\n\n<p>Attributes:</p>\n\n<pre><code>beta_: array-like\n    regression''s coefficients\n\nSigma_: array-like\n    covariance of the distribution of fitted parameters\n\nGCV_: float\n    Generalized cross-validation error\n\ny_mean_: float\n    average response\n</code></pre>\n\n<p>Examples:</p>\n\n<div class=\"pdoc-code codehilite\">\n<pre><span></span><code><span class=\"n\">TBD</span>\n</code></pre>\n</div>\n", "bases": "nnetsauce.base.base.Base, sklearn.base.RegressorMixin"}, {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.__init__", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">n_hidden_features</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">activation_name</span><span class=\"o\">=</span><span class=\"s1\">&#39;relu&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">a</span><span class=\"o\">=</span><span class=\"mf\">0.01</span>,</span><span class=\"param\">\t<span class=\"n\">nodes_sim</span><span class=\"o\">=</span><span class=\"s1\">&#39;sobol&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">bias</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">dropout</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">direct_link</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">n_clusters</span><span class=\"o\">=</span><span class=\"mi\">0</span>,</span><span class=\"param\">\t<span class=\"n\">cluster_encode</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">type_clust</span><span class=\"o\">=</span><span class=\"s1\">&#39;kmeans&#39;</span>,</span><span class=\"param\">\t<span class=\"n\">type_scaling</span><span class=\"o\">=</span><span class=\"p\">(</span><span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">,</span> <span class=\"s1\">&#39;std&#39;</span><span class=\"p\">)</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">s1</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">s2</span><span class=\"o\">=</span><span class=\"mf\">0.1</span>,</span><span class=\"param\">\t<span class=\"n\">sigma</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>,</span><span class=\"param\">\t<span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">True</span>,</span><span class=\"param\">\t<span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span>)</span>"}, {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.s1", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.s1", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.s2", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.s2", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.sigma", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.sigma", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.beta_", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.beta_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.Sigma_", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.Sigma_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.GCV_", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.GCV_", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.return_std", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.return_std", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.fit", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.fit", "kind": "function", "doc": "<p>Fit BayesianRVFL2Regressor to training data (X, y)</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\n**kwargs: additional parameters to be passed to\n        self.cook_training_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>self: object\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.predict", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.predict", "kind": "function", "doc": "<p>Predict test data X.</p>\n\n<p>Parameters:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number\n    of samples and n_features is the number of features.\n\nreturn_std: {boolean}, standard dev. is returned or not\n\n**kwargs: additional parameters to be passed to\n        self.cook_test_set\n</code></pre>\n\n<p>Returns:</p>\n\n<pre><code>model predictions: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">return_std</span><span class=\"o\">=</span><span class=\"kc\">False</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.score", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.score", "kind": "function", "doc": "<p>Score the model on test set features X and response y. </p>\n\n<p>Args:</p>\n\n<pre><code>X: {array-like}, shape = [n_samples, n_features]\n    Training vectors, where n_samples is the number \n    of samples and n_features is the number of features\n\ny: array-like, shape = [n_samples]\n    Target values\n\nscoring: str\n    must be in ('explained_variance', 'neg_mean_absolute_error',                             'neg_mean_squared_error', 'neg_mean_squared_log_error',                             'neg_median_absolute_error', 'r2')\n\n**kwargs: additional parameters to be passed to scoring functions\n</code></pre>\n\n<p>Returns: </p>\n\n<pre><code>model scores: {array-like}\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">scoring</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"o\">**</span><span class=\"n\">kwargs</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.set_predict_request", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.set_predict_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.rvfl.BayesianRVFL2Regressor.set_score_request", "modulename": "nnetsauce.rvfl", "qualname": "BayesianRVFL2Regressor.set_score_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.sampling", "modulename": "nnetsauce.sampling", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.sampling.SubSampler", "modulename": "nnetsauce.sampling", "qualname": "SubSampler", "kind": "class", "doc": "<p>Subsampling class.</p>\n\n<p>Attributes:</p>\n\n<p>y: array-like, shape = [n_samples]\n       Target values.</p>\n\n<p>row_sample: double\n       subsampling fraction</p>\n\n<p>n_samples: int\n        subsampling by using the number of rows</p>\n\n<p>seed: int\n       reproductibility seed</p>\n\n<p>n_jobs: int\n        number of jobs to run in parallel</p>\n\n<p>verbose: bool\n        print progress messages and bars</p>\n\n<p>Returns:</p>\n\n<pre><code>indices of subsampled y\n</code></pre>\n"}, {"fullname": "nnetsauce.sampling.SubSampler.__init__", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"n\">y</span>,</span><span class=\"param\">\t<span class=\"n\">row_sample</span><span class=\"o\">=</span><span class=\"mf\">0.8</span>,</span><span class=\"param\">\t<span class=\"n\">n_samples</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span>,</span><span class=\"param\">\t<span class=\"n\">n_jobs</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"kc\">False</span></span>)</span>"}, {"fullname": "nnetsauce.sampling.SubSampler.y", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.y", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.sampling.SubSampler.row_sample", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.row_sample", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.sampling.SubSampler.n_samples", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.n_samples", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.sampling.SubSampler.seed", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.seed", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.sampling.SubSampler.indices", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.indices", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.sampling.SubSampler.n_jobs", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.n_jobs", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.sampling.SubSampler.verbose", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.sampling.SubSampler.subsample", "modulename": "nnetsauce.sampling", "qualname": "SubSampler.subsample", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.simulation", "modulename": "nnetsauce.simulation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.simulation.generate_sobol", "modulename": "nnetsauce.simulation", "qualname": "generate_sobol", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_dims</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">n_points</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.simulation.generate_uniform", "modulename": "nnetsauce.simulation", "qualname": "generate_uniform", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_dims</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">n_points</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"mi\">123</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.simulation.generate_hammersley", "modulename": "nnetsauce.simulation", "qualname": "generate_hammersley", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_dims</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">n_points</span><span class=\"o\">=</span><span class=\"mi\">100</span>, </span><span class=\"param\"><span class=\"n\">primes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.simulation.generate_halton", "modulename": "nnetsauce.simulation", "qualname": "generate_halton", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_dims</span><span class=\"o\">=</span><span class=\"mi\">2</span>, </span><span class=\"param\"><span class=\"n\">n_points</span><span class=\"o\">=</span><span class=\"mi\">10</span>, </span><span class=\"param\"><span class=\"n\">primes</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">seed</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.simulation.getsims", "modulename": "nnetsauce.simulation", "qualname": "getsims", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_tuple</span>, </span><span class=\"param\"><span class=\"n\">ix</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.simulation.getsims", "modulename": "nnetsauce.simulation.getsims", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.simulation.getsims.getsims", "modulename": "nnetsauce.simulation.getsims", "qualname": "getsims", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">input_tuple</span>, </span><span class=\"param\"><span class=\"n\">ix</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests", "modulename": "nnetsauce.tests", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.tests.tests_adaboost", "modulename": "nnetsauce.tests.tests_adaboost", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.tests.tests_adaboost.TestAdaBoost", "modulename": "nnetsauce.tests.tests_adaboost", "qualname": "TestAdaBoost", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_AdaBoost", "modulename": "nnetsauce.tests.tests_adaboost", "qualname": "TestAdaBoost.test_AdaBoost", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_adaboost.TestAdaBoost.test_score", "modulename": "nnetsauce.tests.tests_adaboost", "qualname": "TestAdaBoost.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_base", "modulename": "nnetsauce.tests.tests_base", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.tests.tests_base.TestBase", "modulename": "nnetsauce.tests.tests_base", "qualname": "TestBase", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "nnetsauce.tests.tests_base.TestBase.test_base", "modulename": "nnetsauce.tests.tests_base", "qualname": "TestBase.test_base", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_base.TestBase.test_score", "modulename": "nnetsauce.tests.tests_base", "qualname": "TestBase.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_custom", "modulename": "nnetsauce.tests.tests_custom", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.tests.tests_custom.TestCustom", "modulename": "nnetsauce.tests.tests_custom", "qualname": "TestCustom", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "nnetsauce.tests.tests_custom.TestCustom.test_custom", "modulename": "nnetsauce.tests.tests_custom", "qualname": "TestCustom.test_custom", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_custom.TestCustom.test_score", "modulename": "nnetsauce.tests.tests_custom", "qualname": "TestCustom.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_model_selection", "modulename": "nnetsauce.tests.tests_model_selection", "kind": "module", "doc": "<p>Created on Thu May 16 16:37:42 2019</p>\n\n<p>@author: moudiki</p>\n"}, {"fullname": "nnetsauce.tests.tests_model_selection.TS_Split", "modulename": "nnetsauce.tests.tests_model_selection", "qualname": "TS_Split", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "nnetsauce.tests.tests_model_selection.TS_Split.test_tsplit", "modulename": "nnetsauce.tests.tests_model_selection", "qualname": "TS_Split.test_tsplit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_mtask", "modulename": "nnetsauce.tests.tests_mtask", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.tests.tests_mtask.TestMultitask", "modulename": "nnetsauce.tests.tests_mtask", "qualname": "TestMultitask", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "nnetsauce.tests.tests_mtask.TestMultitask.test_Multitask", "modulename": "nnetsauce.tests.tests_mtask", "qualname": "TestMultitask.test_Multitask", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_mtask.TestMultitask.test_score", "modulename": "nnetsauce.tests.tests_mtask", "qualname": "TestMultitask.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_mts", "modulename": "nnetsauce.tests.tests_mts", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.tests.tests_mts.TestMTS", "modulename": "nnetsauce.tests.tests_mts", "qualname": "TestMTS", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "nnetsauce.tests.tests_mts.TestMTS.test_MTS", "modulename": "nnetsauce.tests.tests_mts", "qualname": "TestMTS.test_MTS", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_mts.TestMTS.test_get_set", "modulename": "nnetsauce.tests.tests_mts", "qualname": "TestMTS.test_get_set", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_mts.TestMTS.test_score", "modulename": "nnetsauce.tests.tests_mts", "qualname": "TestMTS.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_randombag", "modulename": "nnetsauce.tests.tests_randombag", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.tests.tests_randombag.TestRandomBag", "modulename": "nnetsauce.tests.tests_randombag", "qualname": "TestRandomBag", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "nnetsauce.tests.tests_randombag.TestRandomBag.test_RandomBag", "modulename": "nnetsauce.tests.tests_randombag", "qualname": "TestRandomBag.test_RandomBag", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_randombag.TestRandomBag.test_score", "modulename": "nnetsauce.tests.tests_randombag", "qualname": "TestRandomBag.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_ridge", "modulename": "nnetsauce.tests.tests_ridge", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.tests.tests_ridge.TestRidge", "modulename": "nnetsauce.tests.tests_ridge", "qualname": "TestRidge", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "nnetsauce.tests.tests_ridge.TestRidge.test_Ridge", "modulename": "nnetsauce.tests.tests_ridge", "qualname": "TestRidge.test_Ridge", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_ridge.TestRidge.test_score", "modulename": "nnetsauce.tests.tests_ridge", "qualname": "TestRidge.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_ridge_regression", "modulename": "nnetsauce.tests.tests_ridge_regression", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor", "modulename": "nnetsauce.tests.tests_ridge_regression", "qualname": "TestRidge2Regressor", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_Ridge2Regressor", "modulename": "nnetsauce.tests.tests_ridge_regression", "qualname": "TestRidge2Regressor.test_Ridge2Regressor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_ridge_regression.TestRidge2Regressor.test_score", "modulename": "nnetsauce.tests.tests_ridge_regression", "qualname": "TestRidge2Regressor.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_rvfl", "modulename": "nnetsauce.tests.tests_rvfl", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.tests.tests_rvfl.TestRVFL", "modulename": "nnetsauce.tests.tests_rvfl", "qualname": "TestRVFL", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "nnetsauce.tests.tests_rvfl.TestRVFL.test_rvfl", "modulename": "nnetsauce.tests.tests_rvfl", "qualname": "TestRVFL.test_rvfl", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_rvfl.TestRVFL.test_get_set", "modulename": "nnetsauce.tests.tests_rvfl", "qualname": "TestRVFL.test_get_set", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_rvfl.TestRVFL.test_score", "modulename": "nnetsauce.tests.tests_rvfl", "qualname": "TestRVFL.test_score", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_simulation", "modulename": "nnetsauce.tests.tests_simulation", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.tests.tests_simulation.TestSimul", "modulename": "nnetsauce.tests.tests_simulation", "qualname": "TestSimul", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "nnetsauce.tests.tests_simulation.TestSimul.test_sobol", "modulename": "nnetsauce.tests.tests_simulation", "qualname": "TestSimul.test_sobol", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_simulation.TestSimul.test_hammersley", "modulename": "nnetsauce.tests.tests_simulation", "qualname": "TestSimul.test_hammersley", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_simulation.TestSimul.test_halton", "modulename": "nnetsauce.tests.tests_simulation", "qualname": "TestSimul.test_halton", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_simulation.TestSimul.test_uniform", "modulename": "nnetsauce.tests.tests_simulation", "qualname": "TestSimul.test_uniform", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_tssplit", "modulename": "nnetsauce.tests.tests_tssplit", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit", "modulename": "nnetsauce.tests.tests_tssplit", "qualname": "TestTimeSeriesSplit", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "nnetsauce.tests.tests_tssplit.TestTimeSeriesSplit.test_TimeSeriesSplit", "modulename": "nnetsauce.tests.tests_tssplit", "qualname": "TestTimeSeriesSplit.test_TimeSeriesSplit", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_utils", "modulename": "nnetsauce.tests.tests_utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.tests.tests_utils.TestUtils", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils", "kind": "class", "doc": "<p>A class whose instances are single test cases.</p>\n\n<p>By default, the test code itself should be placed in a method named\n'runTest'.</p>\n\n<p>If the fixture may be used for many test cases, create as\nmany test methods as are needed. When instantiating such a TestCase\nsubclass, specify in the constructor arguments the name of the test method\nthat the instance is to execute.</p>\n\n<p>Test authors should subclass TestCase for their own tests. Construction\nand deconstruction of the test's environment ('fixture') can be\nimplemented by overriding the 'setUp' and 'tearDown' methods respectively.</p>\n\n<p>If it is necessary to override the __init__ method, the base class\n__init__ method must always be called. It is important that subclasses\nshould not change the signature of their __init__ method, since instances\nof the classes are instantiated automatically by parts of the framework\nin order to be run.</p>\n\n<p>When subclassing TestCase, you can set these attributes:</p>\n\n<ul>\n<li>failureException: determines which exception will be raised when\nthe instance's assertion methods fail; test methods raising this\nexception will be deemed to have 'failed' rather than 'errored'.</li>\n<li>longMessage: determines whether long messages (including repr of\nobjects used in assert methods) will be printed on failure in <em>addition</em>\nto any explicit message passed.</li>\n<li>maxDiff: sets the maximum length of a diff in failure messages\nby assert methods using difflib. It is looked up as an instance\nattribute so can be configured by individual tests if required.</li>\n</ul>\n", "bases": "unittest.case.TestCase"}, {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_crossprod", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_crossprod", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_tcrossprod", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_tcrossprod", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_cbind", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_cbind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_rbind", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_rbind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_merge_two_dicts", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_merge_two_dicts", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_psd_check", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_psd_check", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_nearestPD", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_nearestPD", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_inv_penalized_cov", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_inv_penalized_cov", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_lmf_beta_hat", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_lmf_beta_hat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_MTS_train_inputs", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_MTS_train_inputs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_MTS_reformat_response", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_MTS_reformat_response", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_beta_Sigma_hat_rvfl", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.tests.tests_utils.TestUtils.test_beta_Sigma_hat_rvfl2", "modulename": "nnetsauce.tests.tests_utils", "qualname": "TestUtils.test_beta_Sigma_hat_rvfl2", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils", "modulename": "nnetsauce.utils", "kind": "module", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.utils.beta_hat", "modulename": "nnetsauce.utils", "qualname": "beta_hat", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">lam</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.inv_penalized_cov", "modulename": "nnetsauce.utils", "qualname": "inv_penalized_cov", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">lam</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.cbind", "modulename": "nnetsauce.utils", "qualname": "cbind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.rbind", "modulename": "nnetsauce.utils", "qualname": "rbind", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span>, </span><span class=\"param\"><span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.convert_df_to_numeric", "modulename": "nnetsauce.utils", "qualname": "convert_df_to_numeric", "kind": "function", "doc": "<p>Convert all columns of DataFrame to numeric type using astype with loop.</p>\n\n<p>Parameters:\n    df (pd.DataFrame): Input DataFrame with mixed data types.</p>\n\n<p>Returns:\n    pd.DataFrame: DataFrame with all columns converted to numeric type.</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.crossprod", "modulename": "nnetsauce.utils", "qualname": "crossprod", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.tcrossprod", "modulename": "nnetsauce.utils", "qualname": "tcrossprod", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>, </span><span class=\"param\"><span class=\"n\">backend</span><span class=\"o\">=</span><span class=\"s1\">&#39;cpu&#39;</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.to_np_array", "modulename": "nnetsauce.utils", "qualname": "to_np_array", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.merge_two_dicts", "modulename": "nnetsauce.utils", "qualname": "merge_two_dicts", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.is_factor", "modulename": "nnetsauce.utils", "qualname": "is_factor", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">y</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.isPD", "modulename": "nnetsauce.utils", "qualname": "isPD", "kind": "function", "doc": "<p>Returns true when input is positive-definite, via Cholesky</p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">B</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.nearestPD", "modulename": "nnetsauce.utils", "qualname": "nearestPD", "kind": "function", "doc": "<p>Find the nearest positive-definite matrix to input</p>\n\n<p>A Python/Numpy port of John D'Errico's <code>nearestSPD</code> MATLAB code [1], which\ncredits [2].</p>\n\n<p>[1] <a href=\"https://www.mathworks.com/matlabcentral/fileexchange/42885-nearestspd\">https://www.mathworks.com/matlabcentral/fileexchange/42885-nearestspd</a></p>\n\n<p>[2] N.J. Higham, \"Computing a nearest symmetric positive semidefinite\nmatrix\" (1988): <a href=\"https://doi.org/10.1016/0024-3795(88)90223-6\">https://doi.org/10.1016/0024-3795(88)90223-6</a></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">A</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.compute_output_dates", "modulename": "nnetsauce.utils", "qualname": "compute_output_dates", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">df</span>, </span><span class=\"param\"><span class=\"n\">horizon</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.create_lags", "modulename": "nnetsauce.utils", "qualname": "create_lags", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">x</span>, </span><span class=\"param\"><span class=\"n\">k</span>, </span><span class=\"param\"><span class=\"n\">n</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.create_train_inputs", "modulename": "nnetsauce.utils", "qualname": "create_train_inputs", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">k</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.reformat_response", "modulename": "nnetsauce.utils", "qualname": "reformat_response", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">X</span>, </span><span class=\"param\"><span class=\"n\">k</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.TimeSeriesSplit", "modulename": "nnetsauce.utils", "qualname": "TimeSeriesSplit", "kind": "class", "doc": "<p>Time Series cross-validator</p>\n", "bases": "sklearn.model_selection._split.TimeSeriesSplit"}, {"fullname": "nnetsauce.utils.TimeSeriesSplit.__init__", "modulename": "nnetsauce.utils", "qualname": "TimeSeriesSplit.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">n_splits</span><span class=\"o\">=</span><span class=\"mi\">5</span>, </span><span class=\"param\"><span class=\"n\">max_train_size</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "nnetsauce.utils.TimeSeriesSplit.split", "modulename": "nnetsauce.utils", "qualname": "TimeSeriesSplit.split", "kind": "function", "doc": "<p>Generate indices to split data into training and test set.</p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>X : array-like, shape (n_samples, n_features)\n    Training data, where n_samples is the number of samples\n    and n_features is the number of features.</p>\n\n<p>initial_window : int, initial number of consecutive values in each\n                 training set sample</p>\n\n<p>horizon : int, number of consecutive values in test set sample</p>\n\n<p>fixed_window : boolean, if False, all training samples start at index 0</p>\n\n<p>y : array-like, shape (n_samples,)\n    Always ignored, exists for compatibility.</p>\n\n<p>groups : array-like, with shape (n_samples,)\n    Always ignored, exists for compatibility.</p>\n\n<h2 id=\"yields\">Yields</h2>\n\n<p>train : ndarray\n    The training set indices for that split.</p>\n\n<p>test : ndarray\n    The testing set indices for that split.</p>\n", "signature": "<span class=\"signature pdoc-code multiline\">(<span class=\"param\">\t<span class=\"bp\">self</span>,</span><span class=\"param\">\t<span class=\"n\">X</span>,</span><span class=\"param\">\t<span class=\"n\">y</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">groups</span><span class=\"o\">=</span><span class=\"kc\">None</span>,</span><span class=\"param\">\t<span class=\"n\">initial_window</span><span class=\"o\">=</span><span class=\"mi\">5</span>,</span><span class=\"param\">\t<span class=\"n\">horizon</span><span class=\"o\">=</span><span class=\"mi\">3</span>,</span><span class=\"param\">\t<span class=\"n\">fixed_window</span><span class=\"o\">=</span><span class=\"kc\">False</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.TimeSeriesSplit.set_split_request", "modulename": "nnetsauce.utils", "qualname": "TimeSeriesSplit.set_split_request", "kind": "function", "doc": "<p>A descriptor for request methods.</p>\n\n<p><em>New in version 1.3.</em></p>\n\n<h2 id=\"parameters\">Parameters</h2>\n\n<p>name : str\n    The name of the method for which the request function should be\n    created, e.g. <code>\"fit\"</code> would create a <code>set_fit_request</code> function.</p>\n\n<p>keys : list of str\n    A list of strings which are accepted parameters by the created\n    function, e.g. <code>[\"sample_weight\"]</code> if the corresponding method\n    accepts it as a metadata.</p>\n\n<p>validate_keys : bool, default=True\n    Whether to check if the requested parameters fit the actual parameters\n    of the method.</p>\n\n<h2 id=\"notes\">Notes</h2>\n\n<p>This class is a descriptor <sup class=\"footnote-ref\" id=\"fnref-1\"><a href=\"#fn-1\">1</a></sup> and uses PEP-362 to set the signature of\nthe returned function <sup class=\"footnote-ref\" id=\"fnref-2\"><a href=\"#fn-2\">2</a></sup>.</p>\n\n<h2 id=\"references\">References</h2>\n\n<div class=\"footnotes\">\n<hr />\n<ol>\n<li id=\"fn-1\">\n<p><a href=\"https://docs.python.org/3/howto/descriptor.html\">https://docs.python.org/3/howto/descriptor.html</a>&#160;<a href=\"#fnref-1\" class=\"footnoteBackLink\" title=\"Jump back to footnote 1 in the text.\">&#8617;</a></p>\n</li>\n\n<li id=\"fn-2\">\n<p><a href=\"https://www.python.org/dev/peps/pep-0362/\">https://www.python.org/dev/peps/pep-0362/</a>&#160;<a href=\"#fnref-2\" class=\"footnoteBackLink\" title=\"Jump back to footnote 2 in the text.\">&#8617;</a></p>\n</li>\n</ol>\n</div>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">unknown</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.Progbar", "modulename": "nnetsauce.utils", "qualname": "Progbar", "kind": "class", "doc": "<p>Displays a progress bar.</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<pre><code>target: Total number of steps expected, None if unknown.\nwidth: Progress bar width on screen.\nverbose: Verbosity mode, 0 (silent), 1 (verbose), 2 (semi-verbose)\nstateful_metrics: Iterable of string names of metrics that\n    should *not* be averaged over time. Metrics in this list\n    will be displayed as-is. All others will be averaged\n    by the progbar before display.\ninterval: Minimum visual progress update interval (in seconds).\n</code></pre>\n"}, {"fullname": "nnetsauce.utils.Progbar.__init__", "modulename": "nnetsauce.utils", "qualname": "Progbar.__init__", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"n\">target</span>, </span><span class=\"param\"><span class=\"n\">width</span><span class=\"o\">=</span><span class=\"mi\">30</span>, </span><span class=\"param\"><span class=\"n\">verbose</span><span class=\"o\">=</span><span class=\"mi\">1</span>, </span><span class=\"param\"><span class=\"n\">interval</span><span class=\"o\">=</span><span class=\"mf\">0.05</span>, </span><span class=\"param\"><span class=\"n\">stateful_metrics</span><span class=\"o\">=</span><span class=\"kc\">None</span></span>)</span>"}, {"fullname": "nnetsauce.utils.Progbar.target", "modulename": "nnetsauce.utils", "qualname": "Progbar.target", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.utils.Progbar.width", "modulename": "nnetsauce.utils", "qualname": "Progbar.width", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.utils.Progbar.verbose", "modulename": "nnetsauce.utils", "qualname": "Progbar.verbose", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.utils.Progbar.interval", "modulename": "nnetsauce.utils", "qualname": "Progbar.interval", "kind": "variable", "doc": "<p></p>\n"}, {"fullname": "nnetsauce.utils.Progbar.update", "modulename": "nnetsauce.utils", "qualname": "Progbar.update", "kind": "function", "doc": "<p>Updates the progress bar.</p>\n\n<h1 id=\"arguments\">Arguments</h1>\n\n<pre><code>current: Index of current step.\nvalues: List of tuples:\n    `(name, value_for_last_step)`.\n    If `name` is in `stateful_metrics`,\n    `value_for_last_step` will be displayed as-is.\n    Else, an average of the metric over time will be displayed.\n</code></pre>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">current</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}, {"fullname": "nnetsauce.utils.Progbar.add", "modulename": "nnetsauce.utils", "qualname": "Progbar.add", "kind": "function", "doc": "<p></p>\n", "signature": "<span class=\"signature pdoc-code condensed\">(<span class=\"param\"><span class=\"bp\">self</span>, </span><span class=\"param\"><span class=\"n\">n</span>, </span><span class=\"param\"><span class=\"n\">values</span><span class=\"o\">=</span><span class=\"kc\">None</span></span><span class=\"return-annotation\">):</span></span>", "funcdef": "def"}];

    // mirrored in build-search-index.js (part 1)
    // Also split on html tags. this is a cheap heuristic, but good enough.
    elasticlunr.tokenizer.setSeperator(/[\s\-.;&_'"=,()]+|<[^>]*>/);

    let searchIndex;
    if (docs._isPrebuiltIndex) {
        console.info("using precompiled search index");
        searchIndex = elasticlunr.Index.load(docs);
    } else {
        console.time("building search index");
        // mirrored in build-search-index.js (part 2)
        searchIndex = elasticlunr(function () {
            this.pipeline.remove(elasticlunr.stemmer);
            this.pipeline.remove(elasticlunr.stopWordFilter);
            this.addField("qualname");
            this.addField("fullname");
            this.addField("annotation");
            this.addField("default_value");
            this.addField("signature");
            this.addField("bases");
            this.addField("doc");
            this.setRef("fullname");
        });
        for (let doc of docs) {
            searchIndex.addDoc(doc);
        }
        console.timeEnd("building search index");
    }

    return (term) => searchIndex.search(term, {
        fields: {
            qualname: {boost: 4},
            fullname: {boost: 2},
            annotation: {boost: 2},
            default_value: {boost: 2},
            signature: {boost: 2},
            bases: {boost: 2},
            doc: {boost: 1},
        },
        expand: true
    });
})();